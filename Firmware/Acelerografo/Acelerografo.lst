;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 29/7/2022 21:04:25
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040F3E  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000E1C  	3612
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x00123E  	4670
0x002A	0x00102C  	4140
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x0011F2  	4594
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x0F3E	0x21B60F  	MOV	#7008, W15
0x0F40	0x27FFF0  	MOV	#32767, W0
0x0F42	0xB7A020  	MOV	WREG, SPLIM
0x0F44	0x202010  	MOV	#513, W0
0x0F46	0xB7A032  	MOV	WREG, DSRPAG
0x0F48	0x200040  	MOV	#4, W0
0x0F4A	0xB72044  	IOR	CORCON
0x0F4C	0x000000021558  	CALL	5464
;Acelerografo.c,80 :: 		void main() {
;Acelerografo.c,82 :: 		ConfiguracionPrincipal();
0x0F50	0x781F8A  	PUSH	W10
0x0F52	0x07FDD5  	RCALL	_ConfiguracionPrincipal
;Acelerografo.c,84 :: 		DS3234_init();                                                             //inicializa el RTC
0x0F54	0x07FDB6  	RCALL	_DS3234_init
;Acelerografo.c,85 :: 		tasaMuestreo = 1;                                                          //1=250Hz, 2=125Hz, 4=62.5Hz, 8=31.25Hz
0x0F56	0x21B3F1  	MOV	#lo_addr(_tasaMuestreo), W1
0x0F58	0xB3C010  	MOV.B	#1, W0
0x0F5A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,86 :: 		ADXL355_init(tasaMuestreo);                                                //Inicializa el modulo ADXL con la tasa de muestreo requerida:
0x0F5C	0xB3C01A  	MOV.B	#1, W10
0x0F5E	0x07FCD0  	RCALL	_ADXL355_init
;Acelerografo.c,87 :: 		numTMR1 = (tasaMuestreo*10)-1;                                             //Calcula el numero de veces que tienen que desbordarse el TMR1 para cada tasa de muestreo
0x0F60	0x21B3F0  	MOV	#lo_addr(_tasaMuestreo), W0
0x0F62	0xFB8090  	ZE	[W0], W1
0x0F64	0x2000A0  	MOV	#10, W0
0x0F66	0xB80900  	MUL.UU	W1, W0, W2
0x0F68	0x21B400  	MOV	#lo_addr(_numTMR1), W0
0x0F6A	0x514861  	SUB.B	W2, #1, [W0]
;Acelerografo.c,92 :: 		i = 0;
0x0F6C	0xEF2000  	CLR	W0
0x0F6E	0x88DA30  	MOV	W0, _i
;Acelerografo.c,93 :: 		j = 0;
0x0F70	0xEF2000  	CLR	W0
0x0F72	0x88DA40  	MOV	W0, _j
;Acelerografo.c,94 :: 		x = 0;
0x0F74	0xEF2000  	CLR	W0
0x0F76	0x88DA50  	MOV	W0, _x
;Acelerografo.c,95 :: 		y = 0;
0x0F78	0xEF2000  	CLR	W0
0x0F7A	0x88DA10  	MOV	W0, _y
;Acelerografo.c,98 :: 		banLec = 0;
0x0F7C	0x21B411  	MOV	#lo_addr(_banLec), W1
0x0F7E	0xEF2000  	CLR	W0
0x0F80	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,99 :: 		banEsc = 0;
0x0F82	0x21B441  	MOV	#lo_addr(_banEsc), W1
0x0F84	0xEF2000  	CLR	W0
0x0F86	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,100 :: 		banCiclo = 0;
0x0F88	0x21B3E1  	MOV	#lo_addr(_banCiclo), W1
0x0F8A	0xEF2000  	CLR	W0
0x0F8C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,101 :: 		banInicio = 0;
0x0F8E	0x21B351  	MOV	#lo_addr(_banInicio), W1
0x0F90	0xEF2000  	CLR	W0
0x0F92	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,102 :: 		banOperacion = 0;
0x0F94	0x21B361  	MOV	#lo_addr(_banOperacion), W1
0x0F96	0xEF2000  	CLR	W0
0x0F98	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,103 :: 		tipoOperacion = 0;
0x0F9A	0x21B371  	MOV	#lo_addr(_tipoOperacion), W1
0x0F9C	0xEF2000  	CLR	W0
0x0F9E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,104 :: 		banMuestrear = 0;                                                          //Inicia el programa con esta bandera en bajo para permitir que la RPi envie la peticion de inicio de muestreo
0x0FA0	0x21B321  	MOV	#lo_addr(_banMuestrear), W1
0x0FA2	0xEF2000  	CLR	W0
0x0FA4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,105 :: 		banLeer = 0;
0x0FA6	0x21B331  	MOV	#lo_addr(_banLeer), W1
0x0FA8	0xEF2000  	CLR	W0
0x0FAA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,106 :: 		banConf = 0;
0x0FAC	0x21B341  	MOV	#lo_addr(_banConf), W1
0x0FAE	0xEF2000  	CLR	W0
0x0FB0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,107 :: 		SPI1BUF = 0x00;
0x0FB2	0xEF2248  	CLR	SPI1BUF
;Acelerografo.c,110 :: 		i_gps = 0;
0x0FB4	0xEF2000  	CLR	W0
0x0FB6	0x88D9E0  	MOV	W0, _i_gps
;Acelerografo.c,111 :: 		byteGPS = 0;
0x0FB8	0x21B3B1  	MOV	#lo_addr(_byteGPS), W1
0x0FBA	0xEF2000  	CLR	W0
0x0FBC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,112 :: 		banTIGPS = 0;
0x0FBE	0x21B381  	MOV	#lo_addr(_banTIGPS), W1
0x0FC0	0xEF2000  	CLR	W0
0x0FC2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,113 :: 		banTFGPS = 0;   //Sin usar
0x0FC4	0x21B391  	MOV	#lo_addr(_banTFGPS), W1
0x0FC6	0xEF2000  	CLR	W0
0x0FC8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,114 :: 		banTCGPS = 0;
0x0FCA	0x21B3A1  	MOV	#lo_addr(_banTCGPS), W1
0x0FCC	0xEF2000  	CLR	W0
0x0FCE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,115 :: 		banSetGPS = 0;
0x0FD0	0x21B451  	MOV	#lo_addr(_banSetGPS), W1
0x0FD2	0xEF2000  	CLR	W0
0x0FD4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,116 :: 		stsGPS = 0;   //Sin usar
0x0FD6	0x21B561  	MOV	#lo_addr(_stsGPS), W1
0x0FD8	0xEF2000  	CLR	W0
0x0FDA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,119 :: 		banSetReloj = 0;
0x0FDC	0x21B571  	MOV	#lo_addr(_banSetReloj), W1
0x0FDE	0xEF2000  	CLR	W0
0x0FE0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,120 :: 		fuenteReloj = 0;
0x0FE2	0x21B581  	MOV	#lo_addr(_fuenteReloj), W1
0x0FE4	0xEF2000  	CLR	W0
0x0FE6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,121 :: 		horaSistema = 0;
0x0FE8	0xEF2000  	CLR	W0
0x0FEA	0xEF2002  	CLR	W1
0x0FEC	0x88DA70  	MOV	W0, _horaSistema
0x0FEE	0x88DA81  	MOV	W1, _horaSistema+2
;Acelerografo.c,122 :: 		fechaSistema = 0;
0x0FF0	0xEF2000  	CLR	W0
0x0FF2	0xEF2002  	CLR	W1
0x0FF4	0x88DA90  	MOV	W0, _fechaSistema
0x0FF6	0x88DAA1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,125 :: 		contMuestras = 0;
0x0FF8	0x21B4D1  	MOV	#lo_addr(_contMuestras), W1
0x0FFA	0xEF2000  	CLR	W0
0x0FFC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,126 :: 		contCiclos = 0;
0x0FFE	0x21B5B1  	MOV	#lo_addr(_contCiclos), W1
0x1000	0xEF2000  	CLR	W0
0x1002	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,127 :: 		contFIFO = 0;
0x1004	0xEF2000  	CLR	W0
0x1006	0x88DAE0  	MOV	W0, _contFIFO
;Acelerografo.c,128 :: 		numFIFO = 0;
0x1008	0x21B5E1  	MOV	#lo_addr(_numFIFO), W1
0x100A	0xEF2000  	CLR	W0
0x100C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,129 :: 		numSetsFIFO = 0;
0x100E	0x21B591  	MOV	#lo_addr(_numSetsFIFO), W1
0x1010	0xEF2000  	CLR	W0
0x1012	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,130 :: 		contTimer1 = 0;
0x1014	0x21B5A1  	MOV	#lo_addr(_contTimer1), W1
0x1016	0xEF2000  	CLR	W0
0x1018	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,133 :: 		RP1 = 0;
0x101A	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,134 :: 		RP2 = 0;
0x101C	0xA98E14  	BCLR	LATB4_bit, BitPos(LATB4_bit+0)
;Acelerografo.c,135 :: 		TEST = 1;
0x101E	0xA88E15  	BSET	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,138 :: 		banTI = 0;
0x1020	0x21B4C1  	MOV	#lo_addr(_banTI), W1
0x1022	0xEF2000  	CLR	W0
0x1024	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,140 :: 		while(1){
L_main49:
;Acelerografo.c,142 :: 		}
0x1026	0x37FFFF  	BRA	L_main49
;Acelerografo.c,144 :: 		}
L_end_main:
0x1028	0x78054F  	POP	W10
L__main_end_loop:
0x102A	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_ConfiguracionPrincipal:
;Acelerografo.c,153 :: 		void ConfiguracionPrincipal(){
;Acelerografo.c,156 :: 		CLKDIVbits.FRCDIV = 0;                                                     //FIN=FRC/1
0x0AFE	0x781F8A  	PUSH	W10
0x0B00	0x781F8B  	PUSH	W11
0x0B02	0x781F8C  	PUSH	W12
0x0B04	0x781F8D  	PUSH	W13
0x0B06	0x803A21  	MOV	CLKDIVbits, W1
0x0B08	0x2F8FF0  	MOV	#63743, W0
0x0B0A	0x608000  	AND	W1, W0, W0
0x0B0C	0xB7A744  	MOV	WREG, CLKDIVbits
;Acelerografo.c,157 :: 		CLKDIVbits.PLLPOST = 0;                                                    //N2=2
0x0B0E	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0B10	0x784090  	MOV.B	[W0], W1
0x0B12	0xB3C3F0  	MOV.B	#63, W0
0x0B14	0x60C080  	AND.B	W1, W0, W1
0x0B16	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0B18	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,158 :: 		CLKDIVbits.PLLPRE = 5;                                                     //N1=7
0x0B1A	0xB3C050  	MOV.B	#5, W0
0x0B1C	0x784080  	MOV.B	W0, W1
0x0B1E	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0B20	0x68C090  	XOR.B	W1, [W0], W1
0x0B22	0x60C0FF  	AND.B	W1, #31, W1
0x0B24	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0B26	0x68C090  	XOR.B	W1, [W0], W1
0x0B28	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0B2A	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,159 :: 		PLLFBDbits.PLLDIV = 150;                                                   //M=152
0x0B2C	0x200960  	MOV	#150, W0
0x0B2E	0x780080  	MOV	W0, W1
0x0B30	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x0B32	0x688090  	XOR	W1, [W0], W1
0x0B34	0x201FF0  	MOV	#511, W0
0x0B36	0x608080  	AND	W1, W0, W1
0x0B38	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x0B3A	0x688090  	XOR	W1, [W0], W1
0x0B3C	0x883A31  	MOV	W1, PLLFBDbits
;Acelerografo.c,162 :: 		ANSELA = 0;                                                                //Configura PORTA como digital     *
0x0B3E	0xEF2E0E  	CLR	ANSELA
;Acelerografo.c,163 :: 		ANSELB = 0;                                                                //Configura PORTB como digital     *
0x0B40	0xEF2E1E  	CLR	ANSELB
;Acelerografo.c,164 :: 		TRISA2_bit = 0;                                                            //Configura el pin A2 como salida  *
0x0B42	0xA94E00  	BCLR	TRISA2_bit, BitPos(TRISA2_bit+0)
;Acelerografo.c,165 :: 		TRISA3_bit = 0;                                                            //Configura el pin A3 como salida  *
0x0B44	0xA96E00  	BCLR	TRISA3_bit, BitPos(TRISA3_bit+0)
;Acelerografo.c,166 :: 		TRISA4_bit = 0;                                                            //Configura el pin A4 como salida  *
0x0B46	0xA98E00  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
;Acelerografo.c,167 :: 		TRISB4_bit = 0;                                                            //Configura el pin B4 como salida  *
0x0B48	0xA98E10  	BCLR	TRISB4_bit, BitPos(TRISB4_bit+0)
;Acelerografo.c,168 :: 		TRISB12_bit = 0;                                                           //Configura el pin B12 como salida *
0x0B4A	0xA98E11  	BCLR	TRISB12_bit, BitPos(TRISB12_bit+0)
;Acelerografo.c,170 :: 		TRISB10_bit = 1;                                                           //Configura el pin B10 como entrada *
0x0B4C	0xA84E11  	BSET	TRISB10_bit, BitPos(TRISB10_bit+0)
;Acelerografo.c,171 :: 		TRISB11_bit = 1;                                                           //Configura el pin B11 como entrada *
0x0B4E	0xA86E11  	BSET	TRISB11_bit, BitPos(TRISB11_bit+0)
;Acelerografo.c,172 :: 		TRISB13_bit = 1;                                                           //Configura el pin B13 como entrada *
0x0B50	0xA8AE11  	BSET	TRISB13_bit, BitPos(TRISB13_bit+0)
;Acelerografo.c,173 :: 		TRISB14_bit = 1;
0x0B52	0xA8CE11  	BSET	TRISB14_bit, BitPos(TRISB14_bit+0)
;Acelerografo.c,174 :: 		TRISB15_bit = 1;                                                           //Configura el pin B15 como entrada *
0x0B54	0xA8EE11  	BSET	TRISB15_bit, BitPos(TRISB15_bit+0)
;Acelerografo.c,176 :: 		INTCON2.GIE = 1;                                                           //Habilita las interrupciones globales *
0x0B56	0xA8E8C3  	BSET	INTCON2, #15
;Acelerografo.c,179 :: 		RPINR18bits.U1RXR = 0x22;                                                  //Configura el pin RB2/RPI34 como Rx1 *
0x0B58	0xB3C220  	MOV.B	#34, W0
0x0B5A	0x784080  	MOV.B	W0, W1
0x0B5C	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x0B5E	0x68C090  	XOR.B	W1, [W0], W1
0x0B60	0xB3C7F0  	MOV.B	#127, W0
0x0B62	0x60C080  	AND.B	W1, W0, W1
0x0B64	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x0B66	0x68C090  	XOR.B	W1, [W0], W1
0x0B68	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x0B6A	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,180 :: 		RPOR0bits.RP35R = 0x01;                                                    //Configura el Tx1 en el pin RB3/RP35 *
0x0B6C	0x201000  	MOV	#256, W0
0x0B6E	0x780080  	MOV	W0, W1
0x0B70	0x206800  	MOV	#lo_addr(RPOR0bits), W0
0x0B72	0x688090  	XOR	W1, [W0], W1
0x0B74	0x23F000  	MOV	#16128, W0
0x0B76	0x608080  	AND	W1, W0, W1
0x0B78	0x206800  	MOV	#lo_addr(RPOR0bits), W0
0x0B7A	0x688090  	XOR	W1, [W0], W1
0x0B7C	0x883401  	MOV	W1, RPOR0bits
;Acelerografo.c,181 :: 		U1RXIE_bit = 0;                                                            //Habilita la interrupcion por UART1 RX *
0x0B7E	0xA96821  	BCLR	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Acelerografo.c,182 :: 		U1RXIF_bit = 0;                                                            //Limpia la bandera de interrupcion por UART1 RX *
0x0B80	0xA96801  	BCLR	U1RXIF_bit, BitPos(U1RXIF_bit+0)
;Acelerografo.c,183 :: 		IPC2bits.U1RXIP = 0x04;                                                    //Prioridad de la interrupcion UART1 RX
0x0B82	0x240000  	MOV	#16384, W0
0x0B84	0x780080  	MOV	W0, W1
0x0B86	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0B88	0x688090  	XOR	W1, [W0], W1
0x0B8A	0x270000  	MOV	#28672, W0
0x0B8C	0x608080  	AND	W1, W0, W1
0x0B8E	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0B90	0x688090  	XOR	W1, [W0], W1
0x0B92	0x884221  	MOV	W1, IPC2bits
;Acelerografo.c,184 :: 		U1STAbits.URXISEL = 0x00;
0x0B94	0x202220  	MOV	#lo_addr(U1STAbits), W0
0x0B96	0x784090  	MOV.B	[W0], W1
0x0B98	0xB3C3F0  	MOV.B	#63, W0
0x0B9A	0x60C080  	AND.B	W1, W0, W1
0x0B9C	0x202220  	MOV	#lo_addr(U1STAbits), W0
0x0B9E	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,185 :: 		UART1_Init(115200);                                                        //Inicializa el UART1 con una velocidad de 115200 baudios
0x0BA0	0x2C200A  	MOV	#49664, W10
0x0BA2	0x20001B  	MOV	#1, W11
0x0BA4	0x07FC08  	RCALL	_UART1_Init
;Acelerografo.c,188 :: 		SPI1STAT.SPIEN = 1;                                                        //Habilita el SPI1 *
0x0BA6	0xA8E241  	BSET	SPI1STAT, #15
;Acelerografo.c,189 :: 		SPI1_Init_Advanced(_SPI_SLAVE, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_1, _SPI_SS_ENABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_HIGH, _SPI_ACTIVE_2_IDLE);        //*
0x0BA8	0x20003D  	MOV	#3, W13
0x0BAA	0x2001CC  	MOV	#28, W12
0x0BAC	0xEF2016  	CLR	W11
0x0BAE	0xEF2014  	CLR	W10
0x0BB0	0xEF2000  	CLR	W0
0x0BB2	0x781F80  	PUSH	W0
0x0BB4	0x200400  	MOV	#64, W0
0x0BB6	0x781F80  	PUSH	W0
0x0BB8	0x202000  	MOV	#512, W0
0x0BBA	0x781F80  	PUSH	W0
0x0BBC	0x200800  	MOV	#128, W0
0x0BBE	0x781F80  	PUSH	W0
0x0BC0	0x07FCA4  	RCALL	_SPI1_Init_Advanced
0x0BC2	0xB1008F  	SUB	#8, W15
;Acelerografo.c,190 :: 		SPI1IE_bit = 1;                                                            //Habilita la interrupcion por SPI1  *
0x0BC4	0xA84821  	BSET	SPI1IE_bit, BitPos(SPI1IE_bit+0)
;Acelerografo.c,191 :: 		SPI1IF_bit = 0;                                                            //Limpia la bandera de interrupcion por SPI *
0x0BC6	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Acelerografo.c,192 :: 		IPC2bits.SPI1IP = 0x03;                                                    //Prioridad de la interrupcion SPI1
0x0BC8	0x203000  	MOV	#768, W0
0x0BCA	0x780080  	MOV	W0, W1
0x0BCC	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0BCE	0x688090  	XOR	W1, [W0], W1
0x0BD0	0x207000  	MOV	#1792, W0
0x0BD2	0x608080  	AND	W1, W0, W1
0x0BD4	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0BD6	0x688090  	XOR	W1, [W0], W1
0x0BD8	0x884221  	MOV	W1, IPC2bits
;Acelerografo.c,195 :: 		RPINR22bits.SDI2R = 0x21;                                                  //Configura el pin RB1/RPI33 como SDI2 *
0x0BDA	0xB3C210  	MOV.B	#33, W0
0x0BDC	0x784080  	MOV.B	W0, W1
0x0BDE	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0BE0	0x68C090  	XOR.B	W1, [W0], W1
0x0BE2	0xB3C7F0  	MOV.B	#127, W0
0x0BE4	0x60C080  	AND.B	W1, W0, W1
0x0BE6	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0BE8	0x68C090  	XOR.B	W1, [W0], W1
0x0BEA	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0BEC	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,196 :: 		RPOR2bits.RP38R = 0x08;                                                    //Configura el SDO2 en el pin RB6/RP38 *
0x0BEE	0xB3C080  	MOV.B	#8, W0
0x0BF0	0x784080  	MOV.B	W0, W1
0x0BF2	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x0BF4	0x68C090  	XOR.B	W1, [W0], W1
0x0BF6	0xB3C3F0  	MOV.B	#63, W0
0x0BF8	0x60C080  	AND.B	W1, W0, W1
0x0BFA	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x0BFC	0x68C090  	XOR.B	W1, [W0], W1
0x0BFE	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x0C00	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,197 :: 		RPOR1bits.RP37R = 0x09;                                                    //Configura el SCK2 en el pin RB5/RP37 *
0x0C02	0x209000  	MOV	#2304, W0
0x0C04	0x780080  	MOV	W0, W1
0x0C06	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x0C08	0x688090  	XOR	W1, [W0], W1
0x0C0A	0x23F000  	MOV	#16128, W0
0x0C0C	0x608080  	AND	W1, W0, W1
0x0C0E	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x0C10	0x688090  	XOR	W1, [W0], W1
0x0C12	0x883411  	MOV	W1, RPOR1bits
;Acelerografo.c,198 :: 		SPI2STAT.SPIEN = 1;                                                        //Habilita el SPI2 *
0x0C14	0xA8E261  	BSET	SPI2STAT, #15
;Acelerografo.c,199 :: 		SPI2_Init();                                                               //Inicializa el modulo SPI2
0x0C16	0x07FC90  	RCALL	_SPI2_Init
;Acelerografo.c,200 :: 		CS_DS3234 = 1;                                                             //Pone en alto el CS del RTC
0x0C18	0xA84E04  	BSET	LATA2_bit, BitPos(LATA2_bit+0)
;Acelerografo.c,201 :: 		CS_ADXL355 = 1;                                                            //Pone en alto el CS del acelerometro
0x0C1A	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;Acelerografo.c,204 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF|STANDBY);                           //Coloco el ADXL en modo STANDBY para pausar las conversiones y limpiar el FIFO
0x0C1C	0xB3C05B  	MOV.B	#5, W11
0x0C1E	0xB3C2DA  	MOV.B	#45, W10
0x0C20	0x070029  	RCALL	_ADXL355_write_byte
;Acelerografo.c,208 :: 		RPINR0 = 0x2F00;                                                           //Asigna INT1 al RB15/RPI47 (SQW)
0x0C22	0x22F000  	MOV	#12032, W0
0x0C24	0xB7A6A0  	MOV	WREG, RPINR0
;Acelerografo.c,209 :: 		INT1IE_bit = 0;                                                            //Habilita la interrupcion externa INT1
0x0C26	0xA98822  	BCLR	INT1IE_bit, BitPos(INT1IE_bit+0)
;Acelerografo.c,210 :: 		INT1IF_bit = 0;                                                            //Limpia la bandera de interrupcion externa INT1
0x0C28	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Acelerografo.c,211 :: 		IPC5bits.INT1IP = 0x01;                                                    //Prioridad en la interrupocion externa 1
0x0C2A	0xB3C010  	MOV.B	#1, W0
0x0C2C	0x784080  	MOV.B	W0, W1
0x0C2E	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x0C30	0x68C090  	XOR.B	W1, [W0], W1
0x0C32	0x60C0E7  	AND.B	W1, #7, W1
0x0C34	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x0C36	0x68C090  	XOR.B	W1, [W0], W1
0x0C38	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x0C3A	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,214 :: 		T1CON = 0x0020;
0x0C3C	0x200200  	MOV	#32, W0
0x0C3E	0xB7A104  	MOV	WREG, T1CON
;Acelerografo.c,215 :: 		T1CON.TON = 0;                                                             //Apaga el Timer1
0x0C40	0xA9E105  	BCLR	T1CON, #15
;Acelerografo.c,216 :: 		T1IE_bit = 1;                                                              //Habilita la interrupci�n de desbordamiento TMR1
0x0C42	0xA86820  	BSET	T1IE_bit, BitPos(T1IE_bit+0)
;Acelerografo.c,217 :: 		T1IF_bit = 0;                                                              //Limpia la bandera de interrupcion del TMR1
0x0C44	0xA96800  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;Acelerografo.c,218 :: 		PR1 = 62500;                                                               //Car ga el preload para un tiempo de 100ms
0x0C46	0x2F4240  	MOV	#62500, W0
0x0C48	0xB7A102  	MOV	WREG, PR1
;Acelerografo.c,219 :: 		IPC0bits.T1IP = 0x02;                                                      //Prioridad de la interrupcion por desbordamiento del TMR1
0x0C4A	0x220000  	MOV	#8192, W0
0x0C4C	0x780080  	MOV	W0, W1
0x0C4E	0x208400  	MOV	#lo_addr(IPC0bits), W0
0x0C50	0x688090  	XOR	W1, [W0], W1
0x0C52	0x270000  	MOV	#28672, W0
0x0C54	0x608080  	AND	W1, W0, W1
0x0C56	0x208400  	MOV	#lo_addr(IPC0bits), W0
0x0C58	0x688090  	XOR	W1, [W0], W1
0x0C5A	0x884201  	MOV	W1, IPC0bits
;Acelerografo.c,221 :: 		Delay_ms(200);                                                             //Espera hasta que se estabilicen los cambios
0x0C5C	0x200198  	MOV	#25, W8
0x0C5E	0x26A0E7  	MOV	#27150, W7
L_ConfiguracionPrincipal51:
0x0C60	0xED200E  	DEC	W7
0x0C62	0x3AFFFE  	BRA NZ	L_ConfiguracionPrincipal51
0x0C64	0xED2010  	DEC	W8
0x0C66	0x3AFFFC  	BRA NZ	L_ConfiguracionPrincipal51
0x0C68	0x000000  	NOP
;Acelerografo.c,223 :: 		}
L_end_ConfiguracionPrincipal:
0x0C6A	0x7806CF  	POP	W13
0x0C6C	0x78064F  	POP	W12
0x0C6E	0x7805CF  	POP	W11
0x0C70	0x78054F  	POP	W10
0x0C72	0x060000  	RETURN
; end of _ConfiguracionPrincipal
_UART1_Init:
0x03B6	0xFA0008  	LNK	#8
;__Lib_UART_12_p24_p33.c,145 :: 		
;__Lib_UART_12_p24_p33.c,148 :: 		
0x03B8	0x2FFFF0  	MOV	#lo_addr(_UART1_Write), W0
0x03BA	0x88D980  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p24_p33.c,149 :: 		
0x03BC	0x2FFFF0  	MOV	#lo_addr(_UART1_Read), W0
0x03BE	0x88D950  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p24_p33.c,150 :: 		
0x03C0	0x2FFFF0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x03C2	0x88D960  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p24_p33.c,151 :: 		
0x03C4	0x2FFFF0  	MOV	#lo_addr(_UART1_Tx_Idle), W0
0x03C6	0x88D970  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p24_p33.c,156 :: 		
0x03C8	0xEF2220  	CLR	U1MODE
;__Lib_UART_12_p24_p33.c,157 :: 		
0x03CA	0x280000  	MOV	#32768, W0
0x03CC	0xB7A222  	MOV	WREG, U1STA
;__Lib_UART_12_p24_p33.c,161 :: 		
0x03CE	0xA96220  	BCLR	U1MODE, #3
;__Lib_UART_12_p24_p33.c,162 :: 		
0x03D0	0x07FF39  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x03D2	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,164 :: 		
0x03D4	0x203E80  	MOV	#1000, W0
0x03D6	0x200001  	MOV	#0, W1
0x03D8	0x07FFE5  	RCALL	__Multiply_32x32
0x03DA	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,166 :: 		
0x03DC	0x07FF18  	RCALL	_Get_Fosc_Per_Cyc
0x03DE	0xDE0041  	LSR	W0, #1, W0
0x03E0	0x400064  	ADD	W0, #4, W0
0x03E2	0x780080  	MOV	W0, W1
0x03E4	0x470060  	ADD	W14, #0, W0
0x03E6	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init83:
0x03E8	0xE90081  	DEC	W1, W1
0x03EA	0x350003  	BRA LT	L__UART1_Init84
0x03EC	0xD01810  	SL	[W0], [W0++]
0x03EE	0xD29010  	RLC	[W0], [W0--]
0x03F0	0x37FFFB  	BRA	L__UART1_Init83
L__UART1_Init84:
;__Lib_UART_12_p24_p33.c,168 :: 		
0x03F2	0xBE9F82  	PUSH.D	W2
0x03F4	0xBE9F8A  	PUSH.D	W10
0x03F6	0xBE0002  	MOV.D	W2, W0
0x03F8	0x90010E  	MOV	[W14+0], W2
0x03FA	0x90019E  	MOV	[W14+2], W3
0x03FC	0xEB0200  	CLR	W4
0x03FE	0x07FFA6  	RCALL	__Modulus_32x32
0x0400	0xBE054F  	POP.D	W10
0x0402	0xBE014F  	POP.D	W2
0x0404	0x980720  	MOV	W0, [W14+4]
0x0406	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,169 :: 		
0x0408	0xBE9F8A  	PUSH.D	W10
; tmp end address is: 4 (W2)
0x040A	0xBE0002  	MOV.D	W2, W0
0x040C	0x90010E  	MOV	[W14+0], W2
0x040E	0x90019E  	MOV	[W14+2], W3
0x0410	0xEB0200  	CLR	W4
0x0412	0x070052  	RCALL	__Divide_32x32
0x0414	0xBE054F  	POP.D	W10
; tmp start address is: 6 (W3)
0x0416	0x780180  	MOV	W0, W3
0x0418	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,171 :: 		
0x041A	0x470060  	ADD	W14, #0, W0
0x041C	0xD10150  	LSR	[++W0], W2
0x041E	0xD380C0  	RRC	[--W0], W1
0x0420	0x470064  	ADD	W14, #4, W0
0x0422	0xE10830  	CP	W1, [W0++]
0x0424	0xE19020  	CPB	W2, [W0--]
0x0426	0x310007  	BRA GEU	L__UART1_Init62
L__UART1_Init85:
;__Lib_UART_12_p24_p33.c,172 :: 		
0x0428	0x418061  	ADD	W3, #1, W0
0x042A	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x042C	0x780280  	MOV	W0, W5
0x042E	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x0430	0x780105  	MOV	W5, W2
0x0432	0x780186  	MOV	W6, W3
0x0434	0x370002  	BRA	L_UART1_Init13
L__UART1_Init62:
;__Lib_UART_12_p24_p33.c,171 :: 		
0x0436	0x780103  	MOV	W3, W2
0x0438	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,172 :: 		
L_UART1_Init13:
;__Lib_UART_12_p24_p33.c,175 :: 		
; tmp start address is: 4 (W2)
0x043A	0x718002  	IOR	W3, W2, W0
0x043C	0x3A0033  	BRA NZ	L__UART1_Init64
L__UART1_Init86:
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,177 :: 		
0x043E	0x07FF02  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x0440	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,179 :: 		
0x0442	0x203E80  	MOV	#1000, W0
0x0444	0x200001  	MOV	#0, W1
0x0446	0x07FFAE  	RCALL	__Multiply_32x32
0x0448	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,181 :: 		
0x044A	0x07FEE1  	RCALL	_Get_Fosc_Per_Cyc
0x044C	0xDE0041  	LSR	W0, #1, W0
0x044E	0xECA000  	INC2	W0
0x0450	0x780080  	MOV	W0, W1
0x0452	0x470060  	ADD	W14, #0, W0
0x0454	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init87:
0x0456	0xE90081  	DEC	W1, W1
0x0458	0x350003  	BRA LT	L__UART1_Init88
0x045A	0xD01810  	SL	[W0], [W0++]
0x045C	0xD29010  	RLC	[W0], [W0--]
0x045E	0x37FFFB  	BRA	L__UART1_Init87
L__UART1_Init88:
;__Lib_UART_12_p24_p33.c,183 :: 		
0x0460	0xBE9F82  	PUSH.D	W2
0x0462	0xBE0002  	MOV.D	W2, W0
0x0464	0x90010E  	MOV	[W14+0], W2
0x0466	0x90019E  	MOV	[W14+2], W3
0x0468	0xEB0200  	CLR	W4
0x046A	0x07FF70  	RCALL	__Modulus_32x32
0x046C	0xBE014F  	POP.D	W2
0x046E	0x980720  	MOV	W0, [W14+4]
0x0470	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,184 :: 		
0x0472	0xBE0002  	MOV.D	W2, W0
0x0474	0x90010E  	MOV	[W14+0], W2
0x0476	0x90019E  	MOV	[W14+2], W3
0x0478	0xEB0200  	CLR	W4
0x047A	0x07001E  	RCALL	__Divide_32x32
; tmp end address is: 4 (W2)
; tmp start address is: 6 (W3)
0x047C	0x780180  	MOV	W0, W3
0x047E	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,186 :: 		
0x0480	0x470060  	ADD	W14, #0, W0
0x0482	0xD10150  	LSR	[++W0], W2
0x0484	0xD380C0  	RRC	[--W0], W1
0x0486	0x470064  	ADD	W14, #4, W0
0x0488	0xE10830  	CP	W1, [W0++]
0x048A	0xE19020  	CPB	W2, [W0--]
0x048C	0x310007  	BRA GEU	L__UART1_Init63
L__UART1_Init89:
;__Lib_UART_12_p24_p33.c,187 :: 		
0x048E	0x418061  	ADD	W3, #1, W0
0x0490	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x0492	0x780280  	MOV	W0, W5
0x0494	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x0496	0x780105  	MOV	W5, W2
0x0498	0x780186  	MOV	W6, W3
0x049A	0x370002  	BRA	L_UART1_Init15
L__UART1_Init63:
;__Lib_UART_12_p24_p33.c,186 :: 		
0x049C	0x780103  	MOV	W3, W2
0x049E	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,187 :: 		
L_UART1_Init15:
;__Lib_UART_12_p24_p33.c,189 :: 		
; tmp start address is: 4 (W2)
0x04A0	0xA86220  	BSET	U1MODE, #3
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,190 :: 		
0x04A2	0x370000  	BRA	L_UART1_Init14
L__UART1_Init64:
;__Lib_UART_12_p24_p33.c,175 :: 		
;__Lib_UART_12_p24_p33.c,190 :: 		
L_UART1_Init14:
;__Lib_UART_12_p24_p33.c,192 :: 		
; tmp start address is: 4 (W2)
0x04A4	0x510061  	SUB	W2, #1, W0
0x04A6	0x5980E0  	SUBB	W3, #0, W1
; tmp end address is: 4 (W2)
; tmp start address is: 0 (W0)
0x04A8	0x881140  	MOV	W0, U1BRG
; tmp end address is: 0 (W0)
;__Lib_UART_12_p24_p33.c,195 :: 		
0x04AA	0xA92222  	BCLR	U1STA, #1
;__Lib_UART_12_p24_p33.c,197 :: 		
0x04AC	0xA8E221  	BSET	U1MODE, #15
;__Lib_UART_12_p24_p33.c,198 :: 		
0x04AE	0xA84223  	BSET	U1STA, #10
;__Lib_UART_12_p24_p33.c,200 :: 		
0x04B0	0x07FEA7  	RCALL	_Delay_100ms
0x04B2	0x07FEA6  	RCALL	_Delay_100ms
;__Lib_UART_12_p24_p33.c,202 :: 		
L_end_UART1_Init:
0x04B4	0xFA8000  	ULNK
0x04B6	0x060000  	RETURN
; end of _UART1_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x0244	0x238800  	MOV	#14464, W0
0x0246	0x200011  	MOV	#1, W1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x0248	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x020E	0x200020  	MOV	#2, W0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x0210	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x0200	0x2000D8  	MOV	#13, W8
0x0202	0x235077  	MOV	#13575, W7
L_Delay_100ms33:
0x0204	0xED200E  	DEC	W7
0x0206	0x3AFFFE  	BRA NZ	L_Delay_100ms33
0x0208	0xED2010  	DEC	W8
0x020A	0x3AFFFC  	BRA NZ	L_Delay_100ms33
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x020C	0x060000  	RETURN
; end of _Delay_100ms
__Multiply_32x32:
0x03A4	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x03A6	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x03A8	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x03AA	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x03AC	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x03AE	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x03B0	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x03B2	0xFA8000  	ULNK
0x03B4	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x034C	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x034E	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x0350	0x0000000403A0  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x0354	0xE20008  	CP0	W4
;__Lib_Math.c,173 :: 		
0x0356	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x0358	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x035A	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x035C	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.c,180 :: 		
0x035E	0xE20002  	CP0	W1
;__Lib_Math.c,181 :: 		
0x0360	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x0362	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,183 :: 		
0x0364	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x0366	0xE20006  	CP0	W3
;__Lib_Math.c,186 :: 		
0x0368	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x036A	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,188 :: 		
0x036C	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x036E	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x0370	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,192 :: 		
0x0372	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x0374	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,194 :: 		
0x0376	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x0378	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x037A	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x037C	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.c,200 :: 		
0x037E	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x0380	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,203 :: 		
0x0382	0x200206  	MOV	#32, W6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x0384	0xD00000  	SL	W0, W0
;__Lib_Math.c,206 :: 		
0x0386	0xD28081  	RLC	W1, W1
;__Lib_Math.c,207 :: 		
0x0388	0xD28204  	RLC	W4, W4
;__Lib_Math.c,208 :: 		
0x038A	0xD28285  	RLC	W5, W5
;__Lib_Math.c,209 :: 		
0x038C	0xA80000  	BSET	W0, #0
;__Lib_Math.c,210 :: 		
0x038E	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,211 :: 		
0x0390	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,212 :: 		
0x0392	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x0394	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,214 :: 		
0x0396	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,215 :: 		
0x0398	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x039A	0xE90306  	DEC	W6, W6
;__Lib_Math.c,218 :: 		
0x039C	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x039E	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x03A0	0xFA8000  	ULNK
0x03A2	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x04B8	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x04BA	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x04BC	0x000000040506  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x04C0	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x04C2	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x04C4	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x04C6	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x04C8	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x04CA	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x04CC	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x04CE	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x04D0	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x04D2	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x04D4	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x04D6	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x04D8	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x04DA	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x04DC	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x04DE	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x04E0	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x04E2	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x04E4	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x04E6	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x04E8	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x04EA	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x04EC	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x04EE	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x04F0	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x04F2	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x04F4	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x04F6	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x04F8	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x04FA	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x04FC	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x04FE	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x0500	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x0502	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x0504	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x0506	0xFA8000  	ULNK
0x0508	0x060000  	RETURN
; end of __Divide_32x32
_SPI1_Init_Advanced:
0x050A	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,123 :: 		
; slave_select start address is: 2 (W1)
0x050C	0x97B8CE  	MOV	[W14-8], W1
; data_sample start address is: 8 (W4)
0x050E	0x97BA3E  	MOV	[W14-10], W4
; clock_idle start address is: 4 (W2)
0x0510	0x97B92E  	MOV	[W14-12], W2
; edge start address is: 6 (W3)
0x0512	0x97B99E  	MOV	[W14-14], W3
;__Lib_SPI_12.c,126 :: 		
0x0514	0xEF2240  	CLR	SPI1STAT
;__Lib_SPI_12.c,127 :: 		
0x0516	0xEF2242  	CLR	SPI1CON
;__Lib_SPI_12.c,129 :: 		
0x0518	0x2FFFF0  	MOV	#lo_addr(_SPI1_Read), W0
0x051A	0x88D930  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,130 :: 		
0x051C	0x2FFFF0  	MOV	#lo_addr(_SPI1_Write), W0
0x051E	0x88D940  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,132 :: 		
0x0520	0x75000B  	IOR	W10, W11, W0
0x0522	0x70000C  	IOR	W0, W12, W0
0x0524	0x70000D  	IOR	W0, W13, W0
0x0526	0x700001  	IOR	W0, W1, W0
; slave_select end address is: 2 (W1)
0x0528	0x700004  	IOR	W0, W4, W0
; data_sample end address is: 8 (W4)
;__Lib_SPI_12.c,133 :: 		
0x052A	0x700082  	IOR	W0, W2, W1
; clock_idle end address is: 4 (W2)
0x052C	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x052E	0x708803  	IOR	W1, W3, [W0]
; edge end address is: 6 (W3)
;__Lib_SPI_12.c,135 :: 		
0x0530	0xA9C240  	BCLR	SPI1STAT, #6
;__Lib_SPI_12.c,136 :: 		
0x0532	0xA8E241  	BSET	SPI1STAT, #15
;__Lib_SPI_12.c,138 :: 		
L_end_SPI1_Init_Advanced:
0x0534	0xFA8000  	ULNK
0x0536	0x060000  	RETURN
; end of _SPI1_Init_Advanced
_SPI2_Init:
0x0538	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,205 :: 		
;__Lib_SPI_12.c,207 :: 		
0x053A	0x202120  	MOV	#lo_addr(_SPI2_Read), W0
0x053C	0x88D930  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,208 :: 		
0x053E	0x2028A0  	MOV	#lo_addr(_SPI2_Write), W0
0x0540	0x88D940  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,210 :: 		
0x0542	0xEF2260  	CLR	SPI2STAT
;__Lib_SPI_12.c,211 :: 		
0x0544	0xEF2262  	CLR	SPI2CON
;__Lib_SPI_12.c,213 :: 		
0x0546	0xA8A262  	BSET	SPI2CON, #5
;__Lib_SPI_12.c,214 :: 		
0x0548	0xA9C262  	BCLR	SPI2CON, #6
;__Lib_SPI_12.c,216 :: 		
0x054A	0x2001C1  	MOV	#28, W1
0x054C	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x054E	0x708810  	IOR	W1, [W0], [W0]
;__Lib_SPI_12.c,218 :: 		
0x0550	0x2FFFC1  	MOV	#65532, W1
0x0552	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x0554	0x608810  	AND	W1, [W0], [W0]
;__Lib_SPI_12.c,219 :: 		
0x0556	0xA80263  	BSET	SPI2CON, #8
;__Lib_SPI_12.c,221 :: 		
0x0558	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,222 :: 		
0x055A	0xA8E261  	BSET	SPI2STAT, #15
;__Lib_SPI_12.c,224 :: 		
L_end_SPI2_Init:
0x055C	0xFA8000  	ULNK
0x055E	0x060000  	RETURN
; end of _SPI2_Init
_ADXL355_write_byte:
;adxl355_spi.c,128 :: 		void ADXL355_write_byte(unsigned char address, unsigned char value){
;adxl355_spi.c,129 :: 		address = (address<<1)&0xFE;
0x0C74	0x781F8A  	PUSH	W10
0x0C76	0xFB800A  	ZE	W10, W0
0x0C78	0xDD00C1  	SL	W0, #1, W1
0x0C7A	0x200FE0  	MOV	#254, W0
0x0C7C	0x608000  	AND	W1, W0, W0
0x0C7E	0x784500  	MOV.B	W0, W10
;adxl355_spi.c,130 :: 		CS_ADXL355=0;
0x0C80	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,131 :: 		SPI2_Write(address);
0x0C82	0xFB8500  	ZE	W0, W10
0x0C84	0x07FB02  	RCALL	_SPI2_Write
;adxl355_spi.c,132 :: 		SPI2_Write(value);
0x0C86	0xFB850B  	ZE	W11, W10
0x0C88	0x07FB00  	RCALL	_SPI2_Write
;adxl355_spi.c,133 :: 		CS_ADXL355=1;
0x0C8A	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,134 :: 		}
L_end_ADXL355_write_byte:
0x0C8C	0x78054F  	POP	W10
0x0C8E	0x060000  	RETURN
; end of _ADXL355_write_byte
_SPI2_Write:
0x028A	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,175 :: 		
;__Lib_SPI_12.c,176 :: 		
0x028C	0x07FFC2  	RCALL	_SPI2_Read
;__Lib_SPI_12.c,183 :: 		
L_end_SPI2_Write:
0x028E	0xFA8000  	ULNK
0x0290	0x060000  	RETURN
; end of _SPI2_Write
_SPI2_Read:
0x0212	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,163 :: 		
;__Lib_SPI_12.c,165 :: 		
0x0214	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,167 :: 		
L_SPI2_Read4:
0x0216	0xAE2260  	BTSS	SPI2STAT, #1
0x0218	0x370001  	BRA	L_SPI2_Read5
0x021A	0x37FFFD  	BRA	L_SPI2_Read4
L_SPI2_Read5:
;__Lib_SPI_12.c,168 :: 		
0x021C	0x88134A  	MOV	W10, SPI2BUF
;__Lib_SPI_12.c,169 :: 		
L_SPI2_Read6:
0x021E	0xAF0260  	BTSC	SPI2STAT, #0
0x0220	0x370001  	BRA	L_SPI2_Read7
0x0222	0x37FFFD  	BRA	L_SPI2_Read6
L_SPI2_Read7:
;__Lib_SPI_12.c,171 :: 		
0x0224	0xBF8268  	MOV	SPI2BUF, WREG
;__Lib_SPI_12.c,173 :: 		
L_end_SPI2_Read:
0x0226	0xFA8000  	ULNK
0x0228	0x060000  	RETURN
; end of _SPI2_Read
_DS3234_init:
;tiempo_rtc.c,55 :: 		void DS3234_init(){
;tiempo_rtc.c,57 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x0AC2	0x781F8A  	PUSH	W10
0x0AC4	0x781F8B  	PUSH	W11
0x0AC6	0x781F8C  	PUSH	W12
0x0AC8	0x781F8D  	PUSH	W13
0x0ACA	0xEF201A  	CLR	W13
0x0ACC	0x2001CC  	MOV	#28, W12
0x0ACE	0xEF2016  	CLR	W11
0x0AD0	0x20020A  	MOV	#32, W10
0x0AD2	0xEF2000  	CLR	W0
0x0AD4	0x781F80  	PUSH	W0
0x0AD6	0xEF2000  	CLR	W0
0x0AD8	0x781F80  	PUSH	W0
0x0ADA	0xEF2000  	CLR	W0
0x0ADC	0x781F80  	PUSH	W0
0x0ADE	0xEF2000  	CLR	W0
0x0AE0	0x781F80  	PUSH	W0
0x0AE2	0x07FBB3  	RCALL	_SPI2_Init_Advanced
0x0AE4	0xB1008F  	SUB	#8, W15
;tiempo_rtc.c,58 :: 		DS3234_write_byte(Control,0x20);
0x0AE6	0xB3C20B  	MOV.B	#32, W11
0x0AE8	0xB3C8EA  	MOV.B	#142, W10
0x0AEA	0x07FC12  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,59 :: 		DS3234_write_byte(ControlStatus,0x08);
0x0AEC	0xB3C08B  	MOV.B	#8, W11
0x0AEE	0xB3C8FA  	MOV.B	#143, W10
0x0AF0	0x07FC0F  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,60 :: 		SPI2_Init();
0x0AF2	0x07FD22  	RCALL	_SPI2_Init
;tiempo_rtc.c,62 :: 		}
L_end_DS3234_init:
0x0AF4	0x7806CF  	POP	W13
0x0AF6	0x78064F  	POP	W12
0x0AF8	0x7805CF  	POP	W11
0x0AFA	0x78054F  	POP	W10
0x0AFC	0x060000  	RETURN
; end of _DS3234_init
_SPI2_Init_Advanced:
0x024A	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,187 :: 		
; slave_select start address is: 2 (W1)
0x024C	0x97B8CE  	MOV	[W14-8], W1
; data_sample start address is: 8 (W4)
0x024E	0x97BA3E  	MOV	[W14-10], W4
; clock_idle start address is: 4 (W2)
0x0250	0x97B92E  	MOV	[W14-12], W2
; edge start address is: 6 (W3)
0x0252	0x97B99E  	MOV	[W14-14], W3
;__Lib_SPI_12.c,190 :: 		
0x0254	0xEF2260  	CLR	SPI2STAT
;__Lib_SPI_12.c,191 :: 		
0x0256	0xEF2262  	CLR	SPI2CON
;__Lib_SPI_12.c,193 :: 		
0x0258	0x202120  	MOV	#lo_addr(_SPI2_Read), W0
0x025A	0x88D930  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,194 :: 		
0x025C	0x2028A0  	MOV	#lo_addr(_SPI2_Write), W0
0x025E	0x88D940  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,196 :: 		
0x0260	0x75000B  	IOR	W10, W11, W0
0x0262	0x70000C  	IOR	W0, W12, W0
0x0264	0x70000D  	IOR	W0, W13, W0
0x0266	0x700001  	IOR	W0, W1, W0
; slave_select end address is: 2 (W1)
0x0268	0x700004  	IOR	W0, W4, W0
; data_sample end address is: 8 (W4)
;__Lib_SPI_12.c,197 :: 		
0x026A	0x700082  	IOR	W0, W2, W1
; clock_idle end address is: 4 (W2)
0x026C	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x026E	0x708803  	IOR	W1, W3, [W0]
; edge end address is: 6 (W3)
;__Lib_SPI_12.c,199 :: 		
0x0270	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,200 :: 		
0x0272	0xA8E261  	BSET	SPI2STAT, #15
;__Lib_SPI_12.c,202 :: 		
L_end_SPI2_Init_Advanced:
0x0274	0xFA8000  	ULNK
0x0276	0x060000  	RETURN
; end of _SPI2_Init_Advanced
_DS3234_write_byte:
;tiempo_rtc.c,65 :: 		void DS3234_write_byte(unsigned char address, unsigned char value){
;tiempo_rtc.c,67 :: 		CS_DS3234 = 0;
0x0310	0x781F8A  	PUSH	W10
0x0312	0xA94E04  	BCLR	LATA2_bit, BitPos(LATA2_bit+0)
;tiempo_rtc.c,68 :: 		SPI2_Write(address);
0x0314	0xFB850A  	ZE	W10, W10
0x0316	0x07FFB9  	RCALL	_SPI2_Write
;tiempo_rtc.c,69 :: 		SPI2_Write(value);
0x0318	0xFB850B  	ZE	W11, W10
0x031A	0x07FFB7  	RCALL	_SPI2_Write
;tiempo_rtc.c,70 :: 		CS_DS3234 = 1;
0x031C	0xA84E04  	BSET	LATA2_bit, BitPos(LATA2_bit+0)
;tiempo_rtc.c,72 :: 		}
L_end_DS3234_write_byte:
0x031E	0x78054F  	POP	W10
0x0320	0x060000  	RETURN
; end of _DS3234_write_byte
_ADXL355_init:
;adxl355_spi.c,106 :: 		void ADXL355_init(short tMuestreo){
;adxl355_spi.c,107 :: 		ADXL355_write_byte(Reset,0x52);                                             //Resetea el dispositivo
0x0900	0x781F8A  	PUSH	W10
0x0902	0x781F8B  	PUSH	W11
0x0904	0x781F8A  	PUSH	W10
0x0906	0xB3C52B  	MOV.B	#82, W11
0x0908	0xB3C2FA  	MOV.B	#47, W10
0x090A	0x0701B4  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,108 :: 		Delay_ms(10);
0x090C	0x200028  	MOV	#2, W8
0x090E	0x238807  	MOV	#14464, W7
L_ADXL355_init0:
0x0910	0xED200E  	DEC	W7
0x0912	0x3AFFFE  	BRA NZ	L_ADXL355_init0
0x0914	0xED2010  	DEC	W8
0x0916	0x3AFFFC  	BRA NZ	L_ADXL355_init0
0x0918	0x000000  	NOP
0x091A	0x000000  	NOP
;adxl355_spi.c,109 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF|STANDBY);
0x091C	0xB3C05B  	MOV.B	#5, W11
0x091E	0xB3C2DA  	MOV.B	#45, W10
0x0920	0x0701A9  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,110 :: 		ADXL355_write_byte(Range, _2G);
0x0922	0xB3C01B  	MOV.B	#1, W11
0x0924	0xB3C2CA  	MOV.B	#44, W10
0x0926	0x0701A6  	RCALL	_ADXL355_write_byte
0x0928	0x78054F  	POP	W10
;adxl355_spi.c,111 :: 		switch (tMuestreo){
0x092A	0x370010  	BRA	L_ADXL355_init2
;adxl355_spi.c,112 :: 		case 1:
L_ADXL355_init4:
;adxl355_spi.c,113 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_62_5_Hz);       //ODR=250Hz 1
0x092C	0xB3C04B  	MOV.B	#4, W11
0x092E	0xB3C28A  	MOV.B	#40, W10
0x0930	0x0701A1  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,114 :: 		break;
0x0932	0x370014  	BRA	L_ADXL355_init3
;adxl355_spi.c,115 :: 		case 2:
L_ADXL355_init5:
;adxl355_spi.c,116 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_31_25_Hz);      //ODR=125Hz 2
0x0934	0xB3C05B  	MOV.B	#5, W11
0x0936	0xB3C28A  	MOV.B	#40, W10
0x0938	0x07019D  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,117 :: 		break;
0x093A	0x370010  	BRA	L_ADXL355_init3
;adxl355_spi.c,118 :: 		case 4:
L_ADXL355_init6:
;adxl355_spi.c,119 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_15_625_Hz);     //ODR=62.5Hz 4
0x093C	0xB3C06B  	MOV.B	#6, W11
0x093E	0xB3C28A  	MOV.B	#40, W10
0x0940	0x070199  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,120 :: 		break;
0x0942	0x37000C  	BRA	L_ADXL355_init3
;adxl355_spi.c,121 :: 		case 8:
L_ADXL355_init7:
;adxl355_spi.c,122 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_7_813_Hz );     //ODR=31.25Hz 8
0x0944	0xB3C07B  	MOV.B	#7, W11
0x0946	0xB3C28A  	MOV.B	#40, W10
0x0948	0x070195  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,123 :: 		break;
0x094A	0x370008  	BRA	L_ADXL355_init3
;adxl355_spi.c,124 :: 		}
L_ADXL355_init2:
0x094C	0xE15461  	CP.B	W10, #1
0x094E	0x32FFEE  	BRA Z	L_ADXL355_init4
L__ADXL355_init240:
0x0950	0xE15462  	CP.B	W10, #2
0x0952	0x32FFF0  	BRA Z	L_ADXL355_init5
L__ADXL355_init241:
0x0954	0xE15464  	CP.B	W10, #4
0x0956	0x32FFF2  	BRA Z	L_ADXL355_init6
L__ADXL355_init242:
0x0958	0xE15468  	CP.B	W10, #8
0x095A	0x32FFF4  	BRA Z	L_ADXL355_init7
L__ADXL355_init243:
L_ADXL355_init3:
;adxl355_spi.c,125 :: 		}
L_end_ADXL355_init:
0x095C	0x7805CF  	POP	W11
0x095E	0x78054F  	POP	W10
0x0960	0x060000  	RETURN
; end of _ADXL355_init
0x1558	0x210001  	MOV	#lo_addr(_datosLeidos), W1
0x155A	0x280000  	MOV	#32768, W0
0x155C	0x090003  	REPEAT	#3
0x155E	0x7818B0  	MOV	[W0++], [W1++]
0x1560	0x7858B0  	MOV.B	[W0++], [W1++]
0x1562	0x060000  	RETURN
_int_1:
0x11F2	0xF80034  	PUSH	DSWPAG
0x11F4	0xF80032  	PUSH	DSRPAG
0x11F6	0xF80036  	PUSH	RCOUNT
0x11F8	0x781F80  	PUSH	W0
0x11FA	0x200020  	MOV	#2, W0
0x11FC	0x09000C  	REPEAT	#12
0x11FE	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,459 :: 		void int_1() org IVT_ADDR_INT1INTERRUPT {
;Acelerografo.c,461 :: 		INT1IF_bit = 0;                                                            //Limpia la bandera de interrupcion externa INT1
0x1200	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Acelerografo.c,463 :: 		TEST = ~TEST;
0x1202	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,464 :: 		horaSistema++;                                                             //Incrementa el reloj del sistema
0x1204	0x200011  	MOV	#1, W1
0x1206	0x200002  	MOV	#0, W2
0x1208	0x21B4E0  	MOV	#lo_addr(_horaSistema), W0
0x120A	0x409810  	ADD	W1, [W0], [W0++]
0x120C	0x491010  	ADDC	W2, [W0], [W0--]
;Acelerografo.c,466 :: 		if (horaSistema==86400){                                                   //(24*3600)+(0*60)+(0) = 86400
0x120E	0x80DA72  	MOV	_horaSistema, W2
0x1210	0x80DA83  	MOV	_horaSistema+2, W3
0x1212	0x251800  	MOV	#20864, W0
0x1214	0x200011  	MOV	#1, W1
0x1216	0xE11000  	CP	W2, W0
0x1218	0xE19801  	CPB	W3, W1
0x121A	0x3A0004  	BRA NZ	L_int_1124
L__int_1332:
;Acelerografo.c,467 :: 		horaSistema = 0;                                                        //Reinicia el reloj al llegar a las 24:00:00 horas
0x121C	0xEF2000  	CLR	W0
0x121E	0xEF2002  	CLR	W1
0x1220	0x88DA70  	MOV	W0, _horaSistema
0x1222	0x88DA81  	MOV	W1, _horaSistema+2
;Acelerografo.c,468 :: 		}
L_int_1124:
;Acelerografo.c,470 :: 		if (banInicio==1){
0x1224	0x21B350  	MOV	#lo_addr(_banInicio), W0
0x1226	0x784010  	MOV.B	[W0], W0
0x1228	0xE10461  	CP.B	W0, #1
0x122A	0x3A0001  	BRA NZ	L_int_1125
L__int_1333:
;Acelerografo.c,472 :: 		Muestrear();
0x122C	0x07FB9A  	RCALL	_Muestrear
;Acelerografo.c,473 :: 		}
L_int_1125:
;Acelerografo.c,475 :: 		}
L_end_int_1:
0x122E	0x2001A0  	MOV	#26, W0
0x1230	0x09000C  	REPEAT	#12
0x1232	0x78104F  	POP	[W0--]
0x1234	0x78004F  	POP	W0
0x1236	0xF90036  	POP	RCOUNT
0x1238	0xF90032  	POP	DSRPAG
0x123A	0xF90034  	POP	DSWPAG
0x123C	0x064000  	RETFIE
; end of _int_1
_Muestrear:
;Acelerografo.c,251 :: 		void Muestrear(){
;Acelerografo.c,253 :: 		if (banCiclo==0){
0x0962	0x781F8A  	PUSH	W10
0x0964	0x781F8B  	PUSH	W11
0x0966	0x781F8C  	PUSH	W12
0x0968	0x781F8D  	PUSH	W13
0x096A	0x21B3E0  	MOV	#lo_addr(_banCiclo), W0
0x096C	0x784010  	MOV.B	[W0], W0
0x096E	0xE10460  	CP.B	W0, #0
0x0970	0x3A0005  	BRA NZ	L_Muestrear56
L__Muestrear290:
;Acelerografo.c,255 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF|MEASURING);                     //Coloca el ADXL en modo medicion
0x0972	0xB3C04B  	MOV.B	#4, W11
0x0974	0xB3C2DA  	MOV.B	#45, W10
0x0976	0x07017E  	RCALL	_ADXL355_write_byte
;Acelerografo.c,256 :: 		T1CON.TON = 1;                                                         //Enciende el Timer1
0x0978	0xA8E105  	BSET	T1CON, #15
;Acelerografo.c,258 :: 		} else if (banCiclo==1) {
0x097A	0x37009B  	BRA	L_Muestrear57
L_Muestrear56:
0x097C	0x21B3E0  	MOV	#lo_addr(_banCiclo), W0
0x097E	0x784010  	MOV.B	[W0], W0
0x0980	0xE10461  	CP.B	W0, #1
0x0982	0x3A0097  	BRA NZ	L_Muestrear58
L__Muestrear291:
;Acelerografo.c,260 :: 		banCiclo = 2;                                                          //Limpia la bandera de ciclo completo
0x0984	0x21B3E1  	MOV	#lo_addr(_banCiclo), W1
0x0986	0xB3C020  	MOV.B	#2, W0
0x0988	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,262 :: 		tramaCompleta[0] = contCiclos;                                         //LLena el primer elemento de la tramaCompleta con el contador de ciclos
0x098A	0x211021  	MOV	#lo_addr(_tramaCompleta), W1
0x098C	0x21B5B0  	MOV	#lo_addr(_contCiclos), W0
0x098E	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,263 :: 		numFIFO = ADXL355_read_byte(FIFO_ENTRIES);
0x0990	0xB3C05A  	MOV.B	#5, W10
0x0992	0x070237  	RCALL	_ADXL355_read_byte
0x0994	0x21B5E1  	MOV	#lo_addr(_numFIFO), W1
0x0996	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,264 :: 		numSetsFIFO = (numFIFO)/3;                                             //Lee el numero de sets disponibles en el FIFO
0x0998	0xFB8000  	ZE	W0, W0
0x099A	0x200032  	MOV	#3, W2
0x099C	0x090011  	REPEAT	#17
0x099E	0xD80002  	DIV.S	W0, W2
0x09A0	0x780080  	MOV	W0, W1
0x09A2	0x21B590  	MOV	#lo_addr(_numSetsFIFO), W0
0x09A4	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,267 :: 		for (x=0;x<numSetsFIFO;x++){
0x09A6	0xEF2000  	CLR	W0
0x09A8	0x88DA50  	MOV	W0, _x
L_Muestrear59:
0x09AA	0x21B590  	MOV	#lo_addr(_numSetsFIFO), W0
0x09AC	0xFB8090  	ZE	[W0], W1
0x09AE	0x21B4A0  	MOV	#lo_addr(_x), W0
0x09B0	0xE10810  	CP	W1, [W0]
0x09B2	0x36001A  	BRA LEU	L_Muestrear60
L__Muestrear292:
;Acelerografo.c,268 :: 		ADXL355_read_FIFO(datosLeidos);                                    //Lee una sola posicion del FIFO
0x09B4	0x21000A  	MOV	#lo_addr(_datosLeidos), W10
0x09B6	0x0701CF  	RCALL	_ADXL355_read_FIFO
;Acelerografo.c,269 :: 		for (y=0;y<9;y++){
0x09B8	0xEF2000  	CLR	W0
0x09BA	0x88DA10  	MOV	W0, _y
L_Muestrear62:
0x09BC	0x80DA10  	MOV	_y, W0
0x09BE	0xE10069  	CP	W0, #9
0x09C0	0x31000F  	BRA GEU	L_Muestrear63
L__Muestrear293:
;Acelerografo.c,270 :: 		datosFIFO[y+(x*9)] = datosLeidos[y];                           //LLena la trama datosFIFO
0x09C2	0x80DA51  	MOV	_x, W1
0x09C4	0x200090  	MOV	#9, W0
0x09C6	0xB80900  	MUL.UU	W1, W0, W2
0x09C8	0x21B420  	MOV	#lo_addr(_y), W0
0x09CA	0x410090  	ADD	W2, [W0], W1
0x09CC	0x210090  	MOV	#lo_addr(_datosFIFO), W0
0x09CE	0x400101  	ADD	W0, W1, W2
0x09D0	0x210001  	MOV	#lo_addr(_datosLeidos), W1
0x09D2	0x21B420  	MOV	#lo_addr(_y), W0
0x09D4	0x408010  	ADD	W1, [W0], W0
0x09D6	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,269 :: 		for (y=0;y<9;y++){
0x09D8	0x200011  	MOV	#1, W1
0x09DA	0x21B420  	MOV	#lo_addr(_y), W0
0x09DC	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,271 :: 		}
0x09DE	0x37FFEE  	BRA	L_Muestrear62
L_Muestrear63:
;Acelerografo.c,267 :: 		for (x=0;x<numSetsFIFO;x++){
0x09E0	0x200011  	MOV	#1, W1
0x09E2	0x21B4A0  	MOV	#lo_addr(_x), W0
0x09E4	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,272 :: 		}
0x09E6	0x37FFE1  	BRA	L_Muestrear59
L_Muestrear60:
;Acelerografo.c,275 :: 		for (x=0;x<(numSetsFIFO*9);x++){
0x09E8	0xEF2000  	CLR	W0
0x09EA	0x88DA50  	MOV	W0, _x
L_Muestrear65:
0x09EC	0x21B590  	MOV	#lo_addr(_numSetsFIFO), W0
0x09EE	0xFB8090  	ZE	[W0], W1
0x09F0	0x200090  	MOV	#9, W0
0x09F2	0xB98900  	MUL.SS	W1, W0, W2
0x09F4	0x21B4A0  	MOV	#lo_addr(_x), W0
0x09F6	0xE11010  	CP	W2, [W0]
0x09F8	0x360036  	BRA LEU	L_Muestrear66
L__Muestrear294:
;Acelerografo.c,276 :: 		if ((x==0)||(x%9==0)){
0x09FA	0x80DA50  	MOV	_x, W0
0x09FC	0xE10060  	CP	W0, #0
0x09FE	0x320008  	BRA Z	L__Muestrear185
L__Muestrear295:
0x0A00	0x80DA50  	MOV	_x, W0
0x0A02	0x200092  	MOV	#9, W2
0x0A04	0x090011  	REPEAT	#17
0x0A06	0xD88002  	DIV.U	W0, W2
0x0A08	0x780001  	MOV	W1, W0
0x0A0A	0xE10060  	CP	W0, #0
0x0A0C	0x320001  	BRA Z	L__Muestrear184
L__Muestrear296:
0x0A0E	0x37001B  	BRA	L_Muestrear70
L__Muestrear185:
L__Muestrear184:
;Acelerografo.c,277 :: 		tramaCompleta[contFIFO+contMuestras+x] = contMuestras;          //Funciona bien
0x0A10	0x21B4D0  	MOV	#lo_addr(_contMuestras), W0
0x0A12	0xFB8090  	ZE	[W0], W1
0x0A14	0x21B5C0  	MOV	#lo_addr(_contFIFO), W0
0x0A16	0x408090  	ADD	W1, [W0], W1
0x0A18	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0A1A	0x408090  	ADD	W1, [W0], W1
0x0A1C	0x211020  	MOV	#lo_addr(_tramaCompleta), W0
0x0A1E	0x400081  	ADD	W0, W1, W1
0x0A20	0x21B4D0  	MOV	#lo_addr(_contMuestras), W0
0x0A22	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,278 :: 		tramaCompleta[contFIFO+contMuestras+x+1] = datosFIFO[x];
0x0A24	0x21B4D0  	MOV	#lo_addr(_contMuestras), W0
0x0A26	0xFB8090  	ZE	[W0], W1
0x0A28	0x21B5C0  	MOV	#lo_addr(_contFIFO), W0
0x0A2A	0x408090  	ADD	W1, [W0], W1
0x0A2C	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0A2E	0x408010  	ADD	W1, [W0], W0
0x0A30	0x4000E1  	ADD	W0, #1, W1
0x0A32	0x211020  	MOV	#lo_addr(_tramaCompleta), W0
0x0A34	0x400101  	ADD	W0, W1, W2
0x0A36	0x210091  	MOV	#lo_addr(_datosFIFO), W1
0x0A38	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0A3A	0x408010  	ADD	W1, [W0], W0
0x0A3C	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,279 :: 		contMuestras++;
0x0A3E	0xB3C011  	MOV.B	#1, W1
0x0A40	0x21B4D0  	MOV	#lo_addr(_contMuestras), W0
0x0A42	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,280 :: 		} else {
0x0A44	0x37000C  	BRA	L_Muestrear71
L_Muestrear70:
;Acelerografo.c,281 :: 		tramaCompleta[contFIFO+contMuestras+x] = datosFIFO[x];
0x0A46	0x21B4D0  	MOV	#lo_addr(_contMuestras), W0
0x0A48	0xFB8090  	ZE	[W0], W1
0x0A4A	0x21B5C0  	MOV	#lo_addr(_contFIFO), W0
0x0A4C	0x408090  	ADD	W1, [W0], W1
0x0A4E	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0A50	0x408090  	ADD	W1, [W0], W1
0x0A52	0x211020  	MOV	#lo_addr(_tramaCompleta), W0
0x0A54	0x400101  	ADD	W0, W1, W2
0x0A56	0x210091  	MOV	#lo_addr(_datosFIFO), W1
0x0A58	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0A5A	0x408010  	ADD	W1, [W0], W0
0x0A5C	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,282 :: 		}
L_Muestrear71:
;Acelerografo.c,275 :: 		for (x=0;x<(numSetsFIFO*9);x++){
0x0A5E	0x200011  	MOV	#1, W1
0x0A60	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0A62	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,283 :: 		}
0x0A64	0x37FFC3  	BRA	L_Muestrear65
L_Muestrear66:
;Acelerografo.c,286 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo);
0x0A66	0x80DA9C  	MOV	_fechaSistema, W12
0x0A68	0x80DAAD  	MOV	_fechaSistema+2, W13
0x0A6A	0x80DA7A  	MOV	_horaSistema, W10
0x0A6C	0x80DA8B  	MOV	_horaSistema+2, W11
0x0A6E	0x210FC0  	MOV	#lo_addr(_tiempo), W0
0x0A70	0x781F80  	PUSH	W0
0x0A72	0x07010E  	RCALL	_AjustarTiempoSistema
0x0A74	0xB1002F  	SUB	#2, W15
;Acelerografo.c,287 :: 		for (x=0;x<6;x++){
0x0A76	0xEF2000  	CLR	W0
0x0A78	0x88DA50  	MOV	W0, _x
L_Muestrear72:
0x0A7A	0x80DA50  	MOV	_x, W0
0x0A7C	0xE10066  	CP	W0, #6
0x0A7E	0x31000D  	BRA GEU	L_Muestrear73
L__Muestrear297:
;Acelerografo.c,288 :: 		tramaCompleta[2500+x] = tiempo[x];
0x0A80	0x209C41  	MOV	#2500, W1
0x0A82	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0A84	0x408090  	ADD	W1, [W0], W1
0x0A86	0x211020  	MOV	#lo_addr(_tramaCompleta), W0
0x0A88	0x400101  	ADD	W0, W1, W2
0x0A8A	0x210FC1  	MOV	#lo_addr(_tiempo), W1
0x0A8C	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0A8E	0x408010  	ADD	W1, [W0], W0
0x0A90	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,287 :: 		for (x=0;x<6;x++){
0x0A92	0x200011  	MOV	#1, W1
0x0A94	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0A96	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,289 :: 		}
0x0A98	0x37FFF0  	BRA	L_Muestrear72
L_Muestrear73:
;Acelerografo.c,291 :: 		contMuestras = 0;                                                      //Limpia el contador de muestras
0x0A9A	0x21B4D1  	MOV	#lo_addr(_contMuestras), W1
0x0A9C	0xEF2000  	CLR	W0
0x0A9E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,292 :: 		contFIFO = 0;                                                          //Limpia el contador de FIFOs
0x0AA0	0xEF2000  	CLR	W0
0x0AA2	0x88DAE0  	MOV	W0, _contFIFO
;Acelerografo.c,293 :: 		T1CON.TON = 1;                                                         //Enciende el Timer1
0x0AA4	0xA8E105  	BSET	T1CON, #15
;Acelerografo.c,295 :: 		banLec = 1;                                                            //Activa la bandera de lectura para enviar la trama
0x0AA6	0x21B411  	MOV	#lo_addr(_banLec), W1
0x0AA8	0xB3C010  	MOV.B	#1, W0
0x0AAA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,296 :: 		InterrupcionP1(0XB1);
0x0AAC	0xB3CB1A  	MOV.B	#177, W10
0x0AAE	0x070143  	RCALL	_InterrupcionP1
;Acelerografo.c,298 :: 		TEST = 0;
0x0AB0	0xA98E15  	BCLR	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,300 :: 		}
L_Muestrear58:
L_Muestrear57:
;Acelerografo.c,302 :: 		contCiclos++;                                                              //Incrementa el contador de ciclos
0x0AB2	0xB3C011  	MOV.B	#1, W1
0x0AB4	0x21B5B0  	MOV	#lo_addr(_contCiclos), W0
0x0AB6	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,304 :: 		}
L_end_Muestrear:
0x0AB8	0x7806CF  	POP	W13
0x0ABA	0x78064F  	POP	W12
0x0ABC	0x7805CF  	POP	W11
0x0ABE	0x78054F  	POP	W10
0x0AC0	0x060000  	RETURN
; end of _Muestrear
_ADXL355_read_byte:
;adxl355_spi.c,137 :: 		unsigned char ADXL355_read_byte(unsigned char address){
;adxl355_spi.c,138 :: 		unsigned char value = 0x00;
0x0E02	0x781F8A  	PUSH	W10
;adxl355_spi.c,139 :: 		address=(address<<1)|0x01;
0x0E04	0xFB800A  	ZE	W10, W0
0x0E06	0xDD0041  	SL	W0, #1, W0
0x0E08	0x700061  	IOR	W0, #1, W0
0x0E0A	0x784500  	MOV.B	W0, W10
;adxl355_spi.c,140 :: 		CS_ADXL355=0;
0x0E0C	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,141 :: 		SPI2_Write(address);
0x0E0E	0xFB8500  	ZE	W0, W10
0x0E10	0x07FA3C  	RCALL	_SPI2_Write
;adxl355_spi.c,142 :: 		value=SPI2_Read(0);
0x0E12	0xEF2014  	CLR	W10
0x0E14	0x07F9FE  	RCALL	_SPI2_Read
;adxl355_spi.c,143 :: 		CS_ADXL355=1;
0x0E16	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,144 :: 		return value;
;adxl355_spi.c,145 :: 		}
;adxl355_spi.c,144 :: 		return value;
;adxl355_spi.c,145 :: 		}
L_end_ADXL355_read_byte:
0x0E18	0x78054F  	POP	W10
0x0E1A	0x060000  	RETURN
; end of _ADXL355_read_byte
_ADXL355_read_FIFO:
0x0D56	0xFA0002  	LNK	#2
;adxl355_spi.c,167 :: 		unsigned int ADXL355_read_FIFO(unsigned char *vectorFIFO){
;adxl355_spi.c,170 :: 		CS_ADXL355 = 0;
0x0D58	0x781F8A  	PUSH	W10
0x0D5A	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,171 :: 		SPI2_Write(add);
0x0D5C	0x781F8A  	PUSH	W10
0x0D5E	0x20023A  	MOV	#35, W10
0x0D60	0x07FA94  	RCALL	_SPI2_Write
0x0D62	0x78054F  	POP	W10
;adxl355_spi.c,173 :: 		vectorFIFO[0] = SPI2_Read(0);
0x0D64	0x78000A  	MOV	W10, W0
0x0D66	0x980700  	MOV	W0, [W14+0]
0x0D68	0x781F8A  	PUSH	W10
0x0D6A	0xEF2014  	CLR	W10
0x0D6C	0x07FA52  	RCALL	_SPI2_Read
0x0D6E	0x78054F  	POP	W10
0x0D70	0x90008E  	MOV	[W14+0], W1
0x0D72	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,174 :: 		vectorFIFO[1] = SPI2_Read(1);
0x0D74	0x450061  	ADD	W10, #1, W0
0x0D76	0x980700  	MOV	W0, [W14+0]
0x0D78	0x781F8A  	PUSH	W10
0x0D7A	0x20001A  	MOV	#1, W10
0x0D7C	0x07FA4A  	RCALL	_SPI2_Read
0x0D7E	0x78054F  	POP	W10
0x0D80	0x90008E  	MOV	[W14+0], W1
0x0D82	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,175 :: 		vectorFIFO[2] = SPI2_Read(2);
0x0D84	0x450062  	ADD	W10, #2, W0
0x0D86	0x980700  	MOV	W0, [W14+0]
0x0D88	0x781F8A  	PUSH	W10
0x0D8A	0x20002A  	MOV	#2, W10
0x0D8C	0x07FA42  	RCALL	_SPI2_Read
0x0D8E	0x78054F  	POP	W10
0x0D90	0x90008E  	MOV	[W14+0], W1
0x0D92	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,177 :: 		vectorFIFO[3] = SPI2_Read(0);
0x0D94	0x450063  	ADD	W10, #3, W0
0x0D96	0x980700  	MOV	W0, [W14+0]
0x0D98	0x781F8A  	PUSH	W10
0x0D9A	0xEF2014  	CLR	W10
0x0D9C	0x07FA3A  	RCALL	_SPI2_Read
0x0D9E	0x78054F  	POP	W10
0x0DA0	0x90008E  	MOV	[W14+0], W1
0x0DA2	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,178 :: 		vectorFIFO[4] = SPI2_Read(1);
0x0DA4	0x450064  	ADD	W10, #4, W0
0x0DA6	0x980700  	MOV	W0, [W14+0]
0x0DA8	0x781F8A  	PUSH	W10
0x0DAA	0x20001A  	MOV	#1, W10
0x0DAC	0x07FA32  	RCALL	_SPI2_Read
0x0DAE	0x78054F  	POP	W10
0x0DB0	0x90008E  	MOV	[W14+0], W1
0x0DB2	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,179 :: 		vectorFIFO[5] = SPI2_Read(2);
0x0DB4	0x450065  	ADD	W10, #5, W0
0x0DB6	0x980700  	MOV	W0, [W14+0]
0x0DB8	0x781F8A  	PUSH	W10
0x0DBA	0x20002A  	MOV	#2, W10
0x0DBC	0x07FA2A  	RCALL	_SPI2_Read
0x0DBE	0x78054F  	POP	W10
0x0DC0	0x90008E  	MOV	[W14+0], W1
0x0DC2	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,181 :: 		vectorFIFO[6] = SPI2_Read(0);
0x0DC4	0x450066  	ADD	W10, #6, W0
0x0DC6	0x980700  	MOV	W0, [W14+0]
0x0DC8	0x781F8A  	PUSH	W10
0x0DCA	0xEF2014  	CLR	W10
0x0DCC	0x07FA22  	RCALL	_SPI2_Read
0x0DCE	0x78054F  	POP	W10
0x0DD0	0x90008E  	MOV	[W14+0], W1
0x0DD2	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,182 :: 		vectorFIFO[7] = SPI2_Read(1);
0x0DD4	0x450067  	ADD	W10, #7, W0
0x0DD6	0x980700  	MOV	W0, [W14+0]
0x0DD8	0x781F8A  	PUSH	W10
0x0DDA	0x20001A  	MOV	#1, W10
0x0DDC	0x07FA1A  	RCALL	_SPI2_Read
0x0DDE	0x78054F  	POP	W10
0x0DE0	0x90008E  	MOV	[W14+0], W1
0x0DE2	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,183 :: 		vectorFIFO[8] = SPI2_Read(2);
0x0DE4	0x450068  	ADD	W10, #8, W0
0x0DE6	0x980700  	MOV	W0, [W14+0]
0x0DE8	0x20002A  	MOV	#2, W10
0x0DEA	0x07FA13  	RCALL	_SPI2_Read
0x0DEC	0x90008E  	MOV	[W14+0], W1
0x0DEE	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,184 :: 		CS_ADXL355 = 1;
0x0DF0	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,185 :: 		Delay_us(5);
0x0DF2	0x200287  	MOV	#40, W7
L_ADXL355_read_FIFO16:
0x0DF4	0xED200E  	DEC	W7
0x0DF6	0x3AFFFE  	BRA NZ	L_ADXL355_read_FIFO16
0x0DF8	0x000000  	NOP
0x0DFA	0x000000  	NOP
;adxl355_spi.c,187 :: 		}
;adxl355_spi.c,186 :: 		return;
;adxl355_spi.c,187 :: 		}
L_end_ADXL355_read_FIFO:
0x0DFC	0x78054F  	POP	W10
0x0DFE	0xFA8000  	ULNK
0x0E00	0x060000  	RETURN
; end of _ADXL355_read_FIFO
_AjustarTiempoSistema:
0x0C90	0xFA000E  	LNK	#14
;tiempo_rtc.c,253 :: 		void AjustarTiempoSistema(unsigned long longHora, unsigned long longFecha, unsigned short *tramaTiempoSistema){
0x0C92	0x97B84E  	MOV	[W14-8], W0
0x0C94	0x9FBF40  	MOV	W0, [W14-8]
;tiempo_rtc.c,262 :: 		hora = (short)(longHora / 3600);
0x0C96	0xBE9F8C  	PUSH.D	W12
0x0C98	0xBE9F8A  	PUSH.D	W10
0x0C9A	0x20E102  	MOV	#3600, W2
0x0C9C	0x200003  	MOV	#0, W3
0x0C9E	0xBE000A  	MOV.D	W10, W0
0x0CA0	0xEB0200  	CLR	W4
0x0CA2	0x07FC0A  	RCALL	__Divide_32x32
0x0CA4	0xBE054F  	POP.D	W10
0x0CA6	0x984700  	MOV.B	W0, [W14+0]
;tiempo_rtc.c,263 :: 		minuto = (short)((longHora%3600) / 60);
0x0CA8	0x20E102  	MOV	#3600, W2
0x0CAA	0x200003  	MOV	#0, W3
0x0CAC	0xBE000A  	MOV.D	W10, W0
0x0CAE	0xEB0200  	CLR	W4
0x0CB0	0x07FB4D  	RCALL	__Modulus_32x32
0x0CB2	0x980750  	MOV	W0, [W14+10]
0x0CB4	0x980761  	MOV	W1, [W14+12]
0x0CB6	0x2003C2  	MOV	#60, W2
0x0CB8	0x200003  	MOV	#0, W3
0x0CBA	0xEB0200  	CLR	W4
0x0CBC	0x07FBFD  	RCALL	__Divide_32x32
0x0CBE	0x984710  	MOV.B	W0, [W14+1]
;tiempo_rtc.c,264 :: 		segundo = (short)((longHora%3600) % 60);
0x0CC0	0x90005E  	MOV	[W14+10], W0
0x0CC2	0x9000EE  	MOV	[W14+12], W1
0x0CC4	0x2003C2  	MOV	#60, W2
0x0CC6	0x200003  	MOV	#0, W3
0x0CC8	0xEB0200  	CLR	W4
0x0CCA	0x07FB40  	RCALL	__Modulus_32x32
0x0CCC	0xBE064F  	POP.D	W12
0x0CCE	0x984720  	MOV.B	W0, [W14+2]
;tiempo_rtc.c,266 :: 		anio = (short)(longFecha / 10000);
0x0CD0	0xBE9F8C  	PUSH.D	W12
0x0CD2	0x227102  	MOV	#10000, W2
0x0CD4	0x200003  	MOV	#0, W3
0x0CD6	0xBE000C  	MOV.D	W12, W0
0x0CD8	0xEB0200  	CLR	W4
0x0CDA	0x07FBEE  	RCALL	__Divide_32x32
0x0CDC	0xBE064F  	POP.D	W12
0x0CDE	0x984740  	MOV.B	W0, [W14+4]
;tiempo_rtc.c,267 :: 		mes = (short)((longFecha%10000) / 100);
0x0CE0	0x227102  	MOV	#10000, W2
0x0CE2	0x200003  	MOV	#0, W3
0x0CE4	0xBE000C  	MOV.D	W12, W0
0x0CE6	0xEB0200  	CLR	W4
0x0CE8	0x07FB31  	RCALL	__Modulus_32x32
0x0CEA	0x980750  	MOV	W0, [W14+10]
0x0CEC	0x980761  	MOV	W1, [W14+12]
0x0CEE	0x200642  	MOV	#100, W2
0x0CF0	0x200003  	MOV	#0, W3
0x0CF2	0xEB0200  	CLR	W4
0x0CF4	0x07FBE1  	RCALL	__Divide_32x32
0x0CF6	0x984730  	MOV.B	W0, [W14+3]
;tiempo_rtc.c,268 :: 		dia = (short)((longFecha%10000) % 100);
0x0CF8	0x90005E  	MOV	[W14+10], W0
0x0CFA	0x9000EE  	MOV	[W14+12], W1
0x0CFC	0x200642  	MOV	#100, W2
0x0CFE	0x200003  	MOV	#0, W3
0x0D00	0xEB0200  	CLR	W4
0x0D02	0x07FB24  	RCALL	__Modulus_32x32
; dia start address is: 4 (W2)
0x0D04	0x784100  	MOV.B	W0, W2
;tiempo_rtc.c,270 :: 		tramaTiempoSistema[0] = anio;
0x0D06	0x97B8CE  	MOV	[W14-8], W1
0x0D08	0x90404E  	MOV.B	[W14+4], W0
0x0D0A	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,271 :: 		tramaTiempoSistema[1] = mes;
0x0D0C	0x97B84E  	MOV	[W14-8], W0
0x0D0E	0x4000E1  	ADD	W0, #1, W1
0x0D10	0x90403E  	MOV.B	[W14+3], W0
0x0D12	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,272 :: 		tramaTiempoSistema[2] = dia;
0x0D14	0x97B84E  	MOV	[W14-8], W0
0x0D16	0xECA000  	INC2	W0
0x0D18	0x784802  	MOV.B	W2, [W0]
; dia end address is: 4 (W2)
;tiempo_rtc.c,273 :: 		tramaTiempoSistema[3] = hora;
0x0D1A	0x97B84E  	MOV	[W14-8], W0
0x0D1C	0x4000E3  	ADD	W0, #3, W1
0x0D1E	0x90400E  	MOV.B	[W14+0], W0
0x0D20	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,274 :: 		tramaTiempoSistema[4] = minuto;
0x0D22	0x97B84E  	MOV	[W14-8], W0
0x0D24	0x4000E4  	ADD	W0, #4, W1
0x0D26	0x90401E  	MOV.B	[W14+1], W0
0x0D28	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,275 :: 		tramaTiempoSistema[5] = segundo;
0x0D2A	0x97B84E  	MOV	[W14-8], W0
0x0D2C	0x4000E5  	ADD	W0, #5, W1
0x0D2E	0x90402E  	MOV.B	[W14+2], W0
0x0D30	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,277 :: 		}
L_end_AjustarTiempoSistema:
0x0D32	0xFA8000  	ULNK
0x0D34	0x060000  	RETURN
; end of _AjustarTiempoSistema
_InterrupcionP1:
;Acelerografo.c,228 :: 		void InterrupcionP1(unsigned char operacion){
;Acelerografo.c,231 :: 		if (INT1IE_bit==0){
0x0D36	0xAF8822  	BTSC	INT1IE_bit, BitPos(INT1IE_bit+0)
0x0D38	0x370001  	BRA	L_InterrupcionP153
;Acelerografo.c,232 :: 		INT1IE_bit = 1;
0x0D3A	0xA88822  	BSET	INT1IE_bit, BitPos(INT1IE_bit+0)
;Acelerografo.c,233 :: 		}
L_InterrupcionP153:
;Acelerografo.c,240 :: 		banOperacion = 0;                                                          //Encera la bandera para permitir una nueva peticion de operacion
0x0D3C	0x21B361  	MOV	#lo_addr(_banOperacion), W1
0x0D3E	0xEF2000  	CLR	W0
0x0D40	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,241 :: 		tipoOperacion = operacion;                                                 //Carga en la variable el tipo de operacion requerido
0x0D42	0x21B370  	MOV	#lo_addr(_tipoOperacion), W0
0x0D44	0x78480A  	MOV.B	W10, [W0]
;Acelerografo.c,243 :: 		RP1 = 1;
0x0D46	0xA88E04  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,244 :: 		Delay_us(20);
0x0D48	0x200A07  	MOV	#160, W7
L_InterrupcionP154:
0x0D4A	0xED200E  	DEC	W7
0x0D4C	0x3AFFFE  	BRA NZ	L_InterrupcionP154
0x0D4E	0x000000  	NOP
0x0D50	0x000000  	NOP
;Acelerografo.c,245 :: 		RP1 = 0;
0x0D52	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,246 :: 		}
L_end_InterrupcionP1:
0x0D54	0x060000  	RETURN
; end of _InterrupcionP1
_urx_1:
0x102C	0xF80034  	PUSH	DSWPAG
0x102E	0xF80032  	PUSH	DSRPAG
0x1030	0xF80036  	PUSH	RCOUNT
0x1032	0x781F80  	PUSH	W0
0x1034	0x200020  	MOV	#2, W0
0x1036	0x09000C  	REPEAT	#12
0x1038	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,519 :: 		void urx_1() org  IVT_ADDR_U1RXINTERRUPT {
;Acelerografo.c,521 :: 		U1RXIF_bit = 0;                                                            //Limpia la bandera de interrupcion por UART
0x103A	0x781F8A  	PUSH	W10
0x103C	0x781F8B  	PUSH	W11
0x103E	0x781F8C  	PUSH	W12
0x1040	0x781F8D  	PUSH	W13
0x1042	0xA96801  	BCLR	U1RXIF_bit, BitPos(U1RXIF_bit+0)
;Acelerografo.c,523 :: 		byteGPS = U1RXREG;                                                         //Lee el byte de la trama enviada por el GPS
0x1044	0x21B3B1  	MOV	#lo_addr(_byteGPS), W1
0x1046	0xBFC226  	MOV.B	U1RXREG, WREG
0x1048	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,524 :: 		OERR_bit = 0;                                                              //Limpia este bit para limpiar el FIFO UART
0x104A	0xA92222  	BCLR	OERR_bit, BitPos(OERR_bit+0)
;Acelerografo.c,526 :: 		if (banTIGPS==0){
0x104C	0x21B380  	MOV	#lo_addr(_banTIGPS), W0
0x104E	0x784010  	MOV.B	[W0], W0
0x1050	0xE10460  	CP.B	W0, #0
0x1052	0x3A0028  	BRA NZ	L_urx_1140
L__urx_1342:
;Acelerografo.c,528 :: 		if (byteGPS==0x24){
0x1054	0x21B3B0  	MOV	#lo_addr(_byteGPS), W0
0x1056	0x784090  	MOV.B	[W0], W1
0x1058	0xB3C240  	MOV.B	#36, W0
0x105A	0xE10C00  	CP.B	W1, W0
0x105C	0x3A0006  	BRA NZ	L_urx_1141
L__urx_1343:
;Acelerografo.c,529 :: 		banTIGPS = 1;                                                        //Activa la bandera de inicio de trama
0x105E	0x21B381  	MOV	#lo_addr(_banTIGPS), W1
0x1060	0xB3C010  	MOV.B	#1, W0
0x1062	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,530 :: 		i_gps = 0;
0x1064	0xEF2000  	CLR	W0
0x1066	0x88D9E0  	MOV	W0, _i_gps
;Acelerografo.c,531 :: 		} else {
0x1068	0x370003  	BRA	L_urx_1142
L_urx_1141:
;Acelerografo.c,532 :: 		i_gps++;
0x106A	0x200011  	MOV	#1, W1
0x106C	0x21B3C0  	MOV	#lo_addr(_i_gps), W0
0x106E	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,533 :: 		}
L_urx_1142:
;Acelerografo.c,535 :: 		if (i_gps>90){
0x1070	0x2005A1  	MOV	#90, W1
0x1072	0x21B3C0  	MOV	#lo_addr(_i_gps), W0
0x1074	0xE10810  	CP	W1, [W0]
0x1076	0x310016  	BRA GEU	L_urx_1143
L__urx_1344:
;Acelerografo.c,537 :: 		horaSistema = RecuperarHoraRTC();                                    //Recupera la hora del RTC
0x1078	0x07FA8D  	RCALL	_RecuperarHoraRTC
0x107A	0x88DA70  	MOV	W0, _horaSistema
0x107C	0x88DA81  	MOV	W1, _horaSistema+2
;Acelerografo.c,538 :: 		fechaSistema = RecuperarFechaRTC();                                  //Recupera la fecha del RTC
0x107E	0x07FADF  	RCALL	_RecuperarFechaRTC
0x1080	0x88DA90  	MOV	W0, _fechaSistema
0x1082	0x88DAA1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,539 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo);             //Actualiza los datos de la trama tiempo con la hora y fecha recuperadas del RTC
0x1084	0xBE0600  	MOV.D	W0, W12
0x1086	0x80DA7A  	MOV	_horaSistema, W10
0x1088	0x80DA8B  	MOV	_horaSistema+2, W11
0x108A	0x210FC0  	MOV	#lo_addr(_tiempo), W0
0x108C	0x781F80  	PUSH	W0
0x108E	0x07FE00  	RCALL	_AjustarTiempoSistema
0x1090	0xB1002F  	SUB	#2, W15
;Acelerografo.c,540 :: 		fuenteReloj = 0;                                                     //Indica que la fuente de reloj es el RTC
0x1092	0x21B581  	MOV	#lo_addr(_fuenteReloj), W1
0x1094	0xEF2000  	CLR	W0
0x1096	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,541 :: 		banSetReloj = 1;                                                     //Activa la bandera para hacer uso de la hora
0x1098	0x21B571  	MOV	#lo_addr(_banSetReloj), W1
0x109A	0xB3C010  	MOV.B	#1, W0
0x109C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,542 :: 		InterrupcionP1(0XB2);
0x109E	0xB3CB2A  	MOV.B	#178, W10
0x10A0	0x07FE4A  	RCALL	_InterrupcionP1
;Acelerografo.c,543 :: 		U1RXIE_bit = 0;
0x10A2	0xA96821  	BCLR	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Acelerografo.c,544 :: 		}
L_urx_1143:
;Acelerografo.c,545 :: 		}
L_urx_1140:
;Acelerografo.c,547 :: 		if (banTIGPS==1){
0x10A4	0x21B380  	MOV	#lo_addr(_banTIGPS), W0
0x10A6	0x784010  	MOV.B	[W0], W0
0x10A8	0xE10461  	CP.B	W0, #1
0x10AA	0x3A0029  	BRA NZ	L_urx_1144
L__urx_1345:
;Acelerografo.c,549 :: 		if (byteGPS!=0x2A){                                                     //0x2A = "*"
0x10AC	0x21B3B0  	MOV	#lo_addr(_byteGPS), W0
0x10AE	0x784090  	MOV.B	[W0], W1
0x10B0	0xB3C2A0  	MOV.B	#42, W0
0x10B2	0xE10C00  	CP.B	W1, W0
0x10B4	0x320019  	BRA Z	L_urx_1145
L__urx_1346:
;Acelerografo.c,550 :: 		tramaGPS[i_gps] = byteGPS;
0x10B6	0x21AE01  	MOV	#lo_addr(_tramaGPS), W1
0x10B8	0x21B3C0  	MOV	#lo_addr(_i_gps), W0
0x10BA	0x408090  	ADD	W1, [W0], W1
0x10BC	0x21B3B0  	MOV	#lo_addr(_byteGPS), W0
0x10BE	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,551 :: 		if ((i_gps==1)&&(tramaGPS[1]!=0x47)){                                //Verifica si el segundo elemento guardado es diferente de "G"
0x10C0	0x80D9E0  	MOV	_i_gps, W0
0x10C2	0xE10061  	CP	W0, #1
0x10C4	0x3A000D  	BRA NZ	L__urx_1238
L__urx_1347:
0x10C6	0x21AE10  	MOV	#lo_addr(_tramaGPS+1), W0
0x10C8	0x784090  	MOV.B	[W0], W1
0x10CA	0xB3C470  	MOV.B	#71, W0
0x10CC	0xE10C00  	CP.B	W1, W0
0x10CE	0x320008  	BRA Z	L__urx_1237
L__urx_1348:
L__urx_1236:
;Acelerografo.c,552 :: 		i_gps = 0;                                                        //Limpia el subindice para almacenar la trama desde el principio
0x10D0	0xEF2000  	CLR	W0
0x10D2	0x88D9E0  	MOV	W0, _i_gps
;Acelerografo.c,553 :: 		banTIGPS = 0;                                                     //Limpia la bandera de inicio de trama
0x10D4	0x21B381  	MOV	#lo_addr(_banTIGPS), W1
0x10D6	0xEF2000  	CLR	W0
0x10D8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,554 :: 		banTCGPS = 0;                                                     //Limpia la bandera de trama completa
0x10DA	0x21B3A1  	MOV	#lo_addr(_banTCGPS), W1
0x10DC	0xEF2000  	CLR	W0
0x10DE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,551 :: 		if ((i_gps==1)&&(tramaGPS[1]!=0x47)){                                //Verifica si el segundo elemento guardado es diferente de "G"
L__urx_1238:
L__urx_1237:
;Acelerografo.c,556 :: 		i_gps++;
0x10E0	0x200011  	MOV	#1, W1
0x10E2	0x21B3C0  	MOV	#lo_addr(_i_gps), W0
0x10E4	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,557 :: 		} else {
0x10E6	0x37000B  	BRA	L_urx_1149
L_urx_1145:
;Acelerografo.c,558 :: 		tramaGPS[i_gps] = byteGPS;
0x10E8	0x21AE01  	MOV	#lo_addr(_tramaGPS), W1
0x10EA	0x21B3C0  	MOV	#lo_addr(_i_gps), W0
0x10EC	0x408090  	ADD	W1, [W0], W1
0x10EE	0x21B3B0  	MOV	#lo_addr(_byteGPS), W0
0x10F0	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,559 :: 		banTIGPS = 2;                                                        //Cambia el estado de la bandera de inicio de trama para no permitir que se almacene mas datos en la trama
0x10F2	0x21B381  	MOV	#lo_addr(_banTIGPS), W1
0x10F4	0xB3C020  	MOV.B	#2, W0
0x10F6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,560 :: 		banTCGPS = 1;                                                        //Activa la bandera de trama completa
0x10F8	0x21B3A1  	MOV	#lo_addr(_banTCGPS), W1
0x10FA	0xB3C010  	MOV.B	#1, W0
0x10FC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,561 :: 		}
L_urx_1149:
;Acelerografo.c,562 :: 		}
L_urx_1144:
;Acelerografo.c,564 :: 		if (banTCGPS==1){
0x10FE	0x21B3A0  	MOV	#lo_addr(_banTCGPS), W0
0x1100	0x784010  	MOV.B	[W0], W0
0x1102	0xE10461  	CP.B	W0, #1
0x1104	0x3A006A  	BRA NZ	L_urx_1150
L__urx_1349:
;Acelerografo.c,565 :: 		if (tramaGPS[18]==0x41) {                                               //Verifica que el caracter 18 sea igual a "A" lo cual comprueba que los datos son validos
0x1106	0x21AF20  	MOV	#lo_addr(_tramaGPS+18), W0
0x1108	0x784090  	MOV.B	[W0], W1
0x110A	0xB3C410  	MOV.B	#65, W0
0x110C	0xE10C00  	CP.B	W1, W0
0x110E	0x3A004F  	BRA NZ	L_urx_1151
L__urx_1350:
;Acelerografo.c,566 :: 		for (x=0;x<6;x++){
0x1110	0xEF2000  	CLR	W0
0x1112	0x88DA50  	MOV	W0, _x
L_urx_1152:
0x1114	0x80DA50  	MOV	_x, W0
0x1116	0xE10066  	CP	W0, #6
0x1118	0x31000C  	BRA GEU	L_urx_1153
L__urx_1351:
;Acelerografo.c,567 :: 		datosGPS[x] = tramaGPS[7+x];                                     //Guarda los datos de hhmmss
0x111A	0x21ACC1  	MOV	#lo_addr(_datosGPS), W1
0x111C	0x21B4A0  	MOV	#lo_addr(_x), W0
0x111E	0x408110  	ADD	W1, [W0], W2
0x1120	0x80DA50  	MOV	_x, W0
0x1122	0x4000E7  	ADD	W0, #7, W1
0x1124	0x21AE00  	MOV	#lo_addr(_tramaGPS), W0
0x1126	0x400001  	ADD	W0, W1, W0
0x1128	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,566 :: 		for (x=0;x<6;x++){
0x112A	0x200011  	MOV	#1, W1
0x112C	0x21B4A0  	MOV	#lo_addr(_x), W0
0x112E	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,568 :: 		}
0x1130	0x37FFF1  	BRA	L_urx_1152
L_urx_1153:
;Acelerografo.c,569 :: 		for (x=50;x<60;x++){
0x1132	0x200320  	MOV	#50, W0
0x1134	0x88DA50  	MOV	W0, _x
L_urx_1155:
0x1136	0x2003C1  	MOV	#60, W1
0x1138	0x21B4A0  	MOV	#lo_addr(_x), W0
0x113A	0xE10810  	CP	W1, [W0]
0x113C	0x360020  	BRA LEU	L_urx_1156
L__urx_1352:
;Acelerografo.c,570 :: 		if (tramaGPS[x]==0x2C){                                          //Busca el simbolo "," a partir de la posicion 50
0x113E	0x21AE01  	MOV	#lo_addr(_tramaGPS), W1
0x1140	0x21B4A0  	MOV	#lo_addr(_x), W0
0x1142	0x408010  	ADD	W1, [W0], W0
0x1144	0x784090  	MOV.B	[W0], W1
0x1146	0xB3C2C0  	MOV.B	#44, W0
0x1148	0xE10C00  	CP.B	W1, W0
0x114A	0x3A0015  	BRA NZ	L_urx_1158
L__urx_1353:
;Acelerografo.c,571 :: 		for (y=0;y<6;y++){
0x114C	0xEF2000  	CLR	W0
0x114E	0x88DA10  	MOV	W0, _y
L_urx_1159:
0x1150	0x80DA10  	MOV	_y, W0
0x1152	0xE10066  	CP	W0, #6
0x1154	0x31000F  	BRA GEU	L_urx_1160
L__urx_1354:
;Acelerografo.c,572 :: 		datosGPS[6+y] = tramaGPS[x+y+1];                         //Guarda los datos de DDMMAA en la trama datosGPS
0x1156	0x80DA10  	MOV	_y, W0
0x1158	0x4000E6  	ADD	W0, #6, W1
0x115A	0x21ACC0  	MOV	#lo_addr(_datosGPS), W0
0x115C	0x400101  	ADD	W0, W1, W2
0x115E	0x80DA51  	MOV	_x, W1
0x1160	0x21B420  	MOV	#lo_addr(_y), W0
0x1162	0x408010  	ADD	W1, [W0], W0
0x1164	0x4000E1  	ADD	W0, #1, W1
0x1166	0x21AE00  	MOV	#lo_addr(_tramaGPS), W0
0x1168	0x400001  	ADD	W0, W1, W0
0x116A	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,571 :: 		for (y=0;y<6;y++){
0x116C	0x200011  	MOV	#1, W1
0x116E	0x21B420  	MOV	#lo_addr(_y), W0
0x1170	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,573 :: 		}
0x1172	0x37FFEE  	BRA	L_urx_1159
L_urx_1160:
;Acelerografo.c,574 :: 		break;
0x1174	0x370004  	BRA	L_urx_1156
;Acelerografo.c,575 :: 		}
L_urx_1158:
;Acelerografo.c,569 :: 		for (x=50;x<60;x++){
0x1176	0x200011  	MOV	#1, W1
0x1178	0x21B4A0  	MOV	#lo_addr(_x), W0
0x117A	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,576 :: 		}
0x117C	0x37FFDC  	BRA	L_urx_1155
L_urx_1156:
;Acelerografo.c,577 :: 		horaSistema = RecuperarHoraGPS(datosGPS);                            //Recupera la hora del GPS
0x117E	0x21ACCA  	MOV	#lo_addr(_datosGPS), W10
0x1180	0x07FB68  	RCALL	_RecuperarHoraGPS
0x1182	0x88DA70  	MOV	W0, _horaSistema
0x1184	0x88DA81  	MOV	W1, _horaSistema+2
;Acelerografo.c,578 :: 		fechaSistema = RecuperarFechaGPS(datosGPS);                          //Recupera la fecha del GPS
0x1186	0x21ACCA  	MOV	#lo_addr(_datosGPS), W10
0x1188	0x07FB0C  	RCALL	_RecuperarFechaGPS
0x118A	0x88DA90  	MOV	W0, _fechaSistema
0x118C	0x88DAA1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,579 :: 		DS3234_setDate(horaSistema, fechaSistema);                           //Configura la hora en el RTC con la hora recuperada de la RPi
0x118E	0xBE0600  	MOV.D	W0, W12
0x1190	0x80DA7A  	MOV	_horaSistema, W10
0x1192	0x80DA8B  	MOV	_horaSistema+2, W11
0x1194	0x07FA92  	RCALL	_DS3234_setDate
;Acelerografo.c,580 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo);             //Actualiza los datos de la trama tiempo con la hora y fecha recuperadas del gps
0x1196	0x80DA9C  	MOV	_fechaSistema, W12
0x1198	0x80DAAD  	MOV	_fechaSistema+2, W13
0x119A	0x80DA7A  	MOV	_horaSistema, W10
0x119C	0x80DA8B  	MOV	_horaSistema+2, W11
0x119E	0x210FC0  	MOV	#lo_addr(_tiempo), W0
0x11A0	0x781F80  	PUSH	W0
0x11A2	0x07FD76  	RCALL	_AjustarTiempoSistema
0x11A4	0xB1002F  	SUB	#2, W15
;Acelerografo.c,581 :: 		fuenteReloj = 1;                                                     //Indica que la fuente de reloj es el GPS
0x11A6	0x21B581  	MOV	#lo_addr(_fuenteReloj), W1
0x11A8	0xB3C010  	MOV.B	#1, W0
0x11AA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,582 :: 		} else {
0x11AC	0x370010  	BRA	L_urx_1162
L_urx_1151:
;Acelerografo.c,584 :: 		horaSistema = RecuperarHoraRTC();                                    //Recupera la hora del RTC
0x11AE	0x07F9F2  	RCALL	_RecuperarHoraRTC
0x11B0	0x88DA70  	MOV	W0, _horaSistema
0x11B2	0x88DA81  	MOV	W1, _horaSistema+2
;Acelerografo.c,585 :: 		fechaSistema = RecuperarFechaRTC();                                  //Recupera la fecha del RTC
0x11B4	0x07FA44  	RCALL	_RecuperarFechaRTC
0x11B6	0x88DA90  	MOV	W0, _fechaSistema
0x11B8	0x88DAA1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,586 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo);             //Actualiza los datos de la trama tiempo con la hora y fecha recuperadas del RTC
0x11BA	0xBE0600  	MOV.D	W0, W12
0x11BC	0x80DA7A  	MOV	_horaSistema, W10
0x11BE	0x80DA8B  	MOV	_horaSistema+2, W11
0x11C0	0x210FC0  	MOV	#lo_addr(_tiempo), W0
0x11C2	0x781F80  	PUSH	W0
0x11C4	0x07FD65  	RCALL	_AjustarTiempoSistema
0x11C6	0xB1002F  	SUB	#2, W15
;Acelerografo.c,587 :: 		fuenteReloj = 0;                                                     //Indica que la fuente de reloj es el RTC
0x11C8	0x21B581  	MOV	#lo_addr(_fuenteReloj), W1
0x11CA	0xEF2000  	CLR	W0
0x11CC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,588 :: 		}
L_urx_1162:
;Acelerografo.c,589 :: 		banSetReloj = 1;                                                        //Activa la bandera para hacer uso de la hora GPS
0x11CE	0x21B571  	MOV	#lo_addr(_banSetReloj), W1
0x11D0	0xB3C010  	MOV.B	#1, W0
0x11D2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,590 :: 		InterrupcionP1(0XB2);
0x11D4	0xB3CB2A  	MOV.B	#178, W10
0x11D6	0x07FDAF  	RCALL	_InterrupcionP1
;Acelerografo.c,591 :: 		U1RXIE_bit = 0;
0x11D8	0xA96821  	BCLR	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Acelerografo.c,592 :: 		}
L_urx_1150:
;Acelerografo.c,594 :: 		}
L_end_urx_1:
0x11DA	0x7806CF  	POP	W13
0x11DC	0x78064F  	POP	W12
0x11DE	0x7805CF  	POP	W11
0x11E0	0x78054F  	POP	W10
0x11E2	0x2001A0  	MOV	#26, W0
0x11E4	0x09000C  	REPEAT	#12
0x11E6	0x78104F  	POP	[W0--]
0x11E8	0x78004F  	POP	W0
0x11EA	0xF90036  	POP	RCOUNT
0x11EC	0xF90032  	POP	DSRPAG
0x11EE	0xF90034  	POP	DSWPAG
0x11F0	0x064000  	RETFIE
; end of _urx_1
_RecuperarHoraRTC:
0x0594	0xFA0004  	LNK	#4
;tiempo_rtc.c,128 :: 		unsigned long RecuperarHoraRTC(){
;tiempo_rtc.c,136 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x0596	0x781F8A  	PUSH	W10
0x0598	0x781F8B  	PUSH	W11
0x059A	0x781F8C  	PUSH	W12
0x059C	0x781F8D  	PUSH	W13
0x059E	0xEF201A  	CLR	W13
0x05A0	0x2001CC  	MOV	#28, W12
0x05A2	0xEF2016  	CLR	W11
0x05A4	0x20020A  	MOV	#32, W10
0x05A6	0xEF2000  	CLR	W0
0x05A8	0x781F80  	PUSH	W0
0x05AA	0xEF2000  	CLR	W0
0x05AC	0x781F80  	PUSH	W0
0x05AE	0xEF2000  	CLR	W0
0x05B0	0x781F80  	PUSH	W0
0x05B2	0xEF2000  	CLR	W0
0x05B4	0x781F80  	PUSH	W0
0x05B6	0x07FE49  	RCALL	_SPI2_Init_Advanced
0x05B8	0xB1008F  	SUB	#8, W15
;tiempo_rtc.c,138 :: 		valueRead = DS3234_read_byte(Segundos_Lec);
0x05BA	0xEF2014  	CLR	W10
0x05BC	0x07FE5D  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,139 :: 		valueRead = Bcd2Dec(valueRead);
0x05BE	0x784500  	MOV.B	W0, W10
0x05C0	0x07FE9B  	RCALL	_Bcd2Dec
;tiempo_rtc.c,140 :: 		segundo = (long)valueRead;
; segundo start address is: 12 (W6)
0x05C2	0xFB8300  	ZE	W0, W6
0x05C4	0xEB0380  	CLR	W7
;tiempo_rtc.c,141 :: 		valueRead = DS3234_read_byte(Minutos_Lec);
0x05C6	0xB3C01A  	MOV.B	#1, W10
0x05C8	0x07FE57  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,142 :: 		valueRead = Bcd2Dec(valueRead);
0x05CA	0x784500  	MOV.B	W0, W10
0x05CC	0x07FE95  	RCALL	_Bcd2Dec
;tiempo_rtc.c,143 :: 		minuto = (long)valueRead;
; minuto start address is: 16 (W8)
0x05CE	0xFB8400  	ZE	W0, W8
0x05D0	0xEB0480  	CLR	W9
;tiempo_rtc.c,144 :: 		valueRead = DS3234_read_byte(Horas_Lec);
0x05D2	0xB3C02A  	MOV.B	#2, W10
0x05D4	0x07FE51  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,145 :: 		valueRead = Bcd2Dec(valueRead);
0x05D6	0x784500  	MOV.B	W0, W10
0x05D8	0x07FE8F  	RCALL	_Bcd2Dec
;tiempo_rtc.c,146 :: 		hora = (long)valueRead;
0x05DA	0xFB8000  	ZE	W0, W0
0x05DC	0xEB0080  	CLR	W1
;tiempo_rtc.c,148 :: 		horaRTC = (hora*3600)+(minuto*60)+(segundo);                               //Calcula el segundo actual = hh*3600 + mm*60 + ss
0x05DE	0x20E102  	MOV	#3600, W2
0x05E0	0x200003  	MOV	#0, W3
0x05E2	0x07FEE0  	RCALL	__Multiply_32x32
0x05E4	0x980700  	MOV	W0, [W14+0]
0x05E6	0x980711  	MOV	W1, [W14+2]
0x05E8	0xBE0008  	MOV.D	W8, W0
0x05EA	0x2003C2  	MOV	#60, W2
0x05EC	0x200003  	MOV	#0, W3
0x05EE	0x07FEDA  	RCALL	__Multiply_32x32
; minuto end address is: 16 (W8)
0x05F0	0x90010E  	MOV	[W14+0], W2
0x05F2	0x90019E  	MOV	[W14+2], W3
0x05F4	0x410000  	ADD	W2, W0, W0
0x05F6	0x498081  	ADDC	W3, W1, W1
; horaRTC start address is: 4 (W2)
0x05F8	0x400106  	ADD	W0, W6, W2
0x05FA	0x488187  	ADDC	W1, W7, W3
; segundo end address is: 12 (W6)
;tiempo_rtc.c,150 :: 		SPI2_Init();
0x05FC	0x07FF9D  	RCALL	_SPI2_Init
;tiempo_rtc.c,152 :: 		return horaRTC;
0x05FE	0xBE0002  	MOV.D	W2, W0
; horaRTC end address is: 4 (W2)
;tiempo_rtc.c,154 :: 		}
;tiempo_rtc.c,152 :: 		return horaRTC;
;tiempo_rtc.c,154 :: 		}
L_end_RecuperarHoraRTC:
0x0600	0x7806CF  	POP	W13
0x0602	0x78064F  	POP	W12
0x0604	0x7805CF  	POP	W11
0x0606	0x78054F  	POP	W10
0x0608	0xFA8000  	ULNK
0x060A	0x060000  	RETURN
; end of _RecuperarHoraRTC
_DS3234_read_byte:
;tiempo_rtc.c,75 :: 		unsigned char DS3234_read_byte(unsigned char address){
;tiempo_rtc.c,77 :: 		unsigned char value = 0x00;
0x0278	0x781F8A  	PUSH	W10
;tiempo_rtc.c,78 :: 		CS_DS3234 = 0;
0x027A	0xA94E04  	BCLR	LATA2_bit, BitPos(LATA2_bit+0)
;tiempo_rtc.c,79 :: 		SPI2_Write(address);
0x027C	0xFB850A  	ZE	W10, W10
0x027E	0x070005  	RCALL	_SPI2_Write
;tiempo_rtc.c,80 :: 		value = SPI2_Read(0);
0x0280	0xEF2014  	CLR	W10
0x0282	0x07FFC7  	RCALL	_SPI2_Read
;tiempo_rtc.c,81 :: 		CS_DS3234 = 1;
0x0284	0xA84E04  	BSET	LATA2_bit, BitPos(LATA2_bit+0)
;tiempo_rtc.c,82 :: 		return value;
;tiempo_rtc.c,84 :: 		}
;tiempo_rtc.c,82 :: 		return value;
;tiempo_rtc.c,84 :: 		}
L_end_DS3234_read_byte:
0x0286	0x78054F  	POP	W10
0x0288	0x060000  	RETURN
; end of _DS3234_read_byte
_Bcd2Dec:
0x02F8	0xFA0000  	LNK	#0
;__Lib_Conversions.c,319 :: 		
;__Lib_Conversions.c,320 :: 		
;__Lib_Conversions.c,322 :: 		
0x02FA	0xFB800A  	ZE	W10, W0
0x02FC	0xDE0044  	LSR	W0, #4, W0
0x02FE	0xFB8080  	ZE	W0, W1
0x0300	0x2000A0  	MOV	#10, W0
0x0302	0xB80A00  	MUL.UU	W1, W0, W4
;__Lib_Conversions.c,323 :: 		
0x0304	0xFB800A  	ZE	W10, W0
0x0306	0x60016F  	AND	W0, #15, W2
0x0308	0xFB8004  	ZE	W4, W0
0x030A	0x400002  	ADD	W0, W2, W0
;__Lib_Conversions.c,324 :: 		
;__Lib_Conversions.c,325 :: 		
L_end_Bcd2Dec:
0x030C	0xFA8000  	ULNK
0x030E	0x060000  	RETURN
; end of _Bcd2Dec
_RecuperarFechaRTC:
0x063E	0xFA0004  	LNK	#4
;tiempo_rtc.c,157 :: 		unsigned long RecuperarFechaRTC(){
;tiempo_rtc.c,165 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x0640	0x781F8A  	PUSH	W10
0x0642	0x781F8B  	PUSH	W11
0x0644	0x781F8C  	PUSH	W12
0x0646	0x781F8D  	PUSH	W13
0x0648	0xEF201A  	CLR	W13
0x064A	0x2001CC  	MOV	#28, W12
0x064C	0xEF2016  	CLR	W11
0x064E	0x20020A  	MOV	#32, W10
0x0650	0xEF2000  	CLR	W0
0x0652	0x781F80  	PUSH	W0
0x0654	0xEF2000  	CLR	W0
0x0656	0x781F80  	PUSH	W0
0x0658	0xEF2000  	CLR	W0
0x065A	0x781F80  	PUSH	W0
0x065C	0xEF2000  	CLR	W0
0x065E	0x781F80  	PUSH	W0
0x0660	0x07FDF4  	RCALL	_SPI2_Init_Advanced
0x0662	0xB1008F  	SUB	#8, W15
;tiempo_rtc.c,167 :: 		valueRead = DS3234_read_byte(DiaMes_Lec);
0x0664	0xB3C04A  	MOV.B	#4, W10
0x0666	0x07FE08  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,168 :: 		valueRead = Bcd2Dec(valueRead);
0x0668	0x784500  	MOV.B	W0, W10
0x066A	0x07FE46  	RCALL	_Bcd2Dec
;tiempo_rtc.c,169 :: 		dia = (long)valueRead;
; dia start address is: 12 (W6)
0x066C	0xFB8300  	ZE	W0, W6
0x066E	0xEB0380  	CLR	W7
;tiempo_rtc.c,170 :: 		valueRead = 0x1F & DS3234_read_byte(Mes_Lec);
0x0670	0xB3C05A  	MOV.B	#5, W10
0x0672	0x07FE02  	RCALL	_DS3234_read_byte
0x0674	0xFB8000  	ZE	W0, W0
0x0676	0x60007F  	AND	W0, #31, W0
;tiempo_rtc.c,171 :: 		valueRead = Bcd2Dec(valueRead);
0x0678	0x784500  	MOV.B	W0, W10
0x067A	0x07FE3E  	RCALL	_Bcd2Dec
;tiempo_rtc.c,172 :: 		mes = (long)valueRead;
; mes start address is: 16 (W8)
0x067C	0xFB8400  	ZE	W0, W8
0x067E	0xEB0480  	CLR	W9
;tiempo_rtc.c,173 :: 		valueRead = DS3234_read_byte(Anio_Lec);
0x0680	0xB3C06A  	MOV.B	#6, W10
0x0682	0x07FDFA  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,174 :: 		valueRead = Bcd2Dec(valueRead);
0x0684	0x784500  	MOV.B	W0, W10
0x0686	0x07FE38  	RCALL	_Bcd2Dec
;tiempo_rtc.c,175 :: 		anio = (long)valueRead;
0x0688	0xFB8000  	ZE	W0, W0
0x068A	0xEB0080  	CLR	W1
;tiempo_rtc.c,177 :: 		fechaRTC = (anio*10000)+(mes*100)+(dia);                                   //10000*aa + 100*mm + dd
0x068C	0x227102  	MOV	#10000, W2
0x068E	0x200003  	MOV	#0, W3
0x0690	0x07FE89  	RCALL	__Multiply_32x32
0x0692	0x980700  	MOV	W0, [W14+0]
0x0694	0x980711  	MOV	W1, [W14+2]
0x0696	0xBE0008  	MOV.D	W8, W0
0x0698	0x200642  	MOV	#100, W2
0x069A	0x200003  	MOV	#0, W3
0x069C	0x07FE83  	RCALL	__Multiply_32x32
; mes end address is: 16 (W8)
0x069E	0x90010E  	MOV	[W14+0], W2
0x06A0	0x90019E  	MOV	[W14+2], W3
0x06A2	0x410000  	ADD	W2, W0, W0
0x06A4	0x498081  	ADDC	W3, W1, W1
; fechaRTC start address is: 4 (W2)
0x06A6	0x400106  	ADD	W0, W6, W2
0x06A8	0x488187  	ADDC	W1, W7, W3
; dia end address is: 12 (W6)
;tiempo_rtc.c,179 :: 		SPI2_Init();
0x06AA	0x07FF46  	RCALL	_SPI2_Init
;tiempo_rtc.c,181 :: 		return fechaRTC;
0x06AC	0xBE0002  	MOV.D	W2, W0
; fechaRTC end address is: 4 (W2)
;tiempo_rtc.c,183 :: 		}
;tiempo_rtc.c,181 :: 		return fechaRTC;
;tiempo_rtc.c,183 :: 		}
L_end_RecuperarFechaRTC:
0x06AE	0x7806CF  	POP	W13
0x06B0	0x78064F  	POP	W12
0x06B2	0x7805CF  	POP	W11
0x06B4	0x78054F  	POP	W10
0x06B6	0xFA8000  	ULNK
0x06B8	0x060000  	RETURN
; end of _RecuperarFechaRTC
_RecuperarHoraGPS:
0x0852	0xFA001C  	LNK	#28
;tiempo_gps.c,62 :: 		unsigned long RecuperarHoraGPS(unsigned char *tramaDatosGPS){
;tiempo_gps.c,67 :: 		char *ptrDatoString = &datoString;
0x0854	0x781F8A  	PUSH	W10
0x0856	0x470270  	ADD	W14, #16, W4
0x0858	0x980F54  	MOV	W4, [W14+26]
; ptrDatoString start address is: 12 (W6)
0x085A	0x780304  	MOV	W4, W6
;tiempo_gps.c,68 :: 		datoString[2] = '\0';
0x085C	0x4200E2  	ADD	W4, #2, W1
0x085E	0xEF2000  	CLR	W0
0x0860	0x784880  	MOV.B	W0, [W1]
;tiempo_gps.c,69 :: 		tramaTiempo[3] = '\0';
0x0862	0x4701E0  	ADD	W14, #0, W3
0x0864	0x980F43  	MOV	W3, [W14+24]
0x0866	0x41816C  	ADD	W3, #12, W2
0x0868	0xEF2000  	CLR	W0
0x086A	0xEF2002  	CLR	W1
0x086C	0xBE8900  	MOV.D	W0, [W2]
;tiempo_gps.c,72 :: 		datoString[0] = tramaDatosGPS[0];
0x086E	0x784A1A  	MOV.B	[W10], [W4]
;tiempo_gps.c,73 :: 		datoString[1] = tramaDatosGPS[1];
0x0870	0x4200E1  	ADD	W4, #1, W1
0x0872	0x450061  	ADD	W10, #1, W0
0x0874	0x784890  	MOV.B	[W0], [W1]
;tiempo_gps.c,74 :: 		tramaTiempo[0] = atoi(ptrDatoString);
0x0876	0x780003  	MOV	W3, W0
0x0878	0x980F20  	MOV	W0, [W14+20]
0x087A	0x781F8A  	PUSH	W10
0x087C	0x780506  	MOV	W6, W10
0x087E	0x07FD09  	RCALL	_atoi
0x0880	0x78054F  	POP	W10
0x0882	0x780080  	MOV	W0, W1
0x0884	0xDE894F  	ASR	W1, #15, W2
0x0886	0x90082E  	MOV	[W14+20], W0
0x0888	0x781801  	MOV	W1, [W0++]
0x088A	0x781002  	MOV	W2, [W0--]
;tiempo_gps.c,77 :: 		datoString[0] = tramaDatosGPS[2];
0x088C	0x4500E2  	ADD	W10, #2, W1
0x088E	0x90085E  	MOV	[W14+26], W0
0x0890	0x784811  	MOV.B	[W1], [W0]
;tiempo_gps.c,78 :: 		datoString[1] = tramaDatosGPS[3];
0x0892	0x4000E1  	ADD	W0, #1, W1
0x0894	0x450063  	ADD	W10, #3, W0
0x0896	0x784890  	MOV.B	[W0], [W1]
;tiempo_gps.c,79 :: 		tramaTiempo[1] = atoi(ptrDatoString);
0x0898	0x90084E  	MOV	[W14+24], W0
0x089A	0x400064  	ADD	W0, #4, W0
0x089C	0x980F20  	MOV	W0, [W14+20]
0x089E	0x781F8A  	PUSH	W10
0x08A0	0x780506  	MOV	W6, W10
0x08A2	0x07FCF7  	RCALL	_atoi
0x08A4	0x78054F  	POP	W10
0x08A6	0x780080  	MOV	W0, W1
0x08A8	0xDE894F  	ASR	W1, #15, W2
0x08AA	0x90082E  	MOV	[W14+20], W0
0x08AC	0x781801  	MOV	W1, [W0++]
0x08AE	0x781002  	MOV	W2, [W0--]
;tiempo_gps.c,82 :: 		datoString[0] = tramaDatosGPS[4];
0x08B0	0x4500E4  	ADD	W10, #4, W1
0x08B2	0x90085E  	MOV	[W14+26], W0
0x08B4	0x784811  	MOV.B	[W1], [W0]
;tiempo_gps.c,83 :: 		datoString[1] = tramaDatosGPS[5];
0x08B6	0x4000E1  	ADD	W0, #1, W1
0x08B8	0x450065  	ADD	W10, #5, W0
0x08BA	0x784890  	MOV.B	[W0], [W1]
;tiempo_gps.c,84 :: 		tramaTiempo[2] = atoi(ptrDatoString);
0x08BC	0x90084E  	MOV	[W14+24], W0
0x08BE	0x400068  	ADD	W0, #8, W0
0x08C0	0x980F20  	MOV	W0, [W14+20]
0x08C2	0x780506  	MOV	W6, W10
; ptrDatoString end address is: 12 (W6)
0x08C4	0x07FCE6  	RCALL	_atoi
0x08C6	0x780080  	MOV	W0, W1
0x08C8	0xDE894F  	ASR	W1, #15, W2
0x08CA	0x90082E  	MOV	[W14+20], W0
0x08CC	0x781801  	MOV	W1, [W0++]
0x08CE	0x781002  	MOV	W2, [W0--]
;tiempo_gps.c,86 :: 		horaGPS = (tramaTiempo[0]*3600)+(tramaTiempo[1]*60)+(tramaTiempo[2]);      //Calcula el segundo actual = hh*3600 + mm*60 + ss
0x08D0	0x90094E  	MOV	[W14+24], W2
0x08D2	0xBE0012  	MOV.D	[W2], W0
0x08D4	0x20E102  	MOV	#3600, W2
0x08D6	0x200003  	MOV	#0, W3
0x08D8	0x07FD65  	RCALL	__Multiply_32x32
0x08DA	0x90094E  	MOV	[W14+24], W2
0x08DC	0x980F20  	MOV	W0, [W14+20]
0x08DE	0x980F31  	MOV	W1, [W14+22]
0x08E0	0x410164  	ADD	W2, #4, W2
0x08E2	0xBE0012  	MOV.D	[W2], W0
0x08E4	0x2003C2  	MOV	#60, W2
0x08E6	0x200003  	MOV	#0, W3
0x08E8	0x07FD5D  	RCALL	__Multiply_32x32
0x08EA	0x90092E  	MOV	[W14+20], W2
0x08EC	0x9009BE  	MOV	[W14+22], W3
0x08EE	0x410200  	ADD	W2, W0, W4
0x08F0	0x498281  	ADDC	W3, W1, W5
0x08F2	0x90084E  	MOV	[W14+24], W0
0x08F4	0x400168  	ADD	W0, #8, W2
0x08F6	0x420032  	ADD	W4, [W2++], W0
0x08F8	0x4A80A2  	ADDC	W5, [W2--], W1
;tiempo_gps.c,87 :: 		return horaGPS;
;tiempo_gps.c,89 :: 		}
;tiempo_gps.c,87 :: 		return horaGPS;
;tiempo_gps.c,89 :: 		}
L_end_RecuperarHoraGPS:
0x08FA	0x78054F  	POP	W10
0x08FC	0xFA8000  	ULNK
0x08FE	0x060000  	RETURN
; end of _RecuperarHoraGPS
_atoi:
0x0292	0xFA0000  	LNK	#0
;__Lib_CStdlib.c,181 :: 		
;__Lib_CStdlib.c,186 :: 		
___atoi_skipws_atoi:
;__Lib_CStdlib.c,187 :: 		
; c start address is: 4 (W2)
0x0294	0xFB811A  	ZE	[W10], W2
;__Lib_CStdlib.c,188 :: 		
0x0296	0x200200  	MOV	#32, W0
0x0298	0xE11000  	CP	W2, W0
0x029A	0x320003  	BRA Z	L__atoi99
L__atoi136:
0x029C	0xE11069  	CP	W2, #9
0x029E	0x320001  	BRA Z	L__atoi98
L__atoi137:
0x02A0	0x370003  	BRA	L_atoi55
L__atoi99:
L__atoi98:
;__Lib_CStdlib.c,189 :: 		
0x02A2	0x450061  	ADD	W10, #1, W0
0x02A4	0x780500  	MOV	W0, W10
;__Lib_CStdlib.c,190 :: 		
0x02A6	0x37FFF6  	BRA	___atoi_skipws_atoi
;__Lib_CStdlib.c,191 :: 		
L_atoi55:
;__Lib_CStdlib.c,192 :: 		
; a start address is: 2 (W1)
0x02A8	0xEF2002  	CLR	W1
;__Lib_CStdlib.c,193 :: 		
; sign start address is: 6 (W3)
0x02AA	0xEF2006  	CLR	W3
;__Lib_CStdlib.c,194 :: 		
0x02AC	0x2002D0  	MOV	#45, W0
0x02AE	0xE11000  	CP	W2, W0
0x02B0	0x3A0005  	BRA NZ	L_atoi56
L__atoi138:
; c end address is: 4 (W2)
;__Lib_CStdlib.c,195 :: 		
; sign start address is: 4 (W2)
0x02B2	0x418161  	ADD	W3, #1, W2
; sign end address is: 6 (W3)
;__Lib_CStdlib.c,196 :: 		
0x02B4	0x450061  	ADD	W10, #1, W0
0x02B6	0x780500  	MOV	W0, W10
;__Lib_CStdlib.c,197 :: 		
0x02B8	0x780002  	MOV	W2, W0
; sign end address is: 4 (W2)
0x02BA	0x370006  	BRA	L_atoi57
L_atoi56:
;__Lib_CStdlib.c,199 :: 		
; sign start address is: 6 (W3)
; c start address is: 4 (W2)
0x02BC	0x2002B0  	MOV	#43, W0
0x02BE	0xE11000  	CP	W2, W0
0x02C0	0x3A0002  	BRA NZ	L_atoi58
L__atoi139:
; c end address is: 4 (W2)
;__Lib_CStdlib.c,200 :: 		
0x02C2	0x450061  	ADD	W10, #1, W0
0x02C4	0x780500  	MOV	W0, W10
L_atoi58:
0x02C6	0x780003  	MOV	W3, W0
L_atoi57:
; sign end address is: 6 (W3)
;__Lib_CStdlib.c,201 :: 		
; sign start address is: 0 (W0)
0x02C8	0x780281  	MOV	W1, W5
; a end address is: 2 (W1)
; sign end address is: 0 (W0)
0x02CA	0x780080  	MOV	W0, W1
___atoi_conv_atoi:
;__Lib_CStdlib.c,202 :: 		
; sign start address is: 2 (W1)
; a start address is: 10 (W5)
; c start address is: 8 (W4)
0x02CC	0xFB821A  	ZE	[W10], W4
;__Lib_CStdlib.c,203 :: 		
0x02CE	0x781F8A  	PUSH	W10
0x02D0	0x784504  	MOV.B	W4, W10
0x02D2	0x07FFAB  	RCALL	_isdigit
0x02D4	0x78054F  	POP	W10
0x02D6	0xE20000  	CP0	W0
0x02D8	0x320008  	BRA Z	L_atoi59
L__atoi140:
;__Lib_CStdlib.c,204 :: 		
0x02DA	0x2000A0  	MOV	#10, W0
0x02DC	0xB9A900  	MUL.SS	W5, W0, W2
; a end address is: 10 (W5)
0x02DE	0x200300  	MOV	#48, W0
0x02E0	0x520000  	SUB	W4, W0, W0
; a start address is: 10 (W5)
0x02E2	0x410280  	ADD	W2, W0, W5
;__Lib_CStdlib.c,205 :: 		
0x02E4	0x450061  	ADD	W10, #1, W0
0x02E6	0x780500  	MOV	W0, W10
;__Lib_CStdlib.c,206 :: 		
; c end address is: 8 (W4)
0x02E8	0x37FFF1  	BRA	___atoi_conv_atoi
;__Lib_CStdlib.c,207 :: 		
L_atoi59:
;__Lib_CStdlib.c,208 :: 		
0x02EA	0xE20002  	CP0	W1
0x02EC	0x320002  	BRA Z	L_atoi60
L__atoi141:
; sign end address is: 2 (W1)
;__Lib_CStdlib.c,209 :: 		
0x02EE	0x128060  	SUBR	W5, #0, W0
; a end address is: 10 (W5)
0x02F0	0x370001  	BRA	L_end_atoi
L_atoi60:
;__Lib_CStdlib.c,210 :: 		
; a start address is: 10 (W5)
0x02F2	0x780005  	MOV	W5, W0
; a end address is: 10 (W5)
;__Lib_CStdlib.c,211 :: 		
L_end_atoi:
0x02F4	0xFA8000  	ULNK
0x02F6	0x060000  	RETURN
; end of _atoi
_isdigit:
0x022A	0xFA0000  	LNK	#0
;__Lib_CType.c,23 :: 		
;__Lib_CType.c,24 :: 		
0x022C	0xB3C390  	MOV.B	#57, W0
0x022E	0xE15400  	CP.B	W10, W0
0x0230	0x3E0005  	BRA GTU	L_isdigit9
L__isdigit58:
0x0232	0xB3C300  	MOV.B	#48, W0
0x0234	0xE15400  	CP.B	W10, W0
0x0236	0x390002  	BRA LTU	L_isdigit9
L__isdigit59:
0x0238	0xB3C010  	MOV.B	#1, W0
0x023A	0x370001  	BRA	L_isdigit8
L_isdigit9:
0x023C	0xEF2000  	CLR	W0
L_isdigit8:
0x023E	0xFB8000  	ZE	W0, W0
;__Lib_CType.c,25 :: 		
L_end_isdigit:
0x0240	0xFA8000  	ULNK
0x0242	0x060000  	RETURN
; end of _isdigit
_RecuperarFechaGPS:
0x07A2	0xFA001C  	LNK	#28
;tiempo_gps.c,31 :: 		unsigned long RecuperarFechaGPS(unsigned char *tramaDatosGPS){
;tiempo_gps.c,36 :: 		char *ptrDatoStringF = &datoStringF;
0x07A4	0x781F8A  	PUSH	W10
0x07A6	0x470270  	ADD	W14, #16, W4
0x07A8	0x980F54  	MOV	W4, [W14+26]
; ptrDatoStringF start address is: 12 (W6)
0x07AA	0x780304  	MOV	W4, W6
;tiempo_gps.c,37 :: 		datoStringF[2] = '\0';
0x07AC	0x4200E2  	ADD	W4, #2, W1
0x07AE	0xEF2000  	CLR	W0
0x07B0	0x784880  	MOV.B	W0, [W1]
;tiempo_gps.c,38 :: 		tramaFecha[3] = '\0';
0x07B2	0x4701E0  	ADD	W14, #0, W3
0x07B4	0x980F43  	MOV	W3, [W14+24]
0x07B6	0x41816C  	ADD	W3, #12, W2
0x07B8	0xEF2000  	CLR	W0
0x07BA	0xEF2002  	CLR	W1
0x07BC	0xBE8900  	MOV.D	W0, [W2]
;tiempo_gps.c,41 :: 		datoStringF[0] = tramaDatosGPS[10];
0x07BE	0x45006A  	ADD	W10, #10, W0
0x07C0	0x784A10  	MOV.B	[W0], [W4]
;tiempo_gps.c,42 :: 		datoStringF[1] = tramaDatosGPS[11];
0x07C2	0x4200E1  	ADD	W4, #1, W1
0x07C4	0x45006B  	ADD	W10, #11, W0
0x07C6	0x784890  	MOV.B	[W0], [W1]
;tiempo_gps.c,43 :: 		tramaFecha[0] = atoi(ptrDatoStringF);
0x07C8	0x780003  	MOV	W3, W0
0x07CA	0x980F20  	MOV	W0, [W14+20]
0x07CC	0x781F8A  	PUSH	W10
0x07CE	0x780506  	MOV	W6, W10
0x07D0	0x07FD60  	RCALL	_atoi
0x07D2	0x78054F  	POP	W10
0x07D4	0x780080  	MOV	W0, W1
0x07D6	0xDE894F  	ASR	W1, #15, W2
0x07D8	0x90082E  	MOV	[W14+20], W0
0x07DA	0x781801  	MOV	W1, [W0++]
0x07DC	0x781002  	MOV	W2, [W0--]
;tiempo_gps.c,46 :: 		datoStringF[0] = tramaDatosGPS[8];
0x07DE	0x4500E8  	ADD	W10, #8, W1
0x07E0	0x90085E  	MOV	[W14+26], W0
0x07E2	0x784811  	MOV.B	[W1], [W0]
;tiempo_gps.c,47 :: 		datoStringF[1] = tramaDatosGPS[9];
0x07E4	0x4000E1  	ADD	W0, #1, W1
0x07E6	0x450069  	ADD	W10, #9, W0
0x07E8	0x784890  	MOV.B	[W0], [W1]
;tiempo_gps.c,48 :: 		tramaFecha[1] = atoi(ptrDatoStringF);
0x07EA	0x90084E  	MOV	[W14+24], W0
0x07EC	0x400064  	ADD	W0, #4, W0
0x07EE	0x980F20  	MOV	W0, [W14+20]
0x07F0	0x781F8A  	PUSH	W10
0x07F2	0x780506  	MOV	W6, W10
0x07F4	0x07FD4E  	RCALL	_atoi
0x07F6	0x78054F  	POP	W10
0x07F8	0x780080  	MOV	W0, W1
0x07FA	0xDE894F  	ASR	W1, #15, W2
0x07FC	0x90082E  	MOV	[W14+20], W0
0x07FE	0x781801  	MOV	W1, [W0++]
0x0800	0x781002  	MOV	W2, [W0--]
;tiempo_gps.c,51 :: 		datoStringF[0] = tramaDatosGPS[6];
0x0802	0x4500E6  	ADD	W10, #6, W1
0x0804	0x90085E  	MOV	[W14+26], W0
0x0806	0x784811  	MOV.B	[W1], [W0]
;tiempo_gps.c,52 :: 		datoStringF[1] = tramaDatosGPS[7];
0x0808	0x4000E1  	ADD	W0, #1, W1
0x080A	0x450067  	ADD	W10, #7, W0
0x080C	0x784890  	MOV.B	[W0], [W1]
;tiempo_gps.c,53 :: 		tramaFecha[2] =  atoi(ptrDatoStringF);
0x080E	0x90084E  	MOV	[W14+24], W0
0x0810	0x400068  	ADD	W0, #8, W0
0x0812	0x980F20  	MOV	W0, [W14+20]
0x0814	0x780506  	MOV	W6, W10
; ptrDatoStringF end address is: 12 (W6)
0x0816	0x07FD3D  	RCALL	_atoi
0x0818	0x780080  	MOV	W0, W1
0x081A	0xDE894F  	ASR	W1, #15, W2
0x081C	0x90082E  	MOV	[W14+20], W0
0x081E	0x781801  	MOV	W1, [W0++]
0x0820	0x781002  	MOV	W2, [W0--]
;tiempo_gps.c,55 :: 		fechaGPS = (tramaFecha[0]*10000)+(tramaFecha[1]*100)+(tramaFecha[2]);      //10000*aa + 100*mm + dd
0x0822	0x90094E  	MOV	[W14+24], W2
0x0824	0xBE0012  	MOV.D	[W2], W0
0x0826	0x227102  	MOV	#10000, W2
0x0828	0x200003  	MOV	#0, W3
0x082A	0x07FDBC  	RCALL	__Multiply_32x32
0x082C	0x90094E  	MOV	[W14+24], W2
0x082E	0x980F20  	MOV	W0, [W14+20]
0x0830	0x980F31  	MOV	W1, [W14+22]
0x0832	0x410164  	ADD	W2, #4, W2
0x0834	0xBE0012  	MOV.D	[W2], W0
0x0836	0x200642  	MOV	#100, W2
0x0838	0x200003  	MOV	#0, W3
0x083A	0x07FDB4  	RCALL	__Multiply_32x32
0x083C	0x90092E  	MOV	[W14+20], W2
0x083E	0x9009BE  	MOV	[W14+22], W3
0x0840	0x410200  	ADD	W2, W0, W4
0x0842	0x498281  	ADDC	W3, W1, W5
0x0844	0x90084E  	MOV	[W14+24], W0
0x0846	0x400168  	ADD	W0, #8, W2
0x0848	0x420032  	ADD	W4, [W2++], W0
0x084A	0x4A80A2  	ADDC	W5, [W2--], W1
;tiempo_gps.c,57 :: 		return fechaGPS;
;tiempo_gps.c,59 :: 		}
;tiempo_gps.c,57 :: 		return fechaGPS;
;tiempo_gps.c,59 :: 		}
L_end_RecuperarFechaGPS:
0x084C	0x78054F  	POP	W10
0x084E	0xFA8000  	ULNK
0x0850	0x060000  	RETURN
; end of _RecuperarFechaGPS
_DS3234_setDate:
0x06BA	0xFA000E  	LNK	#14
;tiempo_rtc.c,87 :: 		void DS3234_setDate(unsigned long longHora, unsigned long longFecha){
;tiempo_rtc.c,97 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x06BC	0x781F8A  	PUSH	W10
0x06BE	0x781F8B  	PUSH	W11
0x06C0	0xBE9F8C  	PUSH.D	W12
0x06C2	0xBE9F8A  	PUSH.D	W10
0x06C4	0xEF201A  	CLR	W13
0x06C6	0x2001CC  	MOV	#28, W12
0x06C8	0xEF2016  	CLR	W11
0x06CA	0x20020A  	MOV	#32, W10
0x06CC	0xEF2000  	CLR	W0
0x06CE	0x781F80  	PUSH	W0
0x06D0	0xEF2000  	CLR	W0
0x06D2	0x781F80  	PUSH	W0
0x06D4	0xEF2000  	CLR	W0
0x06D6	0x781F80  	PUSH	W0
0x06D8	0xEF2000  	CLR	W0
0x06DA	0x781F80  	PUSH	W0
0x06DC	0x07FDB6  	RCALL	_SPI2_Init_Advanced
0x06DE	0xB1008F  	SUB	#8, W15
0x06E0	0xBE054F  	POP.D	W10
;tiempo_rtc.c,99 :: 		hora = (short)(longHora / 3600);
0x06E2	0xBE9F8A  	PUSH.D	W10
0x06E4	0x20E102  	MOV	#3600, W2
0x06E6	0x200003  	MOV	#0, W3
0x06E8	0xBE000A  	MOV.D	W10, W0
0x06EA	0xEB0200  	CLR	W4
0x06EC	0x07FEE5  	RCALL	__Divide_32x32
0x06EE	0xBE054F  	POP.D	W10
0x06F0	0x984700  	MOV.B	W0, [W14+0]
;tiempo_rtc.c,100 :: 		minuto = (short)((longHora%3600) / 60);
0x06F2	0x20E102  	MOV	#3600, W2
0x06F4	0x200003  	MOV	#0, W3
0x06F6	0xBE000A  	MOV.D	W10, W0
0x06F8	0xEB0200  	CLR	W4
0x06FA	0x07FE28  	RCALL	__Modulus_32x32
0x06FC	0x980750  	MOV	W0, [W14+10]
0x06FE	0x980761  	MOV	W1, [W14+12]
0x0700	0x2003C2  	MOV	#60, W2
0x0702	0x200003  	MOV	#0, W3
0x0704	0xEB0200  	CLR	W4
0x0706	0x07FED8  	RCALL	__Divide_32x32
0x0708	0x984710  	MOV.B	W0, [W14+1]
;tiempo_rtc.c,101 :: 		segundo = (short)((longHora%3600) % 60);
0x070A	0x90005E  	MOV	[W14+10], W0
0x070C	0x9000EE  	MOV	[W14+12], W1
0x070E	0x2003C2  	MOV	#60, W2
0x0710	0x200003  	MOV	#0, W3
0x0712	0xEB0200  	CLR	W4
0x0714	0x07FE1B  	RCALL	__Modulus_32x32
0x0716	0xBE064F  	POP.D	W12
0x0718	0x984720  	MOV.B	W0, [W14+2]
;tiempo_rtc.c,103 :: 		dia = (short)(longFecha / 10000);
0x071A	0xBE9F8C  	PUSH.D	W12
0x071C	0x227102  	MOV	#10000, W2
0x071E	0x200003  	MOV	#0, W3
0x0720	0xBE000C  	MOV.D	W12, W0
0x0722	0xEB0200  	CLR	W4
0x0724	0x07FEC9  	RCALL	__Divide_32x32
0x0726	0xBE064F  	POP.D	W12
0x0728	0x984730  	MOV.B	W0, [W14+3]
;tiempo_rtc.c,104 :: 		mes = (short)((longFecha%10000) / 100);
0x072A	0x227102  	MOV	#10000, W2
0x072C	0x200003  	MOV	#0, W3
0x072E	0xBE000C  	MOV.D	W12, W0
0x0730	0xEB0200  	CLR	W4
0x0732	0x07FE0C  	RCALL	__Modulus_32x32
0x0734	0x980750  	MOV	W0, [W14+10]
0x0736	0x980761  	MOV	W1, [W14+12]
0x0738	0x200642  	MOV	#100, W2
0x073A	0x200003  	MOV	#0, W3
0x073C	0xEB0200  	CLR	W4
0x073E	0x07FEBC  	RCALL	__Divide_32x32
0x0740	0x984740  	MOV.B	W0, [W14+4]
;tiempo_rtc.c,105 :: 		anio = (short)((longFecha%10000) % 100);
0x0742	0x90005E  	MOV	[W14+10], W0
0x0744	0x9000EE  	MOV	[W14+12], W1
0x0746	0x200642  	MOV	#100, W2
0x0748	0x200003  	MOV	#0, W3
0x074A	0xEB0200  	CLR	W4
0x074C	0x07FDFF  	RCALL	__Modulus_32x32
; anio start address is: 8 (W4)
0x074E	0x784200  	MOV.B	W0, W4
;tiempo_rtc.c,107 :: 		segundo = Dec2Bcd(segundo);
0x0750	0x90452E  	MOV.B	[W14+2], W10
0x0752	0x07FDE7  	RCALL	_Dec2Bcd
0x0754	0x984720  	MOV.B	W0, [W14+2]
;tiempo_rtc.c,108 :: 		minuto = Dec2Bcd(minuto);
0x0756	0x90451E  	MOV.B	[W14+1], W10
0x0758	0x07FDE4  	RCALL	_Dec2Bcd
0x075A	0x984710  	MOV.B	W0, [W14+1]
;tiempo_rtc.c,109 :: 		hora = Dec2Bcd(hora);
0x075C	0x90450E  	MOV.B	[W14+0], W10
0x075E	0x07FDE1  	RCALL	_Dec2Bcd
0x0760	0x984700  	MOV.B	W0, [W14+0]
;tiempo_rtc.c,110 :: 		dia = Dec2Bcd(dia);
0x0762	0x90453E  	MOV.B	[W14+3], W10
0x0764	0x07FDDE  	RCALL	_Dec2Bcd
0x0766	0x984730  	MOV.B	W0, [W14+3]
;tiempo_rtc.c,111 :: 		mes = Dec2Bcd(mes);
0x0768	0x90454E  	MOV.B	[W14+4], W10
0x076A	0x07FDDB  	RCALL	_Dec2Bcd
0x076C	0x984740  	MOV.B	W0, [W14+4]
;tiempo_rtc.c,112 :: 		anio = Dec2Bcd(anio);
0x076E	0x784504  	MOV.B	W4, W10
; anio end address is: 8 (W4)
0x0770	0x07FDD8  	RCALL	_Dec2Bcd
; anio start address is: 2 (W1)
0x0772	0x784080  	MOV.B	W0, W1
;tiempo_rtc.c,114 :: 		DS3234_write_byte(Segundos_Esc, segundo);
0x0774	0x9045AE  	MOV.B	[W14+2], W11
0x0776	0xB3C80A  	MOV.B	#128, W10
0x0778	0x07FDCB  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,115 :: 		DS3234_write_byte(Minutos_Esc, minuto);
0x077A	0x90459E  	MOV.B	[W14+1], W11
0x077C	0xB3C81A  	MOV.B	#129, W10
0x077E	0x07FDC8  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,116 :: 		DS3234_write_byte(Horas_Esc, hora);
0x0780	0x90458E  	MOV.B	[W14+0], W11
0x0782	0xB3C82A  	MOV.B	#130, W10
0x0784	0x07FDC5  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,117 :: 		DS3234_write_byte(DiaMes_Esc, dia);
0x0786	0x9045BE  	MOV.B	[W14+3], W11
0x0788	0xB3C84A  	MOV.B	#132, W10
0x078A	0x07FDC2  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,118 :: 		DS3234_write_byte(Mes_Esc, mes);
0x078C	0x9045CE  	MOV.B	[W14+4], W11
0x078E	0xB3C85A  	MOV.B	#133, W10
0x0790	0x07FDBF  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,119 :: 		DS3234_write_byte(Anio_Esc, anio);
0x0792	0x784581  	MOV.B	W1, W11
; anio end address is: 2 (W1)
0x0794	0xB3C86A  	MOV.B	#134, W10
0x0796	0x07FDBC  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,121 :: 		SPI2_Init();
0x0798	0x07FECF  	RCALL	_SPI2_Init
;tiempo_rtc.c,125 :: 		}
;tiempo_rtc.c,123 :: 		return;
;tiempo_rtc.c,125 :: 		}
L_end_DS3234_setDate:
0x079A	0x7805CF  	POP	W11
0x079C	0x78054F  	POP	W10
0x079E	0xFA8000  	ULNK
0x07A0	0x060000  	RETURN
; end of _DS3234_setDate
_Dec2Bcd:
0x0322	0xFA0000  	LNK	#0
;__Lib_Conversions.c,304 :: 		
;__Lib_Conversions.c,305 :: 		
;__Lib_Conversions.c,307 :: 		
0x0324	0xE15469  	CP.B	W10, #9
0x0326	0x36000E  	BRA LEU	L_Dec2Bcd64
L__Dec2Bcd161:
;__Lib_Conversions.c,308 :: 		
0x0328	0xFB800A  	ZE	W10, W0
0x032A	0x2000A2  	MOV	#10, W2
0x032C	0x090011  	REPEAT	#17
0x032E	0xD80002  	DIV.S	W0, W2
;__Lib_Conversions.c,309 :: 		
0x0330	0xFB8000  	ZE	W0, W0
0x0332	0xDD0044  	SL	W0, #4, W0
; tmp start address is: 6 (W3)
0x0334	0x784180  	MOV.B	W0, W3
;__Lib_Conversions.c,310 :: 		
0x0336	0xFB800A  	ZE	W10, W0
0x0338	0x2000A2  	MOV	#10, W2
0x033A	0x090011  	REPEAT	#17
0x033C	0xD80002  	DIV.S	W0, W2
0x033E	0x780001  	MOV	W1, W0
; tmp start address is: 2 (W1)
0x0340	0x71C080  	IOR.B	W3, W0, W1
; tmp end address is: 6 (W3)
;__Lib_Conversions.c,311 :: 		
; tmp end address is: 2 (W1)
0x0342	0x370001  	BRA	L_Dec2Bcd65
L_Dec2Bcd64:
;__Lib_Conversions.c,312 :: 		
; tmp start address is: 2 (W1)
0x0344	0x78408A  	MOV.B	W10, W1
; tmp end address is: 2 (W1)
L_Dec2Bcd65:
;__Lib_Conversions.c,313 :: 		
; tmp start address is: 2 (W1)
0x0346	0x784001  	MOV.B	W1, W0
; tmp end address is: 2 (W1)
;__Lib_Conversions.c,314 :: 		
L_end_Dec2Bcd:
0x0348	0xFA8000  	ULNK
0x034A	0x060000  	RETURN
; end of _Dec2Bcd
_spi_1:
0x123E	0xF80034  	PUSH	DSWPAG
0x1240	0xF80032  	PUSH	DSRPAG
0x1242	0xF80036  	PUSH	RCOUNT
0x1244	0x781F80  	PUSH	W0
0x1246	0x200020  	MOV	#2, W0
0x1248	0x09000C  	REPEAT	#12
0x124A	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,313 :: 		void spi_1() org  IVT_ADDR_SPI1INTERRUPT {
;Acelerografo.c,315 :: 		SPI1IF_bit = 0;                                                            //Limpia la bandera de interrupcion por SPI
0x124C	0x781F8A  	PUSH	W10
0x124E	0x781F8B  	PUSH	W11
0x1250	0x781F8C  	PUSH	W12
0x1252	0x781F8D  	PUSH	W13
0x1254	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Acelerografo.c,316 :: 		buffer = SPI1BUF;                                                          //Guarda el contenido del bufeer (lectura)
0x1256	0x21AD91  	MOV	#lo_addr(_buffer), W1
0x1258	0xBFC248  	MOV.B	SPI1BUF, WREG
0x125A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,320 :: 		if ((banOperacion==0)&&(buffer==0xA0)) {
0x125C	0x21B360  	MOV	#lo_addr(_banOperacion), W0
0x125E	0x784010  	MOV.B	[W0], W0
0x1260	0xE10460  	CP.B	W0, #0
0x1262	0x3A000B  	BRA NZ	L__spi_1202
L__spi_1299:
0x1264	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x1266	0x784090  	MOV.B	[W0], W1
0x1268	0xB3CA00  	MOV.B	#160, W0
0x126A	0xE10C00  	CP.B	W1, W0
0x126C	0x3A0006  	BRA NZ	L__spi_1201
L__spi_1300:
L__spi_1200:
;Acelerografo.c,321 :: 		banOperacion = 1;                                                       //Activa la bandera para enviar el tipo de operacion requerido a la RPi
0x126E	0x21B361  	MOV	#lo_addr(_banOperacion), W1
0x1270	0xB3C010  	MOV.B	#1, W0
0x1272	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,322 :: 		SPI1BUF = tipoOperacion;                                                //Carga en el buffer el tipo de operacion requerido
0x1274	0x21B370  	MOV	#lo_addr(_tipoOperacion), W0
0x1276	0xFB8010  	ZE	[W0], W0
0x1278	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,320 :: 		if ((banOperacion==0)&&(buffer==0xA0)) {
L__spi_1202:
L__spi_1201:
;Acelerografo.c,324 :: 		if ((banOperacion==1)&&(buffer==0xF0)){
0x127A	0x21B360  	MOV	#lo_addr(_banOperacion), W0
0x127C	0x784010  	MOV.B	[W0], W0
0x127E	0xE10461  	CP.B	W0, #1
0x1280	0x3A000B  	BRA NZ	L__spi_1204
L__spi_1301:
0x1282	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x1284	0x784090  	MOV.B	[W0], W1
0x1286	0xB3CF00  	MOV.B	#240, W0
0x1288	0xE10C00  	CP.B	W1, W0
0x128A	0x3A0006  	BRA NZ	L__spi_1203
L__spi_1302:
L__spi_1199:
;Acelerografo.c,325 :: 		banOperacion = 0;                                                       //Limpia la bandera
0x128C	0x21B361  	MOV	#lo_addr(_banOperacion), W1
0x128E	0xEF2000  	CLR	W0
0x1290	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,326 :: 		tipoOperacion = 0;                                                      //Limpia la variable de tipo de operacion
0x1292	0x21B371  	MOV	#lo_addr(_tipoOperacion), W1
0x1294	0xEF2000  	CLR	W0
0x1296	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,324 :: 		if ((banOperacion==1)&&(buffer==0xF0)){
L__spi_1204:
L__spi_1203:
;Acelerografo.c,332 :: 		if ((banMuestrear==0)&&(buffer==0xA1)){
0x1298	0x21B320  	MOV	#lo_addr(_banMuestrear), W0
0x129A	0x784010  	MOV.B	[W0], W0
0x129C	0xE10460  	CP.B	W0, #0
0x129E	0x3A0022  	BRA NZ	L__spi_1206
L__spi_1303:
0x12A0	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x12A2	0x784090  	MOV.B	[W0], W1
0x12A4	0xB3CA10  	MOV.B	#161, W0
0x12A6	0xE10C00  	CP.B	W1, W0
0x12A8	0x3A001D  	BRA NZ	L__spi_1205
L__spi_1304:
L__spi_1198:
;Acelerografo.c,333 :: 		banMuestrear = 1;                                                       //Cambia el estado de la bandera para que no inicie el muestreo mas de una vez de manera consecutiva
0x12AA	0x21B321  	MOV	#lo_addr(_banMuestrear), W1
0x12AC	0xB3C010  	MOV.B	#1, W0
0x12AE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,334 :: 		banCiclo = 0;
0x12B0	0x21B3E1  	MOV	#lo_addr(_banCiclo), W1
0x12B2	0xEF2000  	CLR	W0
0x12B4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,335 :: 		contMuestras = 0;
0x12B6	0x21B4D1  	MOV	#lo_addr(_contMuestras), W1
0x12B8	0xEF2000  	CLR	W0
0x12BA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,336 :: 		contCiclos = 0;
0x12BC	0x21B5B1  	MOV	#lo_addr(_contCiclos), W1
0x12BE	0xEF2000  	CLR	W0
0x12C0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,337 :: 		contFIFO = 0;
0x12C2	0xEF2000  	CLR	W0
0x12C4	0x88DAE0  	MOV	W0, _contFIFO
;Acelerografo.c,338 :: 		numFIFO = 0;
0x12C6	0x21B5E1  	MOV	#lo_addr(_numFIFO), W1
0x12C8	0xEF2000  	CLR	W0
0x12CA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,339 :: 		numSetsFIFO = 0;
0x12CC	0x21B591  	MOV	#lo_addr(_numSetsFIFO), W1
0x12CE	0xEF2000  	CLR	W0
0x12D0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,340 :: 		contTimer1 = 0;
0x12D2	0x21B5A1  	MOV	#lo_addr(_contTimer1), W1
0x12D4	0xEF2000  	CLR	W0
0x12D6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,341 :: 		banInicio = 1;                                                          //Bandera que permite el inicio del muestreo dentro de la interrupcion INT1
0x12D8	0x21B351  	MOV	#lo_addr(_banInicio), W1
0x12DA	0xB3C010  	MOV.B	#1, W0
0x12DC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,342 :: 		if (INT1IE_bit==0){
0x12DE	0xAF8822  	BTSC	INT1IE_bit, BitPos(INT1IE_bit+0)
0x12E0	0x370001  	BRA	L_spi_184
;Acelerografo.c,343 :: 		INT1IE_bit = 1;
0x12E2	0xA88822  	BSET	INT1IE_bit, BitPos(INT1IE_bit+0)
;Acelerografo.c,344 :: 		}
L_spi_184:
;Acelerografo.c,332 :: 		if ((banMuestrear==0)&&(buffer==0xA1)){
L__spi_1206:
L__spi_1205:
;Acelerografo.c,348 :: 		if ((banMuestrear==1)&&(buffer==0xA2)){
0x12E4	0x21B320  	MOV	#lo_addr(_banMuestrear), W0
0x12E6	0x784010  	MOV.B	[W0], W0
0x12E8	0xE10461  	CP.B	W0, #1
0x12EA	0x3A0040  	BRA NZ	L__spi_1208
L__spi_1305:
0x12EC	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x12EE	0x784090  	MOV.B	[W0], W1
0x12F0	0xB3CA20  	MOV.B	#162, W0
0x12F2	0xE10C00  	CP.B	W1, W0
0x12F4	0x3A003B  	BRA NZ	L__spi_1207
L__spi_1306:
L__spi_1197:
;Acelerografo.c,349 :: 		banInicio = 0;                                                          //Bandera que permite el inicio del muestreo dentro de la interrupcion INT1
0x12F6	0x21B351  	MOV	#lo_addr(_banInicio), W1
0x12F8	0xEF2000  	CLR	W0
0x12FA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,350 :: 		banMuestrear = 0;                                                       //Cambia el estado de la bandera para permitir que inicie el muestreo de nuevo en el futuro
0x12FC	0x21B321  	MOV	#lo_addr(_banMuestrear), W1
0x12FE	0xEF2000  	CLR	W0
0x1300	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,352 :: 		banTI = 0;
0x1302	0x21B4C1  	MOV	#lo_addr(_banTI), W1
0x1304	0xEF2000  	CLR	W0
0x1306	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,353 :: 		banLec = 0;
0x1308	0x21B411  	MOV	#lo_addr(_banLec), W1
0x130A	0xEF2000  	CLR	W0
0x130C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,354 :: 		banEsc = 0;
0x130E	0x21B441  	MOV	#lo_addr(_banEsc), W1
0x1310	0xEF2000  	CLR	W0
0x1312	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,355 :: 		banSetReloj = 0;
0x1314	0x21B571  	MOV	#lo_addr(_banSetReloj), W1
0x1316	0xEF2000  	CLR	W0
0x1318	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,356 :: 		banSetGPS = 0;
0x131A	0x21B451  	MOV	#lo_addr(_banSetGPS), W1
0x131C	0xEF2000  	CLR	W0
0x131E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,357 :: 		banTIGPS = 0;
0x1320	0x21B381  	MOV	#lo_addr(_banTIGPS), W1
0x1322	0xEF2000  	CLR	W0
0x1324	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,358 :: 		banTFGPS = 0;
0x1326	0x21B391  	MOV	#lo_addr(_banTFGPS), W1
0x1328	0xEF2000  	CLR	W0
0x132A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,359 :: 		banTCGPS = 0;
0x132C	0x21B3A1  	MOV	#lo_addr(_banTCGPS), W1
0x132E	0xEF2000  	CLR	W0
0x1330	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,360 :: 		banLeer = 0;
0x1332	0x21B331  	MOV	#lo_addr(_banLeer), W1
0x1334	0xEF2000  	CLR	W0
0x1336	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,361 :: 		banConf = 0;
0x1338	0x21B341  	MOV	#lo_addr(_banConf), W1
0x133A	0xEF2000  	CLR	W0
0x133C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,362 :: 		i = 0;
0x133E	0xEF2000  	CLR	W0
0x1340	0x88DA30  	MOV	W0, _i
;Acelerografo.c,363 :: 		x = 0;
0x1342	0xEF2000  	CLR	W0
0x1344	0x88DA50  	MOV	W0, _x
;Acelerografo.c,364 :: 		y = 0;
0x1346	0xEF2000  	CLR	W0
0x1348	0x88DA10  	MOV	W0, _y
;Acelerografo.c,365 :: 		i_gps = 0;
0x134A	0xEF2000  	CLR	W0
0x134C	0x88D9E0  	MOV	W0, _i_gps
;Acelerografo.c,366 :: 		contTimer1 = 0;
0x134E	0x21B5A1  	MOV	#lo_addr(_contTimer1), W1
0x1350	0xEF2000  	CLR	W0
0x1352	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,367 :: 		byteGPS = 0;
0x1354	0x21B3B1  	MOV	#lo_addr(_byteGPS), W1
0x1356	0xEF2000  	CLR	W0
0x1358	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,369 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF|STANDBY);                        //Coloco el ADXL en modo STANDBY para pausar las conversiones y limpiar el FIFO
0x135A	0xB3C05B  	MOV.B	#5, W11
0x135C	0xB3C2DA  	MOV.B	#45, W10
0x135E	0x07FC8A  	RCALL	_ADXL355_write_byte
;Acelerografo.c,371 :: 		if (INT1IE_bit==1){
0x1360	0xAE8822  	BTSS	INT1IE_bit, BitPos(INT1IE_bit+0)
0x1362	0x370001  	BRA	L_spi_188
;Acelerografo.c,372 :: 		INT1IE_bit = 0;
0x1364	0xA98822  	BCLR	INT1IE_bit, BitPos(INT1IE_bit+0)
;Acelerografo.c,373 :: 		}
L_spi_188:
;Acelerografo.c,375 :: 		if (T1CON.TON==1){
0x1366	0xAEE105  	BTSS	T1CON, #15
0x1368	0x370001  	BRA	L_spi_189
;Acelerografo.c,376 :: 		T1CON.TON = 0;
0x136A	0xA9E105  	BCLR	T1CON, #15
;Acelerografo.c,377 :: 		}
L_spi_189:
;Acelerografo.c,348 :: 		if ((banMuestrear==1)&&(buffer==0xA2)){
L__spi_1208:
L__spi_1207:
;Acelerografo.c,381 :: 		if ((banLec==1)&&(buffer==0xA3)){                                          //Verifica si la bandera de inicio de trama esta activa
0x136C	0x21B410  	MOV	#lo_addr(_banLec), W0
0x136E	0x784010  	MOV.B	[W0], W0
0x1370	0xE10461  	CP.B	W0, #1
0x1372	0x3A0010  	BRA NZ	L__spi_1210
L__spi_1307:
0x1374	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x1376	0x784090  	MOV.B	[W0], W1
0x1378	0xB3CA30  	MOV.B	#163, W0
0x137A	0xE10C00  	CP.B	W1, W0
0x137C	0x3A000B  	BRA NZ	L__spi_1209
L__spi_1308:
L__spi_1196:
;Acelerografo.c,382 :: 		banLec = 2;                                                             //Activa la bandera de lectura
0x137E	0x21B411  	MOV	#lo_addr(_banLec), W1
0x1380	0xB3C020  	MOV.B	#2, W0
0x1382	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,383 :: 		i = 0;
0x1384	0xEF2000  	CLR	W0
0x1386	0x88DA30  	MOV	W0, _i
;Acelerografo.c,384 :: 		SPI1BUF = tramaCompleta[i];
0x1388	0x211021  	MOV	#lo_addr(_tramaCompleta), W1
0x138A	0x21B460  	MOV	#lo_addr(_i), W0
0x138C	0x408010  	ADD	W1, [W0], W0
0x138E	0x784010  	MOV.B	[W0], W0
0x1390	0xFB8000  	ZE	W0, W0
0x1392	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,381 :: 		if ((banLec==1)&&(buffer==0xA3)){                                          //Verifica si la bandera de inicio de trama esta activa
L__spi_1210:
L__spi_1209:
;Acelerografo.c,386 :: 		if ((banLec==2)&&(buffer!=0xF3)){
0x1394	0x21B410  	MOV	#lo_addr(_banLec), W0
0x1396	0x784010  	MOV.B	[W0], W0
0x1398	0xE10462  	CP.B	W0, #2
0x139A	0x3A000E  	BRA NZ	L__spi_1212
L__spi_1309:
0x139C	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x139E	0x784090  	MOV.B	[W0], W1
0x13A0	0xB3CF30  	MOV.B	#243, W0
0x13A2	0xE10C00  	CP.B	W1, W0
0x13A4	0x320009  	BRA Z	L__spi_1211
L__spi_1310:
L__spi_1195:
;Acelerografo.c,387 :: 		SPI1BUF = tramaCompleta[i];
0x13A6	0x211021  	MOV	#lo_addr(_tramaCompleta), W1
0x13A8	0x21B460  	MOV	#lo_addr(_i), W0
0x13AA	0x408010  	ADD	W1, [W0], W0
0x13AC	0x784010  	MOV.B	[W0], W0
0x13AE	0xFB8000  	ZE	W0, W0
0x13B0	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,388 :: 		i++;
0x13B2	0x200011  	MOV	#1, W1
0x13B4	0x21B460  	MOV	#lo_addr(_i), W0
0x13B6	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,386 :: 		if ((banLec==2)&&(buffer!=0xF3)){
L__spi_1212:
L__spi_1211:
;Acelerografo.c,390 :: 		if ((banLec==2)&&(buffer==0xF3)){                                          //Si detecta el delimitador de final de trama:
0x13B8	0x21B410  	MOV	#lo_addr(_banLec), W0
0x13BA	0x784010  	MOV.B	[W0], W0
0x13BC	0xE10462  	CP.B	W0, #2
0x13BE	0x3A000A  	BRA NZ	L__spi_1214
L__spi_1311:
0x13C0	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x13C2	0x784090  	MOV.B	[W0], W1
0x13C4	0xB3CF30  	MOV.B	#243, W0
0x13C6	0xE10C00  	CP.B	W1, W0
0x13C8	0x3A0005  	BRA NZ	L__spi_1213
L__spi_1312:
L__spi_1194:
;Acelerografo.c,391 :: 		banLec = 0;                                                             //Limpia la bandera de lectura                        ****AQUI Me QUEDE
0x13CA	0x21B411  	MOV	#lo_addr(_banLec), W1
0x13CC	0xEF2000  	CLR	W0
0x13CE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,392 :: 		SPI1BUF = 0xFF;
0x13D0	0x200FF0  	MOV	#255, W0
0x13D2	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,390 :: 		if ((banLec==2)&&(buffer==0xF3)){                                          //Si detecta el delimitador de final de trama:
L__spi_1214:
L__spi_1213:
;Acelerografo.c,398 :: 		if ((banSetReloj==0)&&(buffer==0xA4)){
0x13D4	0x21B570  	MOV	#lo_addr(_banSetReloj), W0
0x13D6	0x784010  	MOV.B	[W0], W0
0x13D8	0xE10460  	CP.B	W0, #0
0x13DA	0x3A000A  	BRA NZ	L__spi_1216
L__spi_1313:
0x13DC	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x13DE	0x784090  	MOV.B	[W0], W1
0x13E0	0xB3CA40  	MOV.B	#164, W0
0x13E2	0xE10C00  	CP.B	W1, W0
0x13E4	0x3A0005  	BRA NZ	L__spi_1215
L__spi_1314:
L__spi_1193:
;Acelerografo.c,399 :: 		banEsc = 1;
0x13E6	0x21B441  	MOV	#lo_addr(_banEsc), W1
0x13E8	0xB3C010  	MOV.B	#1, W0
0x13EA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,400 :: 		j = 0;
0x13EC	0xEF2000  	CLR	W0
0x13EE	0x88DA40  	MOV	W0, _j
;Acelerografo.c,398 :: 		if ((banSetReloj==0)&&(buffer==0xA4)){
L__spi_1216:
L__spi_1215:
;Acelerografo.c,402 :: 		if ((banEsc==1)&&(buffer!=0xA4)&&(buffer!=0xF4)){
0x13F0	0x21B440  	MOV	#lo_addr(_banEsc), W0
0x13F2	0x784010  	MOV.B	[W0], W0
0x13F4	0xE10461  	CP.B	W0, #1
0x13F6	0x3A0012  	BRA NZ	L__spi_1219
L__spi_1315:
0x13F8	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x13FA	0x784090  	MOV.B	[W0], W1
0x13FC	0xB3CA40  	MOV.B	#164, W0
0x13FE	0xE10C00  	CP.B	W1, W0
0x1400	0x32000D  	BRA Z	L__spi_1218
L__spi_1316:
0x1402	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x1404	0x784090  	MOV.B	[W0], W1
0x1406	0xB3CF40  	MOV.B	#244, W0
0x1408	0xE10C00  	CP.B	W1, W0
0x140A	0x320008  	BRA Z	L__spi_1217
L__spi_1317:
L__spi_1192:
;Acelerografo.c,403 :: 		tiempoRPI[j] = buffer;
0x140C	0x21ADA1  	MOV	#lo_addr(_tiempoRPI), W1
0x140E	0x21B480  	MOV	#lo_addr(_j), W0
0x1410	0x408090  	ADD	W1, [W0], W1
0x1412	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x1414	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,404 :: 		j++;
0x1416	0x200011  	MOV	#1, W1
0x1418	0x21B480  	MOV	#lo_addr(_j), W0
0x141A	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,402 :: 		if ((banEsc==1)&&(buffer!=0xA4)&&(buffer!=0xF4)){
L__spi_1219:
L__spi_1218:
L__spi_1217:
;Acelerografo.c,406 :: 		if ((banEsc==1)&&(buffer==0xF4)){
0x141C	0x21B440  	MOV	#lo_addr(_banEsc), W0
0x141E	0x784010  	MOV.B	[W0], W0
0x1420	0xE10461  	CP.B	W0, #1
0x1422	0x3A0026  	BRA NZ	L__spi_1221
L__spi_1318:
0x1424	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x1426	0x784090  	MOV.B	[W0], W1
0x1428	0xB3CF40  	MOV.B	#244, W0
0x142A	0xE10C00  	CP.B	W1, W0
0x142C	0x3A0021  	BRA NZ	L__spi_1220
L__spi_1319:
L__spi_1191:
;Acelerografo.c,407 :: 		horaSistema = RecuperarHoraRPI(tiempoRPI);                              //Recupera la hora de la RPi
0x142E	0x21ADAA  	MOV	#lo_addr(_tiempoRPI), W10
0x1430	0x07F897  	RCALL	_RecuperarHoraRPI
0x1432	0x88DA70  	MOV	W0, _horaSistema
0x1434	0x88DA81  	MOV	W1, _horaSistema+2
;Acelerografo.c,408 :: 		fechaSistema = RecuperarFechaRPI(tiempoRPI);                            //Recupera la fecha de la RPi
0x1436	0x21ADAA  	MOV	#lo_addr(_tiempoRPI), W10
0x1438	0x07F8E9  	RCALL	_RecuperarFechaRPI
0x143A	0x88DA90  	MOV	W0, _fechaSistema
0x143C	0x88DAA1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,409 :: 		DS3234_setDate(horaSistema, fechaSistema);                              //Configura la hora en el RTC
0x143E	0xBE0600  	MOV.D	W0, W12
0x1440	0x80DA7A  	MOV	_horaSistema, W10
0x1442	0x80DA8B  	MOV	_horaSistema+2, W11
0x1444	0x07F93A  	RCALL	_DS3234_setDate
;Acelerografo.c,410 :: 		horaSistema = RecuperarHoraRTC();                                       //Recupera la hora del RTC
0x1446	0x07F8A6  	RCALL	_RecuperarHoraRTC
0x1448	0x88DA70  	MOV	W0, _horaSistema
0x144A	0x88DA81  	MOV	W1, _horaSistema+2
;Acelerografo.c,411 :: 		fechaSistema = RecuperarFechaRTC();                                     //Recupera la fecha del RTC
0x144C	0x07F8F8  	RCALL	_RecuperarFechaRTC
0x144E	0x88DA90  	MOV	W0, _fechaSistema
0x1450	0x88DAA1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,412 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo);                //Actualiza los datos de la trama tiempo con la hora y fecha recuperadas
0x1452	0xBE0600  	MOV.D	W0, W12
0x1454	0x80DA7A  	MOV	_horaSistema, W10
0x1456	0x80DA8B  	MOV	_horaSistema+2, W11
0x1458	0x210FC0  	MOV	#lo_addr(_tiempo), W0
0x145A	0x781F80  	PUSH	W0
0x145C	0x07FC19  	RCALL	_AjustarTiempoSistema
0x145E	0xB1002F  	SUB	#2, W15
;Acelerografo.c,413 :: 		banEsc = 0;
0x1460	0x21B441  	MOV	#lo_addr(_banEsc), W1
0x1462	0xEF2000  	CLR	W0
0x1464	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,414 :: 		banSetReloj = 1;
0x1466	0x21B571  	MOV	#lo_addr(_banSetReloj), W1
0x1468	0xB3C010  	MOV.B	#1, W0
0x146A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,415 :: 		InterrupcionP1(0XB2);
0x146C	0xB3CB2A  	MOV.B	#178, W10
0x146E	0x07FC63  	RCALL	_InterrupcionP1
;Acelerografo.c,406 :: 		if ((banEsc==1)&&(buffer==0xF4)){
L__spi_1221:
L__spi_1220:
;Acelerografo.c,419 :: 		if ((banSetReloj==1)&&(buffer==0xA5)){
0x1470	0x21B570  	MOV	#lo_addr(_banSetReloj), W0
0x1472	0x784010  	MOV.B	[W0], W0
0x1474	0xE10461  	CP.B	W0, #1
0x1476	0x3A000D  	BRA NZ	L__spi_1223
L__spi_1320:
0x1478	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x147A	0x784090  	MOV.B	[W0], W1
0x147C	0xB3CA50  	MOV.B	#165, W0
0x147E	0xE10C00  	CP.B	W1, W0
0x1480	0x3A0008  	BRA NZ	L__spi_1222
L__spi_1321:
L__spi_1190:
;Acelerografo.c,420 :: 		banSetReloj = 2;
0x1482	0x21B571  	MOV	#lo_addr(_banSetReloj), W1
0x1484	0xB3C020  	MOV.B	#2, W0
0x1486	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,421 :: 		j = 0;
0x1488	0xEF2000  	CLR	W0
0x148A	0x88DA40  	MOV	W0, _j
;Acelerografo.c,422 :: 		SPI1BUF = fuenteReloj;                                                  //Envia el indicador de fuente de reloj (0:RTC, 1:GPS)
0x148C	0x21B580  	MOV	#lo_addr(_fuenteReloj), W0
0x148E	0xFB8010  	ZE	[W0], W0
0x1490	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,419 :: 		if ((banSetReloj==1)&&(buffer==0xA5)){
L__spi_1223:
L__spi_1222:
;Acelerografo.c,424 :: 		if ((banSetReloj==2)&&(buffer!=0xA5)&&(buffer!=0xF5)){
0x1492	0x21B570  	MOV	#lo_addr(_banSetReloj), W0
0x1494	0x784010  	MOV.B	[W0], W0
0x1496	0xE10462  	CP.B	W0, #2
0x1498	0x3A0013  	BRA NZ	L__spi_1226
L__spi_1322:
0x149A	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x149C	0x784090  	MOV.B	[W0], W1
0x149E	0xB3CA50  	MOV.B	#165, W0
0x14A0	0xE10C00  	CP.B	W1, W0
0x14A2	0x32000E  	BRA Z	L__spi_1225
L__spi_1323:
0x14A4	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x14A6	0x784090  	MOV.B	[W0], W1
0x14A8	0xB3CF50  	MOV.B	#245, W0
0x14AA	0xE10C00  	CP.B	W1, W0
0x14AC	0x320009  	BRA Z	L__spi_1224
L__spi_1324:
L__spi_1189:
;Acelerografo.c,425 :: 		SPI1BUF = tiempo[j];
0x14AE	0x210FC1  	MOV	#lo_addr(_tiempo), W1
0x14B0	0x21B480  	MOV	#lo_addr(_j), W0
0x14B2	0x408010  	ADD	W1, [W0], W0
0x14B4	0x784010  	MOV.B	[W0], W0
0x14B6	0xFB8000  	ZE	W0, W0
0x14B8	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,426 :: 		j++;
0x14BA	0x200011  	MOV	#1, W1
0x14BC	0x21B480  	MOV	#lo_addr(_j), W0
0x14BE	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,424 :: 		if ((banSetReloj==2)&&(buffer!=0xA5)&&(buffer!=0xF5)){
L__spi_1226:
L__spi_1225:
L__spi_1224:
;Acelerografo.c,428 :: 		if ((banSetReloj==2)&&(buffer==0xF5)){                                     //Si detecta el delimitador de final de trama:
0x14C0	0x21B570  	MOV	#lo_addr(_banSetReloj), W0
0x14C2	0x784010  	MOV.B	[W0], W0
0x14C4	0xE10462  	CP.B	W0, #2
0x14C6	0x3A000A  	BRA NZ	L__spi_1228
L__spi_1325:
0x14C8	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x14CA	0x784090  	MOV.B	[W0], W1
0x14CC	0xB3CF50  	MOV.B	#245, W0
0x14CE	0xE10C00  	CP.B	W1, W0
0x14D0	0x3A0005  	BRA NZ	L__spi_1227
L__spi_1326:
L__spi_1188:
;Acelerografo.c,429 :: 		banSetReloj = 0;                                                        //Limpia la bandera de lectura
0x14D2	0x21B571  	MOV	#lo_addr(_banSetReloj), W1
0x14D4	0xEF2000  	CLR	W0
0x14D6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,430 :: 		SPI1BUF = 0xFF;
0x14D8	0x200FF0  	MOV	#255, W0
0x14DA	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,428 :: 		if ((banSetReloj==2)&&(buffer==0xF5)){                                     //Si detecta el delimitador de final de trama:
L__spi_1228:
L__spi_1227:
;Acelerografo.c,434 :: 		if ((banSetReloj==0)&&(buffer==0xA6)){
0x14DC	0x21B570  	MOV	#lo_addr(_banSetReloj), W0
0x14DE	0x784010  	MOV.B	[W0], W0
0x14E0	0xE10460  	CP.B	W0, #0
0x14E2	0x3A0010  	BRA NZ	L__spi_1230
L__spi_1327:
0x14E4	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x14E6	0x784090  	MOV.B	[W0], W1
0x14E8	0xB3CA60  	MOV.B	#166, W0
0x14EA	0xE10C00  	CP.B	W1, W0
0x14EC	0x3A000B  	BRA NZ	L__spi_1229
L__spi_1328:
L__spi_1187:
;Acelerografo.c,435 :: 		banTIGPS = 0;                                                           //Limpia la bandera de inicio de trama  del GPS
0x14EE	0x21B381  	MOV	#lo_addr(_banTIGPS), W1
0x14F0	0xEF2000  	CLR	W0
0x14F2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,436 :: 		banTCGPS = 0;                                                           //Limpia la bandera de trama completa
0x14F4	0x21B3A1  	MOV	#lo_addr(_banTCGPS), W1
0x14F6	0xEF2000  	CLR	W0
0x14F8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,437 :: 		i_gps = 0;                                                              //Limpia el subindice de la trama GPS
0x14FA	0xEF2000  	CLR	W0
0x14FC	0x88D9E0  	MOV	W0, _i_gps
;Acelerografo.c,439 :: 		if (U1RXIE_bit==0){
0x14FE	0xAF6821  	BTSC	U1RXIE_bit, BitPos(U1RXIE_bit+0)
0x1500	0x370001  	BRA	L_spi_1120
;Acelerografo.c,440 :: 		U1RXIE_bit = 1;
0x1502	0xA86821  	BSET	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Acelerografo.c,441 :: 		}
L_spi_1120:
;Acelerografo.c,434 :: 		if ((banSetReloj==0)&&(buffer==0xA6)){
L__spi_1230:
L__spi_1229:
;Acelerografo.c,445 :: 		if ((banSetReloj==0)&&(buffer==0xA7)){
0x1504	0x21B570  	MOV	#lo_addr(_banSetReloj), W0
0x1506	0x784010  	MOV.B	[W0], W0
0x1508	0xE10460  	CP.B	W0, #0
0x150A	0x3A001A  	BRA NZ	L__spi_1232
L__spi_1329:
0x150C	0x21AD90  	MOV	#lo_addr(_buffer), W0
0x150E	0x784090  	MOV.B	[W0], W1
0x1510	0xB3CA70  	MOV.B	#167, W0
0x1512	0xE10C00  	CP.B	W1, W0
0x1514	0x3A0015  	BRA NZ	L__spi_1231
L__spi_1330:
L__spi_1186:
;Acelerografo.c,446 :: 		horaSistema = RecuperarHoraRTC();                                       //Recupera la hora del RTC
0x1516	0x07F83E  	RCALL	_RecuperarHoraRTC
0x1518	0x88DA70  	MOV	W0, _horaSistema
0x151A	0x88DA81  	MOV	W1, _horaSistema+2
;Acelerografo.c,447 :: 		fechaSistema = RecuperarFechaRTC();                                     //Recupera la fecha del RTC
0x151C	0x07F890  	RCALL	_RecuperarFechaRTC
0x151E	0x88DA90  	MOV	W0, _fechaSistema
0x1520	0x88DAA1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,448 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo);                //Actualiza los datos de la trama tiempo con la hora y fecha recuperadas
0x1522	0xBE0600  	MOV.D	W0, W12
0x1524	0x80DA7A  	MOV	_horaSistema, W10
0x1526	0x80DA8B  	MOV	_horaSistema+2, W11
0x1528	0x210FC0  	MOV	#lo_addr(_tiempo), W0
0x152A	0x781F80  	PUSH	W0
0x152C	0x07FBB1  	RCALL	_AjustarTiempoSistema
0x152E	0xB1002F  	SUB	#2, W15
;Acelerografo.c,449 :: 		fuenteReloj = 0;                                                        //Indica que la fuente de reloj es el RTC
0x1530	0x21B581  	MOV	#lo_addr(_fuenteReloj), W1
0x1532	0xEF2000  	CLR	W0
0x1534	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,450 :: 		banSetReloj = 1;
0x1536	0x21B571  	MOV	#lo_addr(_banSetReloj), W1
0x1538	0xB3C010  	MOV.B	#1, W0
0x153A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,451 :: 		InterrupcionP1(0XB2);
0x153C	0xB3CB2A  	MOV.B	#178, W10
0x153E	0x07FBFB  	RCALL	_InterrupcionP1
;Acelerografo.c,445 :: 		if ((banSetReloj==0)&&(buffer==0xA7)){
L__spi_1232:
L__spi_1231:
;Acelerografo.c,454 :: 		}
L_end_spi_1:
0x1540	0x7806CF  	POP	W13
0x1542	0x78064F  	POP	W12
0x1544	0x7805CF  	POP	W11
0x1546	0x78054F  	POP	W10
0x1548	0x2001A0  	MOV	#26, W0
0x154A	0x09000C  	REPEAT	#12
0x154C	0x78104F  	POP	[W0--]
0x154E	0x78004F  	POP	W0
0x1550	0xF90036  	POP	RCOUNT
0x1552	0xF90032  	POP	DSRPAG
0x1554	0xF90034  	POP	DSWPAG
0x1556	0x064000  	RETFIE
; end of _spi_1
_RecuperarHoraRPI:
0x0560	0xFA0004  	LNK	#4
;tiempo_rpi.c,21 :: 		unsigned long RecuperarHoraRPI(unsigned short *tramaTiempoRpi){
;tiempo_rpi.c,25 :: 		horaRPi = ((long)tramaTiempoRpi[3]*3600)+((long)tramaTiempoRpi[4]*60)+((long)tramaTiempoRpi[5]);      //Calcula el segundo actual = hh*3600 + mm*60 + ss
0x0562	0x450063  	ADD	W10, #3, W0
0x0564	0xFB8010  	ZE	[W0], W0
0x0566	0xEB0080  	CLR	W1
0x0568	0x20E102  	MOV	#3600, W2
0x056A	0x200003  	MOV	#0, W3
0x056C	0x07FF1B  	RCALL	__Multiply_32x32
0x056E	0x980700  	MOV	W0, [W14+0]
0x0570	0x980711  	MOV	W1, [W14+2]
0x0572	0x450064  	ADD	W10, #4, W0
0x0574	0xFB8010  	ZE	[W0], W0
0x0576	0xEB0080  	CLR	W1
0x0578	0x2003C2  	MOV	#60, W2
0x057A	0x200003  	MOV	#0, W3
0x057C	0x07FF13  	RCALL	__Multiply_32x32
0x057E	0x90010E  	MOV	[W14+0], W2
0x0580	0x90019E  	MOV	[W14+2], W3
0x0582	0x410100  	ADD	W2, W0, W2
0x0584	0x498181  	ADDC	W3, W1, W3
0x0586	0x450065  	ADD	W10, #5, W0
0x0588	0xFB8010  	ZE	[W0], W0
0x058A	0xEB0080  	CLR	W1
0x058C	0x410000  	ADD	W2, W0, W0
0x058E	0x498081  	ADDC	W3, W1, W1
;tiempo_rpi.c,27 :: 		return horaRPi;
;tiempo_rpi.c,29 :: 		}
L_end_RecuperarHoraRPI:
0x0590	0xFA8000  	ULNK
0x0592	0x060000  	RETURN
; end of _RecuperarHoraRPI
_RecuperarFechaRPI:
0x060C	0xFA0004  	LNK	#4
;tiempo_rpi.c,10 :: 		unsigned long RecuperarFechaRPI(unsigned short *tramaTiempoRpi){
;tiempo_rpi.c,14 :: 		fechaRPi = ((long)tramaTiempoRpi[0]*10000)+((long)tramaTiempoRpi[1]*100)+((long)tramaTiempoRpi[2]);      //10000*dd + 100*mm + aa
0x060E	0xFB801A  	ZE	[W10], W0
0x0610	0xEB0080  	CLR	W1
0x0612	0x227102  	MOV	#10000, W2
0x0614	0x200003  	MOV	#0, W3
0x0616	0x07FEC6  	RCALL	__Multiply_32x32
0x0618	0x980700  	MOV	W0, [W14+0]
0x061A	0x980711  	MOV	W1, [W14+2]
0x061C	0x450061  	ADD	W10, #1, W0
0x061E	0xFB8010  	ZE	[W0], W0
0x0620	0xEB0080  	CLR	W1
0x0622	0x200642  	MOV	#100, W2
0x0624	0x200003  	MOV	#0, W3
0x0626	0x07FEBE  	RCALL	__Multiply_32x32
0x0628	0x90010E  	MOV	[W14+0], W2
0x062A	0x90019E  	MOV	[W14+2], W3
0x062C	0x410100  	ADD	W2, W0, W2
0x062E	0x498181  	ADDC	W3, W1, W3
0x0630	0x450062  	ADD	W10, #2, W0
0x0632	0xFB8010  	ZE	[W0], W0
0x0634	0xEB0080  	CLR	W1
0x0636	0x410000  	ADD	W2, W0, W0
0x0638	0x498081  	ADDC	W3, W1, W1
;tiempo_rpi.c,16 :: 		return fechaRPi;
;tiempo_rpi.c,18 :: 		}
L_end_RecuperarFechaRPI:
0x063A	0xFA8000  	ULNK
0x063C	0x060000  	RETURN
; end of _RecuperarFechaRPI
_Timer1Int:
0x0E1C	0xF80034  	PUSH	DSWPAG
0x0E1E	0xF80032  	PUSH	DSRPAG
0x0E20	0xF80036  	PUSH	RCOUNT
0x0E22	0x781F80  	PUSH	W0
0x0E24	0x200020  	MOV	#2, W0
0x0E26	0x09000C  	REPEAT	#12
0x0E28	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,479 :: 		void Timer1Int() org IVT_ADDR_T1INTERRUPT{
;Acelerografo.c,481 :: 		T1IF_bit = 0;                                                              //Limpia la bandera de interrupcion por desbordamiento del Timer1
0x0E2A	0x781F8A  	PUSH	W10
0x0E2C	0xA96800  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;Acelerografo.c,483 :: 		numFIFO = ADXL355_read_byte(FIFO_ENTRIES); //75                            //Lee el numero de muestras disponibles en el FIFO
0x0E2E	0xB3C05A  	MOV.B	#5, W10
0x0E30	0x07FFE8  	RCALL	_ADXL355_read_byte
0x0E32	0x21B5E1  	MOV	#lo_addr(_numFIFO), W1
0x0E34	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,484 :: 		numSetsFIFO = (numFIFO)/3;                 //25                            //Lee el numero de sets disponibles en el FIFO
0x0E36	0xFB8000  	ZE	W0, W0
0x0E38	0x200032  	MOV	#3, W2
0x0E3A	0x090011  	REPEAT	#17
0x0E3C	0xD80002  	DIV.S	W0, W2
0x0E3E	0x780080  	MOV	W0, W1
0x0E40	0x21B590  	MOV	#lo_addr(_numSetsFIFO), W0
0x0E42	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,487 :: 		for (x=0;x<numSetsFIFO;x++){
0x0E44	0xEF2000  	CLR	W0
0x0E46	0x88DA50  	MOV	W0, _x
L_Timer1Int126:
0x0E48	0x21B590  	MOV	#lo_addr(_numSetsFIFO), W0
0x0E4A	0xFB8090  	ZE	[W0], W1
0x0E4C	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0E4E	0xE10810  	CP	W1, [W0]
0x0E50	0x36001A  	BRA LEU	L_Timer1Int127
L__Timer1Int335:
;Acelerografo.c,488 :: 		ADXL355_read_FIFO(datosLeidos);                                        //Lee una sola posicion del FIFO
0x0E52	0x21000A  	MOV	#lo_addr(_datosLeidos), W10
0x0E54	0x07FF80  	RCALL	_ADXL355_read_FIFO
;Acelerografo.c,489 :: 		for (y=0;y<9;y++){
0x0E56	0xEF2000  	CLR	W0
0x0E58	0x88DA10  	MOV	W0, _y
L_Timer1Int129:
0x0E5A	0x80DA10  	MOV	_y, W0
0x0E5C	0xE10069  	CP	W0, #9
0x0E5E	0x31000F  	BRA GEU	L_Timer1Int130
L__Timer1Int336:
;Acelerografo.c,490 :: 		datosFIFO[y+(x*9)] = datosLeidos[y];                               //LLena la trama datosFIFO
0x0E60	0x80DA51  	MOV	_x, W1
0x0E62	0x200090  	MOV	#9, W0
0x0E64	0xB80900  	MUL.UU	W1, W0, W2
0x0E66	0x21B420  	MOV	#lo_addr(_y), W0
0x0E68	0x410090  	ADD	W2, [W0], W1
0x0E6A	0x210090  	MOV	#lo_addr(_datosFIFO), W0
0x0E6C	0x400101  	ADD	W0, W1, W2
0x0E6E	0x210001  	MOV	#lo_addr(_datosLeidos), W1
0x0E70	0x21B420  	MOV	#lo_addr(_y), W0
0x0E72	0x408010  	ADD	W1, [W0], W0
0x0E74	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,489 :: 		for (y=0;y<9;y++){
0x0E76	0x200011  	MOV	#1, W1
0x0E78	0x21B420  	MOV	#lo_addr(_y), W0
0x0E7A	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,491 :: 		}
0x0E7C	0x37FFEE  	BRA	L_Timer1Int129
L_Timer1Int130:
;Acelerografo.c,487 :: 		for (x=0;x<numSetsFIFO;x++){
0x0E7E	0x200011  	MOV	#1, W1
0x0E80	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0E82	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,492 :: 		}
0x0E84	0x37FFE1  	BRA	L_Timer1Int126
L_Timer1Int127:
;Acelerografo.c,495 :: 		for (x=0;x<(numSetsFIFO*9);x++){      //0-224
0x0E86	0xEF2000  	CLR	W0
0x0E88	0x88DA50  	MOV	W0, _x
L_Timer1Int132:
0x0E8A	0x21B590  	MOV	#lo_addr(_numSetsFIFO), W0
0x0E8C	0xFB8090  	ZE	[W0], W1
0x0E8E	0x200090  	MOV	#9, W0
0x0E90	0xB98900  	MUL.SS	W1, W0, W2
0x0E92	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0E94	0xE11010  	CP	W2, [W0]
0x0E96	0x360036  	BRA LEU	L_Timer1Int133
L__Timer1Int337:
;Acelerografo.c,496 :: 		if ((x==0)||(x%9==0)){
0x0E98	0x80DA50  	MOV	_x, W0
0x0E9A	0xE10060  	CP	W0, #0
0x0E9C	0x320008  	BRA Z	L__Timer1Int235
L__Timer1Int338:
0x0E9E	0x80DA50  	MOV	_x, W0
0x0EA0	0x200092  	MOV	#9, W2
0x0EA2	0x090011  	REPEAT	#17
0x0EA4	0xD88002  	DIV.U	W0, W2
0x0EA6	0x780001  	MOV	W1, W0
0x0EA8	0xE10060  	CP	W0, #0
0x0EAA	0x320001  	BRA Z	L__Timer1Int234
L__Timer1Int339:
0x0EAC	0x37001B  	BRA	L_Timer1Int137
L__Timer1Int235:
L__Timer1Int234:
;Acelerografo.c,497 :: 		tramaCompleta[contFIFO+contMuestras+x] = contMuestras;
0x0EAE	0x21B4D0  	MOV	#lo_addr(_contMuestras), W0
0x0EB0	0xFB8090  	ZE	[W0], W1
0x0EB2	0x21B5C0  	MOV	#lo_addr(_contFIFO), W0
0x0EB4	0x408090  	ADD	W1, [W0], W1
0x0EB6	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0EB8	0x408090  	ADD	W1, [W0], W1
0x0EBA	0x211020  	MOV	#lo_addr(_tramaCompleta), W0
0x0EBC	0x400081  	ADD	W0, W1, W1
0x0EBE	0x21B4D0  	MOV	#lo_addr(_contMuestras), W0
0x0EC0	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,498 :: 		tramaCompleta[contFIFO+contMuestras+x+1] = datosFIFO[x];
0x0EC2	0x21B4D0  	MOV	#lo_addr(_contMuestras), W0
0x0EC4	0xFB8090  	ZE	[W0], W1
0x0EC6	0x21B5C0  	MOV	#lo_addr(_contFIFO), W0
0x0EC8	0x408090  	ADD	W1, [W0], W1
0x0ECA	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0ECC	0x408010  	ADD	W1, [W0], W0
0x0ECE	0x4000E1  	ADD	W0, #1, W1
0x0ED0	0x211020  	MOV	#lo_addr(_tramaCompleta), W0
0x0ED2	0x400101  	ADD	W0, W1, W2
0x0ED4	0x210091  	MOV	#lo_addr(_datosFIFO), W1
0x0ED6	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0ED8	0x408010  	ADD	W1, [W0], W0
0x0EDA	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,499 :: 		contMuestras++;
0x0EDC	0xB3C011  	MOV.B	#1, W1
0x0EDE	0x21B4D0  	MOV	#lo_addr(_contMuestras), W0
0x0EE0	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,500 :: 		} else {
0x0EE2	0x37000C  	BRA	L_Timer1Int138
L_Timer1Int137:
;Acelerografo.c,501 :: 		tramaCompleta[contFIFO+contMuestras+x] = datosFIFO[x];
0x0EE4	0x21B4D0  	MOV	#lo_addr(_contMuestras), W0
0x0EE6	0xFB8090  	ZE	[W0], W1
0x0EE8	0x21B5C0  	MOV	#lo_addr(_contFIFO), W0
0x0EEA	0x408090  	ADD	W1, [W0], W1
0x0EEC	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0EEE	0x408090  	ADD	W1, [W0], W1
0x0EF0	0x211020  	MOV	#lo_addr(_tramaCompleta), W0
0x0EF2	0x400101  	ADD	W0, W1, W2
0x0EF4	0x210091  	MOV	#lo_addr(_datosFIFO), W1
0x0EF6	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0EF8	0x408010  	ADD	W1, [W0], W0
0x0EFA	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,502 :: 		}
L_Timer1Int138:
;Acelerografo.c,495 :: 		for (x=0;x<(numSetsFIFO*9);x++){      //0-224
0x0EFC	0x200011  	MOV	#1, W1
0x0EFE	0x21B4A0  	MOV	#lo_addr(_x), W0
0x0F00	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,503 :: 		}
0x0F02	0x37FFC3  	BRA	L_Timer1Int132
L_Timer1Int133:
;Acelerografo.c,505 :: 		contFIFO = (contMuestras*9);                                               //Incrementa el contador de FIFOs
0x0F04	0x21B4D0  	MOV	#lo_addr(_contMuestras), W0
0x0F06	0xFB8090  	ZE	[W0], W1
0x0F08	0x200090  	MOV	#9, W0
0x0F0A	0xB98800  	MUL.SS	W1, W0, W0
0x0F0C	0x88DAE0  	MOV	W0, _contFIFO
;Acelerografo.c,507 :: 		contTimer1++;                                                              //Incrementa una unidad cada vez que entra a la interrupcion por Timer1
0x0F0E	0xB3C011  	MOV.B	#1, W1
0x0F10	0x21B5A0  	MOV	#lo_addr(_contTimer1), W0
0x0F12	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,509 :: 		if (contTimer1==numTMR1){                                                  //Verifica si se cumplio el numero de interrupciones por TMR1 para la tasa de muestreo seleccionada
0x0F14	0x21B5A0  	MOV	#lo_addr(_contTimer1), W0
0x0F16	0x784090  	MOV.B	[W0], W1
0x0F18	0x21B400  	MOV	#lo_addr(_numTMR1), W0
0x0F1A	0xE10C10  	CP.B	W1, [W0]
0x0F1C	0x3A0007  	BRA NZ	L_Timer1Int139
L__Timer1Int340:
;Acelerografo.c,510 :: 		T1CON.TON = 0;                                                          //Apaga el Timer1
0x0F1E	0xA9E105  	BCLR	T1CON, #15
;Acelerografo.c,511 :: 		banCiclo = 1;                                                           //Activa la bandera que indica que se completo un ciclo de medicion
0x0F20	0x21B3E1  	MOV	#lo_addr(_banCiclo), W1
0x0F22	0xB3C010  	MOV.B	#1, W0
0x0F24	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,512 :: 		contTimer1 = 0;                                                         //Limpia el contador de interrupciones por Timer1
0x0F26	0x21B5A1  	MOV	#lo_addr(_contTimer1), W1
0x0F28	0xEF2000  	CLR	W0
0x0F2A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,513 :: 		}
L_Timer1Int139:
;Acelerografo.c,515 :: 		}
L_end_Timer1Int:
0x0F2C	0x78054F  	POP	W10
0x0F2E	0x2001A0  	MOV	#26, W0
0x0F30	0x09000C  	REPEAT	#12
0x0F32	0x78104F  	POP	[W0--]
0x0F34	0x78004F  	POP	W0
0x0F36	0xF90036  	POP	RCOUNT
0x0F38	0xF90032  	POP	DSRPAG
0x0F3A	0xF90034  	POP	DSWPAG
0x0F3C	0x064000  	RETFIE
; end of _Timer1Int
;Acelerografo.c,0 :: ?ICS_datosLeidos [9]
0x8000	0x0000 ;?ICS_datosLeidos+0
0x8002	0x0000 ;?ICS_datosLeidos+2
0x8004	0x0000 ;?ICS_datosLeidos+4
0x8006	0x0000 ;?ICS_datosLeidos+6
0x8008	0x00 ;?ICS_datosLeidos+8
; end of ?ICS_datosLeidos
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200      [14]    _Delay_100ms
0x020E       [4]    _Get_Fosc_Per_Cyc
0x0212      [24]    _SPI2_Read
0x022A      [26]    _isdigit
0x0244       [6]    _Get_Fosc_kHz
0x024A      [46]    _SPI2_Init_Advanced
0x0278      [18]    _DS3234_read_byte
0x028A       [8]    _SPI2_Write
0x0292     [102]    _atoi
0x02F8      [24]    _Bcd2Dec
0x0310      [18]    _DS3234_write_byte
0x0322      [42]    _Dec2Bcd
0x034C      [88]    __Modulus_32x32
0x03A4      [18]    __Multiply_32x32
0x03B6     [258]    _UART1_Init
0x04B8      [82]    __Divide_32x32
0x050A      [46]    _SPI1_Init_Advanced
0x0538      [40]    _SPI2_Init
0x0560      [52]    _RecuperarHoraRPI
0x0594     [120]    _RecuperarHoraRTC
0x060C      [50]    _RecuperarFechaRPI
0x063E     [124]    _RecuperarFechaRTC
0x06BA     [232]    _DS3234_setDate
0x07A2     [176]    _RecuperarFechaGPS
0x0852     [174]    _RecuperarHoraGPS
0x0900      [98]    _ADXL355_init
0x0962     [352]    _Muestrear
0x0AC2      [60]    _DS3234_init
0x0AFE     [374]    _ConfiguracionPrincipal
0x0C74      [28]    _ADXL355_write_byte
0x0C90     [166]    _AjustarTiempoSistema
0x0D36      [32]    _InterrupcionP1
0x0D56     [172]    _ADXL355_read_FIFO
0x0E02      [26]    _ADXL355_read_byte
0x0E1C     [290]    _Timer1Int
0x0F3E     [238]    _main
0x102C     [454]    _urx_1
0x11F2      [76]    _int_1
0x123E     [794]    _spi_1
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x06CC       [2]    RPINR22bits
0x0684       [2]    RPOR2bits
0x0682       [2]    RPOR1bits
0x0240       [2]    SPI1STAT
0x0820       [0]    SPI1IE_bit
0x0800       [0]    SPI1IF_bit
0x0802       [0]    INT1IF_bit
0x084A       [1]    IPC5bits
0x0104       [2]    T1CON
0x0260       [2]    SPI2STAT
0x06A0       [2]    RPINR0
0x0822       [0]    INT1IE_bit
0x0222       [2]    U1STAbits
0x0E10       [0]    TRISB13_bit
0x0E10       [0]    TRISB14_bit
0x0E10       [0]    TRISB15_bit
0x0E10       [0]    TRISB12_bit
0x0E10       [0]    TRISB10_bit
0x0E10       [0]    TRISB11_bit
0x0820       [0]    U1RXIE_bit
0x0800       [0]    U1RXIF_bit
0x0844       [2]    IPC2bits
0x08C2       [2]    INTCON2
0x06C4       [1]    RPINR18bits
0x0680       [2]    RPOR0bits
0x0820       [0]    T1IE_bit
0x1009     [243]    _datosFIFO
0x10FC       [6]    _tiempo
0x0222       [2]    U1STA
0x0228       [2]    U1BRG
0x1102    [2506]    _tramaCompleta
0x1ACC      [13]    _datosGPS
0x1AD9       [1]    _buffer
0x1ADA       [6]    _tiempoRPI
0x0226       [2]    U1RXREG
0x0222       [0]    OERR_bit
0x1AE0      [70]    _tramaGPS
0x0220       [2]    U1MODE
0x0262       [2]    SPI2CON
0x1B26       [2]    _SPI_Rd_Ptr
0x1B28       [2]    _SPI_Wr_Ptr
0x0800       [0]    T1IF_bit
0x0102       [2]    PR1
0x0840       [2]    IPC0bits
0x1B2A       [2]    _UART_Rd_Ptr
0x1B2C       [2]    _UART_Rdy_Ptr
0x1B2E       [2]    _UART_Tx_Idle_Ptr
0x0268       [2]    SPI2BUF
0x0242       [2]    SPI1CON
0x1B30       [2]    _UART_Wr_Ptr
0x0E10       [0]    TRISB4_bit
0x1B32       [1]    _banMuestrear
0x1B33       [1]    _banLeer
0x1B34       [1]    _banConf
0x1B35       [1]    _banInicio
0x1B36       [1]    _banOperacion
0x1B37       [1]    _tipoOperacion
0x1B38       [1]    _banTIGPS
0x1B39       [1]    _banTFGPS
0x1B3A       [1]    _banTCGPS
0x0248       [2]    SPI1BUF
0x1B3C       [2]    _i_gps
0x1B3B       [1]    _byteGPS
0x1B3E       [1]    _banCiclo
0x0E04       [0]    LATA2_bit
0x1B3F       [1]    _tasaMuestreo
0x1B40       [1]    _numTMR1
0x0E04       [0]    CS_ADXL355
0x0E04       [0]    LATA3_bit
0x0E04       [0]    CS_DS3234
0x1B42       [2]    _y
0x1B41       [1]    _banLec
0x1B44       [1]    _banEsc
0x1B46       [2]    _i
0x1B48       [2]    _j
0x1B4A       [2]    _x
0x1B45       [1]    _banSetGPS
0x0E14       [0]    LATB12_bit
0x1B4C       [1]    _banTI
0x0744       [2]    CLKDIVbits
0x0E14       [0]    RP2
0x0E14       [0]    LATB4_bit
0x0E14       [0]    TEST
0x0E00       [0]    TRISA2_bit
0x0E00       [0]    TRISA3_bit
0x0E00       [0]    TRISA4_bit
0x0746       [2]    PLLFBDbits
0x0E0E       [2]    ANSELA
0x0E1E       [2]    ANSELB
0x0E04       [0]    LATA4_bit
0x1B4E       [4]    _horaSistema
0x1B52       [4]    _fechaSistema
0x1B4D       [1]    _contMuestras
0x1B56       [1]    _stsGPS
0x1B57       [1]    _banSetReloj
0x1B58       [1]    _fuenteReloj
0x1B59       [1]    _numSetsFIFO
0x1B5A       [1]    _contTimer1
0x0E04       [0]    RP1
0x1B5B       [1]    _contCiclos
0x1B5C       [2]    _contFIFO
0x1B5E       [1]    _numFIFO
0x1000       [9]    _datosLeidos
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x0014       [2]    FARG_SPI2_Read_buffer
0x0220       [2]    U1MODE
0x0222       [2]    U1STA
0x0226       [2]    U1RXREG
0x0228       [2]    U1BRG
0x0014       [1]    FARG_isdigit_character
0x0240       [2]    SPI1STAT
0x0242       [2]    SPI1CON
0x0248       [2]    SPI1BUF
0x0014       [2]    FARG_SPI2_Init_Advanced_master_mode
0x0016       [2]    FARG_SPI2_Init_Advanced_mode16
0x0018       [2]    FARG_SPI2_Init_Advanced_sec_prescaler
0x001A       [2]    FARG_SPI2_Init_Advanced_pri_prescaler
0x0260       [2]    SPI2STAT
0x0262       [2]    SPI2CON
0x0268       [2]    SPI2BUF
0x0014       [1]    FARG_DS3234_read_byte_address
0x0014       [2]    FARG_SPI2_Write_data_out
0x0014       [2]    FARG_atoi_s
0x0014       [1]    FARG_Bcd2Dec_bcdnum
0x0014       [1]    FARG_DS3234_write_byte_address
0x0016       [1]    FARG_DS3234_write_byte_value
0x0014       [1]    FARG_Dec2Bcd_decnum
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0014       [2]    FARG_SPI1_Init_Advanced_master_mode
0x0016       [2]    FARG_SPI1_Init_Advanced_mode16
0x0018       [2]    FARG_SPI1_Init_Advanced_sec_prescaler
0x001A       [2]    FARG_SPI1_Init_Advanced_pri_prescaler
0x0014       [2]    FARG_RecuperarHoraRPI_tramaTiempoRpi
0x0014       [2]    FARG_RecuperarFechaRPI_tramaTiempoRpi
0x06A0       [2]    RPINR0
0x0014       [4]    FARG_DS3234_setDate_longHora
0x0018       [4]    FARG_DS3234_setDate_longFecha
0x0014       [2]    FARG_RecuperarFechaGPS_tramaDatosGPS
0x0014       [2]    FARG_RecuperarHoraGPS_tramaDatosGPS
0x08C2       [2]    INTCON2
0x0014       [1]    FARG_ADXL355_init_tMuestreo
0x0014       [1]    FARG_ADXL355_write_byte_address
0x0016       [1]    FARG_ADXL355_write_byte_value
0x0014       [4]    FARG_AjustarTiempoSistema_longHora
0x0018       [4]    FARG_AjustarTiempoSistema_longFecha
0x0014       [1]    FARG_InterrupcionP1_operacion
0x0014       [2]    FARG_ADXL355_read_FIFO_vectorFIFO
0x0014       [1]    FARG_ADXL355_read_byte_address
0x0E0E       [2]    ANSELA
0x0E1E       [2]    ANSELB
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x8000       [9]    ?ICS_datosLeidos
//** Label List: ** 
//----------------------------------------------
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_GPS_init18
  L_GPS_init20
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_IncrementarFecha27
  L_IncrementarFecha28
  L_IncrementarFecha29
  L_IncrementarFecha30
  L_IncrementarFecha31
  L_IncrementarFecha32
  L_IncrementarFecha33
  L_IncrementarFecha34
  L_IncrementarFecha35
  L_IncrementarFecha36
  L_IncrementarFecha37
  L_IncrementarFecha38
  L_IncrementarFecha39
  L_IncrementarFecha40
  L_IncrementarFecha41
  L_IncrementarFecha42
  L_IncrementarFecha43
  L_IncrementarFecha44
  L_IncrementarFecha45
  L_IncrementarFecha46
  L_IncrementarFecha47
  L_IncrementarFecha48
  L_main49
  L_main50
  L_ConfiguracionPrincipal51
  L_InterrupcionP153
  L_InterrupcionP154
  L_Muestrear56
  L_Muestrear57
  L_Muestrear58
  L_Muestrear59
  L_Muestrear60
  L_Muestrear61
  L_Muestrear62
  L_Muestrear63
  L_Muestrear64
  L_Muestrear65
  L_Muestrear66
  L_Muestrear67
  L_Muestrear68
  L_Muestrear69
  L_Muestrear70
  L_Muestrear71
  L_Muestrear72
  L_Muestrear73
  L_Muestrear74
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_spi_1114
  L_spi_1115
  L_spi_1116
  L_spi_1117
  L_spi_1118
  L_spi_1119
  L_spi_1120
  L_spi_1121
  L_spi_1122
  L_spi_1123
  L_int_1124
  L_int_1125
  L_Timer1Int126
  L_Timer1Int127
  L_Timer1Int128
  L_Timer1Int129
  L_Timer1Int130
  L_Timer1Int131
  L_Timer1Int132
  L_Timer1Int133
  L_Timer1Int134
  L_Timer1Int135
  L_Timer1Int136
  L_Timer1Int137
  L_Timer1Int138
  L_Timer1Int139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L_urx_1150
  L_urx_1151
  L_urx_1152
  L_urx_1153
  L_urx_1154
  L_urx_1155
  L_urx_1156
  L_urx_1157
  L_urx_1158
  L_urx_1159
  L_urx_1160
  L_urx_1161
  L_urx_1162
  L__IncrementarFecha163
  L__IncrementarFecha164
  L__IncrementarFecha165
  L__IncrementarFecha166
  L__IncrementarFecha167
  L__IncrementarFecha168
  L__IncrementarFecha169
  L__IncrementarFecha170
  L__IncrementarFecha171
  L__IncrementarFecha172
  L__IncrementarFecha173
  L__IncrementarFecha174
  L__IncrementarFecha175
  L__IncrementarFecha176
  L__IncrementarFecha177
  L__IncrementarFecha178
  L__IncrementarFecha179
  L__IncrementarFecha180
  L__IncrementarFecha181
  L__IncrementarFecha182
  L__Muestrear183
  L__Muestrear184
  L__Muestrear185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__spi_1214
  L__spi_1215
  L__spi_1216
  L__spi_1217
  L__spi_1218
  L__spi_1219
  L__spi_1220
  L__spi_1221
  L__spi_1222
  L__spi_1223
  L__spi_1224
  L__spi_1225
  L__spi_1226
  L__spi_1227
  L__spi_1228
  L__spi_1229
  L__spi_1230
  L__spi_1231
  L__spi_1232
  L__Timer1Int233
  L__Timer1Int234
  L__Timer1Int235
  L__urx_1236
  L__urx_1237
  L__urx_1238
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init240
  L__ADXL355_init241
  L__ADXL355_init242
  L__ADXL355_init243
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data247
  L__ADXL355_read_data248
  L__ADXL355_read_data249
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha261
  L__IncrementarFecha262
  L__IncrementarFecha263
  L__IncrementarFecha264
  L__IncrementarFecha265
  L__IncrementarFecha266
  L__IncrementarFecha267
  L__IncrementarFecha268
  L__IncrementarFecha269
  L__IncrementarFecha270
  L__IncrementarFecha271
  L__IncrementarFecha272
  L__IncrementarFecha273
  L__IncrementarFecha274
  L__IncrementarFecha275
  L__IncrementarFecha276
  L__IncrementarFecha277
  L__IncrementarFecha278
  L__IncrementarFecha279
  L__IncrementarFecha280
  L__IncrementarFecha281
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear290
  L__Muestrear291
  L__Muestrear292
  L__Muestrear293
  L__Muestrear294
  L__Muestrear295
  L__Muestrear296
  L__Muestrear297
  L_end_spi_1
  _spi_1
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L__spi_1306
  L__spi_1307
  L__spi_1308
  L__spi_1309
  L__spi_1310
  L__spi_1311
  L__spi_1312
  L__spi_1313
  L__spi_1314
  L__spi_1315
  L__spi_1316
  L__spi_1317
  L__spi_1318
  L__spi_1319
  L__spi_1320
  L__spi_1321
  L__spi_1322
  L__spi_1323
  L__spi_1324
  L__spi_1325
  L__spi_1326
  L__spi_1327
  L__spi_1328
  L__spi_1329
  L__spi_1330
  L_end_int_1
  _int_1
  L__int_1332
  L__int_1333
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int335
  L__Timer1Int336
  L__Timer1Int337
  L__Timer1Int338
  L__Timer1Int339
  L__Timer1Int340
  L_end_urx_1
  _urx_1
  L__urx_1342
  L__urx_1343
  L__urx_1344
  L__urx_1345
  L__urx_1346
  L__urx_1347
  L__urx_1348
  L__urx_1349
  L__urx_1350
  L__urx_1351
  L__urx_1352
  L__urx_1353
  L__urx_1354
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  L_SPI1_Read0
  L_SPI1_Read1
  L_SPI1_Read2
  L_SPI1_Read3
  L_SPI2_Read4
  L_SPI2_Read5
  L_SPI2_Read6
  L_SPI2_Read7
  L_end_SPI1_Read
  _SPI1_Read
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI2_Read
  _SPI2_Read
  L_end_SPI2_Write
  _SPI2_Write
  L_end_SPI2_Init_Advanced
  _SPI2_Init_Advanced
  L_end_SPI2_Init
  _SPI2_Init
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init14
  L_UART1_Init15
  L_UART1_Init_Advanced16
  L_UART1_Init_Advanced17
  L_UART1_Init_Advanced18
  L_UART1_Init_Advanced19
  L_UART1_Init_Advanced20
  L_UART1_Init_Advanced21
  L_UART1_Init_Advanced22
  L_UART1_Init_Advanced23
  L_UART1_Init_Advanced24
  L_UART2_Write25
  L_UART2_Write26
  L_UART2_Write_Text27
  L_UART2_Write_Text28
  L_UART2_Read_Text29
  L_UART2_Read_Text30
  L_UART2_Read_Text31
  L_UART2_Read_Text32
  L_UART2_Read_Text33
  L_UART2_Read_Text34
  L_UART2_Read_Text35
  L_UART2_Read_Text36
  L_UART2_Read_Text37
  L_UART2_Init38
  L_UART2_Init39
  L_UART2_Init40
  L_UART2_Init_Advanced41
  L_UART2_Init_Advanced42
  L_UART2_Init_Advanced43
  L_UART2_Init_Advanced44
  L_UART2_Init_Advanced45
  L_UART2_Init_Advanced46
  L_UART2_Init_Advanced47
  L_UART2_Init_Advanced48
  L_UART2_Init_Advanced49
  L_UART_Write_Text50
  L_UART_Write_Text51
  L_UART_Read_Text52
  L_UART_Read_Text53
  L_UART_Read_Text54
  L_UART_Read_Text55
  L_UART_Read_Text56
  L_UART_Read_Text57
  L_UART_Read_Text58
  L_UART_Read_Text59
  L_UART_Read_Text60
  L__UART1_Read_Text61
  L__UART1_Init62
  L__UART1_Init63
  L__UART1_Init64
  L__UART2_Read_Text65
  L__UART2_Init66
  L__UART2_Init67
  L__UART2_Init68
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text71
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text75
  L__UART1_Read_Text76
  L__UART1_Read_Text77
  L__UART1_Read_Text78
  L__UART1_Read_Text79
  L__UART1_Read_Text80
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init83
  L__UART1_Init84
  L__UART1_Init85
  L__UART1_Init86
  L__UART1_Init87
  L__UART1_Init88
  L__UART1_Init89
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced91
  L__UART1_Init_Advanced92
  L__UART1_Init_Advanced93
  L__UART1_Init_Advanced94
  L__UART1_Init_Advanced95
  L__UART1_Init_Advanced96
  L__UART1_Init_Advanced97
  L__UART1_Init_Advanced98
  L__UART1_Init_Advanced99
  L__UART1_Init_Advanced100
  L__UART1_Init_Advanced101
  L__UART1_Init_Advanced102
  L__UART1_Init_Advanced103
  L__UART1_Init_Advanced104
  L__UART1_Init_Advanced105
  L_end_UART2_Write
  _UART2_Write
  L_end_UART2_Write_Text
  _UART2_Write_Text
  L__UART2_Write_Text108
  L_end_UART2_Data_Ready
  _UART2_Data_Ready
  L_end_UART2_Read
  _UART2_Read
  L_end_UART2_Read_Text
  _UART2_Read_Text
  L__UART2_Read_Text112
  L__UART2_Read_Text113
  L__UART2_Read_Text114
  L__UART2_Read_Text115
  L__UART2_Read_Text116
  L__UART2_Read_Text117
  L_end_UART2_Tx_Idle
  _UART2_Tx_Idle
  L_end_UART2_Init
  _UART2_Init
  L__UART2_Init120
  L__UART2_Init121
  L__UART2_Init122
  L__UART2_Init123
  L__UART2_Init124
  L__UART2_Init125
  L__UART2_Init126
  L_end_UART2_Init_Advanced
  _UART2_Init_Advanced
  L__UART2_Init_Advanced128
  L__UART2_Init_Advanced129
  L__UART2_Init_Advanced130
  L__UART2_Init_Advanced131
  L__UART2_Init_Advanced132
  L__UART2_Init_Advanced133
  L__UART2_Init_Advanced134
  L__UART2_Init_Advanced135
  L__UART2_Init_Advanced136
  L__UART2_Init_Advanced137
  L__UART2_Init_Advanced138
  L__UART2_Init_Advanced139
  L__UART2_Init_Advanced140
  L__UART2_Init_Advanced141
  L__UART2_Init_Advanced142
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text146
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text150
  L__UART_Read_Text151
  L__UART_Read_Text152
  L__UART_Read_Text153
  L__UART_Read_Text154
  L__UART_Read_Text155
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_GPS_init18
  L_GPS_init20
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_IncrementarFecha27
  L_IncrementarFecha28
  L_IncrementarFecha29
  L_IncrementarFecha30
  L_IncrementarFecha31
  L_IncrementarFecha32
  L_IncrementarFecha33
  L_IncrementarFecha34
  L_IncrementarFecha35
  L_IncrementarFecha36
  L_IncrementarFecha37
  L_IncrementarFecha38
  L_IncrementarFecha39
  L_IncrementarFecha40
  L_IncrementarFecha41
  L_IncrementarFecha42
  L_IncrementarFecha43
  L_IncrementarFecha44
  L_IncrementarFecha45
  L_IncrementarFecha46
  L_IncrementarFecha47
  L_IncrementarFecha48
  L_main49
  L_main50
  L_ConfiguracionPrincipal51
  L_InterrupcionP153
  L_InterrupcionP154
  L_Muestrear56
  L_Muestrear57
  L_Muestrear58
  L_Muestrear59
  L_Muestrear60
  L_Muestrear61
  L_Muestrear62
  L_Muestrear63
  L_Muestrear64
  L_Muestrear65
  L_Muestrear66
  L_Muestrear67
  L_Muestrear68
  L_Muestrear69
  L_Muestrear70
  L_Muestrear71
  L_Muestrear72
  L_Muestrear73
  L_Muestrear74
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_spi_1114
  L_spi_1115
  L_spi_1116
  L_spi_1117
  L_spi_1118
  L_spi_1119
  L_spi_1120
  L_spi_1121
  L_spi_1122
  L_spi_1123
  L_int_1124
  L_int_1125
  L_Timer1Int126
  L_Timer1Int127
  L_Timer1Int128
  L_Timer1Int129
  L_Timer1Int130
  L_Timer1Int131
  L_Timer1Int132
  L_Timer1Int133
  L_Timer1Int134
  L_Timer1Int135
  L_Timer1Int136
  L_Timer1Int137
  L_Timer1Int138
  L_Timer1Int139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L_urx_1150
  L_urx_1151
  L_urx_1152
  L_urx_1153
  L_urx_1154
  L_urx_1155
  L_urx_1156
  L_urx_1157
  L_urx_1158
  L_urx_1159
  L_urx_1160
  L_urx_1161
  L_urx_1162
  L__IncrementarFecha163
  L__IncrementarFecha164
  L__IncrementarFecha165
  L__IncrementarFecha166
  L__IncrementarFecha167
  L__IncrementarFecha168
  L__IncrementarFecha169
  L__IncrementarFecha170
  L__IncrementarFecha171
  L__IncrementarFecha172
  L__IncrementarFecha173
  L__IncrementarFecha174
  L__IncrementarFecha175
  L__IncrementarFecha176
  L__IncrementarFecha177
  L__IncrementarFecha178
  L__IncrementarFecha179
  L__IncrementarFecha180
  L__IncrementarFecha181
  L__IncrementarFecha182
  L__Muestrear183
  L__Muestrear184
  L__Muestrear185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__spi_1214
  L__spi_1215
  L__spi_1216
  L__spi_1217
  L__spi_1218
  L__spi_1219
  L__spi_1220
  L__spi_1221
  L__spi_1222
  L__spi_1223
  L__spi_1224
  L__spi_1225
  L__spi_1226
  L__spi_1227
  L__spi_1228
  L__spi_1229
  L__spi_1230
  L__spi_1231
  L__spi_1232
  L__Timer1Int233
  L__Timer1Int234
  L__Timer1Int235
  L__urx_1236
  L__urx_1237
  L__urx_1238
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init240
  L__ADXL355_init241
  L__ADXL355_init242
  L__ADXL355_init243
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data247
  L__ADXL355_read_data248
  L__ADXL355_read_data249
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha261
  L__IncrementarFecha262
  L__IncrementarFecha263
  L__IncrementarFecha264
  L__IncrementarFecha265
  L__IncrementarFecha266
  L__IncrementarFecha267
  L__IncrementarFecha268
  L__IncrementarFecha269
  L__IncrementarFecha270
  L__IncrementarFecha271
  L__IncrementarFecha272
  L__IncrementarFecha273
  L__IncrementarFecha274
  L__IncrementarFecha275
  L__IncrementarFecha276
  L__IncrementarFecha277
  L__IncrementarFecha278
  L__IncrementarFecha279
  L__IncrementarFecha280
  L__IncrementarFecha281
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear290
  L__Muestrear291
  L__Muestrear292
  L__Muestrear293
  L__Muestrear294
  L__Muestrear295
  L__Muestrear296
  L__Muestrear297
  L_end_spi_1
  _spi_1
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L__spi_1306
  L__spi_1307
  L__spi_1308
  L__spi_1309
  L__spi_1310
  L__spi_1311
  L__spi_1312
  L__spi_1313
  L__spi_1314
  L__spi_1315
  L__spi_1316
  L__spi_1317
  L__spi_1318
  L__spi_1319
  L__spi_1320
  L__spi_1321
  L__spi_1322
  L__spi_1323
  L__spi_1324
  L__spi_1325
  L__spi_1326
  L__spi_1327
  L__spi_1328
  L__spi_1329
  L__spi_1330
  L_end_int_1
  _int_1
  L__int_1332
  L__int_1333
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int335
  L__Timer1Int336
  L__Timer1Int337
  L__Timer1Int338
  L__Timer1Int339
  L__Timer1Int340
  L_end_urx_1
  _urx_1
  L__urx_1342
  L__urx_1343
  L__urx_1344
  L__urx_1345
  L__urx_1346
  L__urx_1347
  L__urx_1348
  L__urx_1349
  L__urx_1350
  L__urx_1351
  L__urx_1352
  L__urx_1353
  L__urx_1354
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_GPS_init18
  L_GPS_init20
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_IncrementarFecha27
  L_IncrementarFecha28
  L_IncrementarFecha29
  L_IncrementarFecha30
  L_IncrementarFecha31
  L_IncrementarFecha32
  L_IncrementarFecha33
  L_IncrementarFecha34
  L_IncrementarFecha35
  L_IncrementarFecha36
  L_IncrementarFecha37
  L_IncrementarFecha38
  L_IncrementarFecha39
  L_IncrementarFecha40
  L_IncrementarFecha41
  L_IncrementarFecha42
  L_IncrementarFecha43
  L_IncrementarFecha44
  L_IncrementarFecha45
  L_IncrementarFecha46
  L_IncrementarFecha47
  L_IncrementarFecha48
  L_main49
  L_main50
  L_ConfiguracionPrincipal51
  L_InterrupcionP153
  L_InterrupcionP154
  L_Muestrear56
  L_Muestrear57
  L_Muestrear58
  L_Muestrear59
  L_Muestrear60
  L_Muestrear61
  L_Muestrear62
  L_Muestrear63
  L_Muestrear64
  L_Muestrear65
  L_Muestrear66
  L_Muestrear67
  L_Muestrear68
  L_Muestrear69
  L_Muestrear70
  L_Muestrear71
  L_Muestrear72
  L_Muestrear73
  L_Muestrear74
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_spi_1114
  L_spi_1115
  L_spi_1116
  L_spi_1117
  L_spi_1118
  L_spi_1119
  L_spi_1120
  L_spi_1121
  L_spi_1122
  L_spi_1123
  L_int_1124
  L_int_1125
  L_Timer1Int126
  L_Timer1Int127
  L_Timer1Int128
  L_Timer1Int129
  L_Timer1Int130
  L_Timer1Int131
  L_Timer1Int132
  L_Timer1Int133
  L_Timer1Int134
  L_Timer1Int135
  L_Timer1Int136
  L_Timer1Int137
  L_Timer1Int138
  L_Timer1Int139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L_urx_1150
  L_urx_1151
  L_urx_1152
  L_urx_1153
  L_urx_1154
  L_urx_1155
  L_urx_1156
  L_urx_1157
  L_urx_1158
  L_urx_1159
  L_urx_1160
  L_urx_1161
  L_urx_1162
  L__IncrementarFecha163
  L__IncrementarFecha164
  L__IncrementarFecha165
  L__IncrementarFecha166
  L__IncrementarFecha167
  L__IncrementarFecha168
  L__IncrementarFecha169
  L__IncrementarFecha170
  L__IncrementarFecha171
  L__IncrementarFecha172
  L__IncrementarFecha173
  L__IncrementarFecha174
  L__IncrementarFecha175
  L__IncrementarFecha176
  L__IncrementarFecha177
  L__IncrementarFecha178
  L__IncrementarFecha179
  L__IncrementarFecha180
  L__IncrementarFecha181
  L__IncrementarFecha182
  L__Muestrear183
  L__Muestrear184
  L__Muestrear185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__spi_1214
  L__spi_1215
  L__spi_1216
  L__spi_1217
  L__spi_1218
  L__spi_1219
  L__spi_1220
  L__spi_1221
  L__spi_1222
  L__spi_1223
  L__spi_1224
  L__spi_1225
  L__spi_1226
  L__spi_1227
  L__spi_1228
  L__spi_1229
  L__spi_1230
  L__spi_1231
  L__spi_1232
  L__Timer1Int233
  L__Timer1Int234
  L__Timer1Int235
  L__urx_1236
  L__urx_1237
  L__urx_1238
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init240
  L__ADXL355_init241
  L__ADXL355_init242
  L__ADXL355_init243
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data247
  L__ADXL355_read_data248
  L__ADXL355_read_data249
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha261
  L__IncrementarFecha262
  L__IncrementarFecha263
  L__IncrementarFecha264
  L__IncrementarFecha265
  L__IncrementarFecha266
  L__IncrementarFecha267
  L__IncrementarFecha268
  L__IncrementarFecha269
  L__IncrementarFecha270
  L__IncrementarFecha271
  L__IncrementarFecha272
  L__IncrementarFecha273
  L__IncrementarFecha274
  L__IncrementarFecha275
  L__IncrementarFecha276
  L__IncrementarFecha277
  L__IncrementarFecha278
  L__IncrementarFecha279
  L__IncrementarFecha280
  L__IncrementarFecha281
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear290
  L__Muestrear291
  L__Muestrear292
  L__Muestrear293
  L__Muestrear294
  L__Muestrear295
  L__Muestrear296
  L__Muestrear297
  L_end_spi_1
  _spi_1
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L__spi_1306
  L__spi_1307
  L__spi_1308
  L__spi_1309
  L__spi_1310
  L__spi_1311
  L__spi_1312
  L__spi_1313
  L__spi_1314
  L__spi_1315
  L__spi_1316
  L__spi_1317
  L__spi_1318
  L__spi_1319
  L__spi_1320
  L__spi_1321
  L__spi_1322
  L__spi_1323
  L__spi_1324
  L__spi_1325
  L__spi_1326
  L__spi_1327
  L__spi_1328
  L__spi_1329
  L__spi_1330
  L_end_int_1
  _int_1
  L__int_1332
  L__int_1333
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int335
  L__Timer1Int336
  L__Timer1Int337
  L__Timer1Int338
  L__Timer1Int339
  L__Timer1Int340
  L_end_urx_1
  _urx_1
  L__urx_1342
  L__urx_1343
  L__urx_1344
  L__urx_1345
  L__urx_1346
  L__urx_1347
  L__urx_1348
  L__urx_1349
  L__urx_1350
  L__urx_1351
  L__urx_1352
  L__urx_1353
  L__urx_1354
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_IntToStrWithZeros37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStr43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongWordToStrWithZeros48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongToStr54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_LongIntToStrWithZeros62
  L_LongIntToStrWithZeros63
  L_Dec2Bcd64
  L_Dec2Bcd65
  L_Rtrim66
  L_Rtrim67
  L_Rtrim68
  L_Rtrim69
  L_Ltrim70
  L_Ltrim71
  L_Ltrim72
  L_Ltrim73
  L_Ltrim74
  L_Ltrim75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L_FloatToStr94
  L_FloatToStr95
  L_FloatToStr96
  L_FloatToStr97
  L__ShortToStr98
  L__IntToStr99
  L__LongToStr100
  L__Rtrim101
  L__Rtrim102
  L__Rtrim103
  L__Ltrim104
  L__Ltrim105
  L__Ltrim106
  L__Ltrim107
  L__FloatToStr108
  L__FloatToStr109
  L__FloatToStr110
  L__FloatToStr111
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L__ByteToStr119
  L__ByteToStr120
  L_end_WordToStr
  _WordToStr
  L__WordToStr122
  L__WordToStr123
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros125
  L__WordToStrWithZeros126
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr128
  L__ShortToStr129
  L__ShortToStr130
  L__ShortToStr131
  L_end_IntToStr
  _IntToStr
  L__IntToStr133
  L__IntToStr134
  L__IntToStr135
  L__IntToStr136
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros138
  L__IntToStrWithZeros139
  L__IntToStrWithZeros140
  L__IntToStrWithZeros141
  L__IntToStrWithZeros142
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr144
  L__LongWordToStr145
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros147
  L__LongWordToStrWithZeros148
  L_end_LongToStr
  _LongToStr
  L__LongToStr150
  L__LongToStr151
  L__LongToStr152
  L__LongToStr153
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros155
  L__LongIntToStrWithZeros156
  L__LongIntToStrWithZeros157
  L__LongIntToStrWithZeros158
  L__LongIntToStrWithZeros159
  L_end_Dec2Bcd
  _Dec2Bcd
  L__Dec2Bcd161
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L_end_Rtrim
  _Rtrim
  L__Rtrim166
  L__Rtrim167
  L_end_Ltrim
  _Ltrim
  L__Ltrim169
  L__Ltrim170
  L__Ltrim171
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr173
  L__FloatToStr174
  L__FloatToStr175
  L__FloatToStr176
  L__FloatToStr177
  L__FloatToStr178
  L__FloatToStr179
  L__FloatToStr180
  L__FloatToStr181
  L__FloatToStr182
  L__FloatToStr183
  L__FloatToStr184
  L__FloatToStr185
  L__FloatToStr186
  L__FloatToStr187
  L__FloatToStr188
  L__FloatToStr189
  L__FloatToStr190
  L__FloatToStr191
  L_abs0
  L___Lib_CStdlib_strtod1
  L___Lib_CStdlib_strtod2
  L___Lib_CStdlib_strtod3
  L___Lib_CStdlib_strtod4
  L___Lib_CStdlib_strtod5
  L___Lib_CStdlib_strtod6
  L___Lib_CStdlib_strtod7
  L___Lib_CStdlib_strtod8
  L___Lib_CStdlib_strtod9
  L___Lib_CStdlib_strtod10
  L___Lib_CStdlib_strtod11
  L___Lib_CStdlib_strtod12
  L___Lib_CStdlib_strtod13
  L___Lib_CStdlib_strtod14
  L___Lib_CStdlib_strtod15
  L___Lib_CStdlib_strtod16
  L___Lib_CStdlib_strtod17
  L___Lib_CStdlib_strtod18
  L___Lib_CStdlib_strtod19
  L___Lib_CStdlib_strtod20
  L___Lib_CStdlib_strtod21
  L___Lib_CStdlib_strtod22
  L___Lib_CStdlib_strtod23
  L___Lib_CStdlib_strtod24
  L___Lib_CStdlib_strtod25
  L___Lib_CStdlib_strtod26
  L___Lib_CStdlib_strtod27
  L___Lib_CStdlib_strtod28
  L___Lib_CStdlib_strtod29
  L___Lib_CStdlib_strtod30
  L___Lib_CStdlib_strtod31
  L___Lib_CStdlib_strtod32
  L___Lib_CStdlib_strtod33
  L___Lib_CStdlib_strtod34
  L___Lib_CStdlib_strtod35
  L___Lib_CStdlib_strtod36
  L___Lib_CStdlib_strtod37
  L___Lib_CStdlib_strtod38
  L___Lib_CStdlib_strtod39
  L___Lib_CStdlib_strtod40
  L___Lib_CStdlib_strtod41
  L___Lib_CStdlib_strtod42
  L___Lib_CStdlib_strtod43
  L___Lib_CStdlib_strtod44
  L___Lib_CStdlib_strtod45
  L___Lib_CStdlib_strtod46
  L___Lib_CStdlib_strtod47
  L___Lib_CStdlib_strtod48
  L___Lib_CStdlib_strtod49
  L___Lib_CStdlib_strtod50
  L___Lib_CStdlib_strtod51
  L___Lib_CStdlib_strtod52
  ___atoi_skipws_atoi
  L_atoi53
  L_atoi54
  L_atoi55
  L_atoi56
  L_atoi57
  L_atoi58
  ___atoi_conv_atoi
  L_atoi59
  L_atoi60
  ___atol_skipws_atol
  L_atol61
  L_atol62
  L_atol63
  L_atol64
  L_atol65
  L_atol66
  ___atol_conv_atol
  L_atol67
  L_atol68
  L_labs69
  L_max70
  L_min71
  L_rand72
  L_xtoi73
  L_xtoi74
  L_xtoi75
  L_xtoi76
  L_xtoi77
  L_xtoi78
  L_xtoi79
  L_xtoi80
  L_xtoi81
  L_xtoi82
  L_xtoi83
  L___Lib_CStdlib_strtod84
  L___Lib_CStdlib_strtod85
  L___Lib_CStdlib_strtod86
  L___Lib_CStdlib_strtod87
  L___Lib_CStdlib_strtod88
  L___Lib_CStdlib_strtod89
  L___Lib_CStdlib_strtod90
  L___Lib_CStdlib_strtod91
  L___Lib_CStdlib_strtod92
  L___Lib_CStdlib_strtod93
  L___Lib_CStdlib_strtod94
  L___Lib_CStdlib_strtod95
  L___Lib_CStdlib_strtod96
  L__atoi97
  L__atoi98
  L__atoi99
  L__atol100
  L__atol101
  L__atol102
  L_end_abs
  _abs
  L__abs104
  L_end_strtod
  __Lib_CStdlib_strtod
  L___Lib_CStdlib_strtod106
  L___Lib_CStdlib_strtod107
  L___Lib_CStdlib_strtod108
  L___Lib_CStdlib_strtod109
  L___Lib_CStdlib_strtod110
  L___Lib_CStdlib_strtod111
  L___Lib_CStdlib_strtod112
  L___Lib_CStdlib_strtod113
  L___Lib_CStdlib_strtod114
  L___Lib_CStdlib_strtod115
  L___Lib_CStdlib_strtod116
  L___Lib_CStdlib_strtod117
  L___Lib_CStdlib_strtod118
  L___Lib_CStdlib_strtod119
  L___Lib_CStdlib_strtod120
  L___Lib_CStdlib_strtod121
  L___Lib_CStdlib_strtod122
  L___Lib_CStdlib_strtod123
  L___Lib_CStdlib_strtod124
  L___Lib_CStdlib_strtod125
  L___Lib_CStdlib_strtod126
  L___Lib_CStdlib_strtod127
  L___Lib_CStdlib_strtod128
  L___Lib_CStdlib_strtod129
  L___Lib_CStdlib_strtod130
  L___Lib_CStdlib_strtod131
  L___Lib_CStdlib_strtod132
  L___Lib_CStdlib_strtod133
  L_end_atof
  _atof
  L_end_atoi
  _atoi
  L__atoi136
  L__atoi137
  L__atoi138
  L__atoi139
  L__atoi140
  L__atoi141
  L_end_atol
  _atol
  L__atol143
  L__atol144
  L__atol145
  L__atol146
  L__atol147
  L__atol148
  L_end_div
  _div
  L_end_ldiv
  _ldiv
  L_end_uldiv
  _uldiv
  L_end_labs
  _labs
  L__labs153
  L_end_max
  _max
  L__max155
  L_end_min
  _min
  L__min157
  L_end_srand
  _srand
  L_end_rand
  _rand
  L__rand160
  L_end_xtoi
  _xtoi
  L__xtoi162
  L__xtoi163
  L__xtoi164
  L__xtoi165
  L__xtoi166
  L__xtoi167
  L__xtoi168
  L_islower0
  L_islower1
  L_isupper2
  L_isupper3
  L_isalpha4
  L_isalpha5
  L_iscntrl6
  L_iscntrl7
  L_isdigit8
  L_isdigit9
  L_isalnum10
  L_isalnum11
  L_isspace12
  L_isspace13
  L_isspace14
  L_isspace15
  L_ispunct16
  L_ispunct17
  L_ispunct18
  L_ispunct19
  L_ispunct20
  L_ispunct21
  L_ispunct22
  L_ispunct23
  L_isgraph24
  L_isgraph25
  L_isxdigit26
  L_isxdigit27
  L_isxdigit28
  L_isxdigit29
  L_tolower30
  L_tolower31
  L_tolower32
  L_toupper33
  L_toupper34
  L_toupper35
  L__isspace36
  L__isspace37
  L__isspace38
  L__tolower39
  L__tolower40
  L__tolower41
  L__toupper42
  L__toupper43
  L__toupper44
  L_end_islower
  _islower
  L__islower46
  L__islower47
  L_end_isupper
  _isupper
  L__isupper49
  L__isupper50
  L_end_isalpha
  _isalpha
  L__isalpha52
  L__isalpha53
  L_end_iscntrl
  _iscntrl
  L__iscntrl55
  L__iscntrl56
  L_end_isdigit
  _isdigit
  L__isdigit58
  L__isdigit59
  L_end_isalnum
  _isalnum
  L__isalnum61
  L__isalnum62
  L__isalnum63
  L_end_isspace
  _isspace
  L__isspace65
  L__isspace66
  L__isspace67
  L_end_ispunct
  _ispunct
  L__ispunct69
  L__ispunct70
  L__ispunct71
  L__ispunct72
  L__ispunct73
  L__ispunct74
  L__ispunct75
  L__ispunct76
  L_end_isgraph
  _isgraph
  L__isgraph78
  L__isgraph79
  L__isgraph80
  L__isgraph81
  L_end_isxdigit
  _isxdigit
  L__isxdigit83
  L__isxdigit84
  L__isxdigit85
  L__isxdigit86
  L_end_tolower
  _tolower
  L__tolower88
  L__tolower89
  L_end_toupper
  _toupper
  L__toupper91
  L__toupper92
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_GPS_init18
  L_GPS_init20
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_IncrementarFecha27
  L_IncrementarFecha28
  L_IncrementarFecha29
  L_IncrementarFecha30
  L_IncrementarFecha31
  L_IncrementarFecha32
  L_IncrementarFecha33
  L_IncrementarFecha34
  L_IncrementarFecha35
  L_IncrementarFecha36
  L_IncrementarFecha37
  L_IncrementarFecha38
  L_IncrementarFecha39
  L_IncrementarFecha40
  L_IncrementarFecha41
  L_IncrementarFecha42
  L_IncrementarFecha43
  L_IncrementarFecha44
  L_IncrementarFecha45
  L_IncrementarFecha46
  L_IncrementarFecha47
  L_IncrementarFecha48
  L_main49
  L_main50
  L_ConfiguracionPrincipal51
  L_InterrupcionP153
  L_InterrupcionP154
  L_Muestrear56
  L_Muestrear57
  L_Muestrear58
  L_Muestrear59
  L_Muestrear60
  L_Muestrear61
  L_Muestrear62
  L_Muestrear63
  L_Muestrear64
  L_Muestrear65
  L_Muestrear66
  L_Muestrear67
  L_Muestrear68
  L_Muestrear69
  L_Muestrear70
  L_Muestrear71
  L_Muestrear72
  L_Muestrear73
  L_Muestrear74
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_spi_1114
  L_spi_1115
  L_spi_1116
  L_spi_1117
  L_spi_1118
  L_spi_1119
  L_spi_1120
  L_spi_1121
  L_spi_1122
  L_spi_1123
  L_int_1124
  L_int_1125
  L_Timer1Int126
  L_Timer1Int127
  L_Timer1Int128
  L_Timer1Int129
  L_Timer1Int130
  L_Timer1Int131
  L_Timer1Int132
  L_Timer1Int133
  L_Timer1Int134
  L_Timer1Int135
  L_Timer1Int136
  L_Timer1Int137
  L_Timer1Int138
  L_Timer1Int139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L_urx_1150
  L_urx_1151
  L_urx_1152
  L_urx_1153
  L_urx_1154
  L_urx_1155
  L_urx_1156
  L_urx_1157
  L_urx_1158
  L_urx_1159
  L_urx_1160
  L_urx_1161
  L_urx_1162
  L__IncrementarFecha163
  L__IncrementarFecha164
  L__IncrementarFecha165
  L__IncrementarFecha166
  L__IncrementarFecha167
  L__IncrementarFecha168
  L__IncrementarFecha169
  L__IncrementarFecha170
  L__IncrementarFecha171
  L__IncrementarFecha172
  L__IncrementarFecha173
  L__IncrementarFecha174
  L__IncrementarFecha175
  L__IncrementarFecha176
  L__IncrementarFecha177
  L__IncrementarFecha178
  L__IncrementarFecha179
  L__IncrementarFecha180
  L__IncrementarFecha181
  L__IncrementarFecha182
  L__Muestrear183
  L__Muestrear184
  L__Muestrear185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__spi_1214
  L__spi_1215
  L__spi_1216
  L__spi_1217
  L__spi_1218
  L__spi_1219
  L__spi_1220
  L__spi_1221
  L__spi_1222
  L__spi_1223
  L__spi_1224
  L__spi_1225
  L__spi_1226
  L__spi_1227
  L__spi_1228
  L__spi_1229
  L__spi_1230
  L__spi_1231
  L__spi_1232
  L__Timer1Int233
  L__Timer1Int234
  L__Timer1Int235
  L__urx_1236
  L__urx_1237
  L__urx_1238
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init240
  L__ADXL355_init241
  L__ADXL355_init242
  L__ADXL355_init243
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data247
  L__ADXL355_read_data248
  L__ADXL355_read_data249
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha261
  L__IncrementarFecha262
  L__IncrementarFecha263
  L__IncrementarFecha264
  L__IncrementarFecha265
  L__IncrementarFecha266
  L__IncrementarFecha267
  L__IncrementarFecha268
  L__IncrementarFecha269
  L__IncrementarFecha270
  L__IncrementarFecha271
  L__IncrementarFecha272
  L__IncrementarFecha273
  L__IncrementarFecha274
  L__IncrementarFecha275
  L__IncrementarFecha276
  L__IncrementarFecha277
  L__IncrementarFecha278
  L__IncrementarFecha279
  L__IncrementarFecha280
  L__IncrementarFecha281
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear290
  L__Muestrear291
  L__Muestrear292
  L__Muestrear293
  L__Muestrear294
  L__Muestrear295
  L__Muestrear296
  L__Muestrear297
  L_end_spi_1
  _spi_1
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L__spi_1306
  L__spi_1307
  L__spi_1308
  L__spi_1309
  L__spi_1310
  L__spi_1311
  L__spi_1312
  L__spi_1313
  L__spi_1314
  L__spi_1315
  L__spi_1316
  L__spi_1317
  L__spi_1318
  L__spi_1319
  L__spi_1320
  L__spi_1321
  L__spi_1322
  L__spi_1323
  L__spi_1324
  L__spi_1325
  L__spi_1326
  L__spi_1327
  L__spi_1328
  L__spi_1329
  L__spi_1330
  L_end_int_1
  _int_1
  L__int_1332
  L__int_1333
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int335
  L__Timer1Int336
  L__Timer1Int337
  L__Timer1Int338
  L__Timer1Int339
  L__Timer1Int340
  L_end_urx_1
  _urx_1
  L__urx_1342
  L__urx_1343
  L__urx_1344
  L__urx_1345
  L__urx_1346
  L__urx_1347
  L__urx_1348
  L__urx_1349
  L__urx_1350
  L__urx_1351
  L__urx_1352
  L__urx_1353
  L__urx_1354
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_GPS_init18
  L_GPS_init20
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_IncrementarFecha27
  L_IncrementarFecha28
  L_IncrementarFecha29
  L_IncrementarFecha30
  L_IncrementarFecha31
  L_IncrementarFecha32
  L_IncrementarFecha33
  L_IncrementarFecha34
  L_IncrementarFecha35
  L_IncrementarFecha36
  L_IncrementarFecha37
  L_IncrementarFecha38
  L_IncrementarFecha39
  L_IncrementarFecha40
  L_IncrementarFecha41
  L_IncrementarFecha42
  L_IncrementarFecha43
  L_IncrementarFecha44
  L_IncrementarFecha45
  L_IncrementarFecha46
  L_IncrementarFecha47
  L_IncrementarFecha48
  L_main49
  L_main50
  L_ConfiguracionPrincipal51
  L_InterrupcionP153
  L_InterrupcionP154
  L_Muestrear56
  L_Muestrear57
  L_Muestrear58
  L_Muestrear59
  L_Muestrear60
  L_Muestrear61
  L_Muestrear62
  L_Muestrear63
  L_Muestrear64
  L_Muestrear65
  L_Muestrear66
  L_Muestrear67
  L_Muestrear68
  L_Muestrear69
  L_Muestrear70
  L_Muestrear71
  L_Muestrear72
  L_Muestrear73
  L_Muestrear74
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_spi_1114
  L_spi_1115
  L_spi_1116
  L_spi_1117
  L_spi_1118
  L_spi_1119
  L_spi_1120
  L_spi_1121
  L_spi_1122
  L_spi_1123
  L_int_1124
  L_int_1125
  L_Timer1Int126
  L_Timer1Int127
  L_Timer1Int128
  L_Timer1Int129
  L_Timer1Int130
  L_Timer1Int131
  L_Timer1Int132
  L_Timer1Int133
  L_Timer1Int134
  L_Timer1Int135
  L_Timer1Int136
  L_Timer1Int137
  L_Timer1Int138
  L_Timer1Int139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L_urx_1150
  L_urx_1151
  L_urx_1152
  L_urx_1153
  L_urx_1154
  L_urx_1155
  L_urx_1156
  L_urx_1157
  L_urx_1158
  L_urx_1159
  L_urx_1160
  L_urx_1161
  L_urx_1162
  L__IncrementarFecha163
  L__IncrementarFecha164
  L__IncrementarFecha165
  L__IncrementarFecha166
  L__IncrementarFecha167
  L__IncrementarFecha168
  L__IncrementarFecha169
  L__IncrementarFecha170
  L__IncrementarFecha171
  L__IncrementarFecha172
  L__IncrementarFecha173
  L__IncrementarFecha174
  L__IncrementarFecha175
  L__IncrementarFecha176
  L__IncrementarFecha177
  L__IncrementarFecha178
  L__IncrementarFecha179
  L__IncrementarFecha180
  L__IncrementarFecha181
  L__IncrementarFecha182
  L__Muestrear183
  L__Muestrear184
  L__Muestrear185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__spi_1214
  L__spi_1215
  L__spi_1216
  L__spi_1217
  L__spi_1218
  L__spi_1219
  L__spi_1220
  L__spi_1221
  L__spi_1222
  L__spi_1223
  L__spi_1224
  L__spi_1225
  L__spi_1226
  L__spi_1227
  L__spi_1228
  L__spi_1229
  L__spi_1230
  L__spi_1231
  L__spi_1232
  L__Timer1Int233
  L__Timer1Int234
  L__Timer1Int235
  L__urx_1236
  L__urx_1237
  L__urx_1238
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init240
  L__ADXL355_init241
  L__ADXL355_init242
  L__ADXL355_init243
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data247
  L__ADXL355_read_data248
  L__ADXL355_read_data249
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha261
  L__IncrementarFecha262
  L__IncrementarFecha263
  L__IncrementarFecha264
  L__IncrementarFecha265
  L__IncrementarFecha266
  L__IncrementarFecha267
  L__IncrementarFecha268
  L__IncrementarFecha269
  L__IncrementarFecha270
  L__IncrementarFecha271
  L__IncrementarFecha272
  L__IncrementarFecha273
  L__IncrementarFecha274
  L__IncrementarFecha275
  L__IncrementarFecha276
  L__IncrementarFecha277
  L__IncrementarFecha278
  L__IncrementarFecha279
  L__IncrementarFecha280
  L__IncrementarFecha281
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear290
  L__Muestrear291
  L__Muestrear292
  L__Muestrear293
  L__Muestrear294
  L__Muestrear295
  L__Muestrear296
  L__Muestrear297
  L_end_spi_1
  _spi_1
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L__spi_1306
  L__spi_1307
  L__spi_1308
  L__spi_1309
  L__spi_1310
  L__spi_1311
  L__spi_1312
  L__spi_1313
  L__spi_1314
  L__spi_1315
  L__spi_1316
  L__spi_1317
  L__spi_1318
  L__spi_1319
  L__spi_1320
  L__spi_1321
  L__spi_1322
  L__spi_1323
  L__spi_1324
  L__spi_1325
  L__spi_1326
  L__spi_1327
  L__spi_1328
  L__spi_1329
  L__spi_1330
  L_end_int_1
  _int_1
  L__int_1332
  L__int_1333
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int335
  L__Timer1Int336
  L__Timer1Int337
  L__Timer1Int338
  L__Timer1Int339
  L__Timer1Int340
  L_end_urx_1
  _urx_1
  L__urx_1342
  L__urx_1343
  L__urx_1344
  L__urx_1345
  L__urx_1346
  L__urx_1347
  L__urx_1348
  L__urx_1349
  L__urx_1350
  L__urx_1351
  L__urx_1352
  L__urx_1353
  L__urx_1354
