;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 5/8/2022 20:16:43
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000040D5E  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000C3C  	3132
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000E84  	3716
0x002A	0x000000  	0
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x0010C8  	4296
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x0D5E	0x21BB6F  	MOV	#7094, W15
0x0D60	0x27FFF0  	MOV	#32767, W0
0x0D62	0xB7A020  	MOV	WREG, SPLIM
0x0D64	0x202010  	MOV	#513, W0
0x0D66	0xB7A032  	MOV	WREG, DSRPAG
0x0D68	0x200040  	MOV	#4, W0
0x0D6A	0xB72044  	IOR	CORCON
0x0D6C	0x00000002111A  	CALL	4378
;Acelerografo.c,78 :: 		void main()
;Acelerografo.c,81 :: 		ConfiguracionPrincipal();
0x0D70	0x781F8A  	PUSH	W10
0x0D72	0x07FC1A  	RCALL	_ConfiguracionPrincipal
;Acelerografo.c,82 :: 		GPS_init();                        // Inicializa el GPS
0x0D74	0x07FE4A  	RCALL	_GPS_init
;Acelerografo.c,83 :: 		DS3234_init();                     // inicializa el RTC
0x0D76	0x07FE6E  	RCALL	_DS3234_init
;Acelerografo.c,84 :: 		tasaMuestreo = 1;                  // 1=250Hz, 2=125Hz, 4=62.5Hz, 8=31.25Hz
0x0D78	0x21B931  	MOV	#lo_addr(_tasaMuestreo), W1
0x0D7A	0xB3C010  	MOV.B	#1, W0
0x0D7C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,85 :: 		ADXL355_init(tasaMuestreo);        // Inicializa el modulo ADXL con la tasa de muestreo requerida:
0x0D7E	0xB3C01A  	MOV.B	#1, W10
0x0D80	0x07FE87  	RCALL	_ADXL355_init
;Acelerografo.c,86 :: 		numTMR1 = (tasaMuestreo * 10) - 1; // Calcula el numero de veces que tienen que desbordarse el TMR1 para cada tasa de muestreo
0x0D82	0x21B930  	MOV	#lo_addr(_tasaMuestreo), W0
0x0D84	0xFB8090  	ZE	[W0], W1
0x0D86	0x2000A0  	MOV	#10, W0
0x0D88	0xB80900  	MUL.UU	W1, W0, W2
0x0D8A	0x21B880  	MOV	#lo_addr(_numTMR1), W0
0x0D8C	0x514861  	SUB.B	W2, #1, [W0]
;Acelerografo.c,91 :: 		i = 0;
0x0D8E	0xEF2000  	CLR	W0
0x0D90	0x88DC50  	MOV	W0, _i
;Acelerografo.c,92 :: 		j = 0;
0x0D92	0xEF2000  	CLR	W0
0x0D94	0x88DC60  	MOV	W0, _j
;Acelerografo.c,93 :: 		x = 0;
0x0D96	0xEF2000  	CLR	W0
0x0D98	0x88DC30  	MOV	W0, _x
;Acelerografo.c,94 :: 		y = 0;
0x0D9A	0xEF2000  	CLR	W0
0x0D9C	0x88DC20  	MOV	W0, _y
;Acelerografo.c,97 :: 		bufferSPI = 0; //**
0x0D9E	0x210AD1  	MOV	#lo_addr(_bufferSPI), W1
0x0DA0	0xEF2000  	CLR	W0
0x0DA2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,98 :: 		banLec = 0;
0x0DA4	0x21B7F1  	MOV	#lo_addr(_banLec), W1
0x0DA6	0xEF2000  	CLR	W0
0x0DA8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,99 :: 		banEsc = 0;
0x0DAA	0x21B901  	MOV	#lo_addr(_banEsc), W1
0x0DAC	0xEF2000  	CLR	W0
0x0DAE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,100 :: 		banCiclo = 0;
0x0DB0	0x21B911  	MOV	#lo_addr(_banCiclo), W1
0x0DB2	0xEF2000  	CLR	W0
0x0DB4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,101 :: 		banInicio = 0;
0x0DB6	0x21B921  	MOV	#lo_addr(_banInicio), W1
0x0DB8	0xEF2000  	CLR	W0
0x0DBA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,102 :: 		banOperacion = 0;
0x0DBC	0x21B8F1  	MOV	#lo_addr(_banOperacion), W1
0x0DBE	0xEF2000  	CLR	W0
0x0DC0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,103 :: 		tipoOperacion = 0;
0x0DC2	0x21B891  	MOV	#lo_addr(_tipoOperacion), W1
0x0DC4	0xEF2000  	CLR	W0
0x0DC6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,104 :: 		banMuestrear = 0; // Inicia el programa con esta bandera en bajo para permitir que la RPi envie la peticion de inicio de muestreo
0x0DC8	0x21B8E1  	MOV	#lo_addr(_banMuestrear), W1
0x0DCA	0xEF2000  	CLR	W0
0x0DCC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,105 :: 		SPI1BUF = 0x00;
0x0DCE	0xEF2248  	CLR	SPI1BUF
;Acelerografo.c,108 :: 		banSPI0 = 0;
0x0DD0	0x21BAB1  	MOV	#lo_addr(_banSPI0), W1
0x0DD2	0xEF2000  	CLR	W0
0x0DD4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,109 :: 		banSPI1 = 0;
0x0DD6	0x21BAC1  	MOV	#lo_addr(_banSPI1), W1
0x0DD8	0xEF2000  	CLR	W0
0x0DDA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,110 :: 		banSPI2 = 0;
0x0DDC	0x21BAD1  	MOV	#lo_addr(_banSPI2), W1
0x0DDE	0xEF2000  	CLR	W0
0x0DE0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,111 :: 		banSPI3 = 0;
0x0DE2	0x21BAA1  	MOV	#lo_addr(_banSPI3), W1
0x0DE4	0xEF2000  	CLR	W0
0x0DE6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,112 :: 		banSPI4 = 0;
0x0DE8	0x21BA71  	MOV	#lo_addr(_banSPI4), W1
0x0DEA	0xEF2000  	CLR	W0
0x0DEC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,113 :: 		banSPI5 = 0;
0x0DEE	0x21BA81  	MOV	#lo_addr(_banSPI5), W1
0x0DF0	0xEF2000  	CLR	W0
0x0DF2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,114 :: 		banSPI6 = 0;
0x0DF4	0x21BA91  	MOV	#lo_addr(_banSPI6), W1
0x0DF6	0xEF2000  	CLR	W0
0x0DF8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,115 :: 		banSPI7 = 0;
0x0DFA	0x21BB31  	MOV	#lo_addr(_banSPI7), W1
0x0DFC	0xEF2000  	CLR	W0
0x0DFE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,116 :: 		banSPI8 = 0;
0x0E00	0x21BB41  	MOV	#lo_addr(_banSPI8), W1
0x0E02	0xEF2000  	CLR	W0
0x0E04	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,117 :: 		banSPI9 = 0;
0x0E06	0x21BB51  	MOV	#lo_addr(_banSPI9), W1
0x0E08	0xEF2000  	CLR	W0
0x0E0A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,118 :: 		banSPIA = 0;
0x0E0C	0x21BB21  	MOV	#lo_addr(_banSPIA), W1
0x0E0E	0xEF2000  	CLR	W0
0x0E10	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,121 :: 		i_gps = 0;
0x0E12	0xEF2000  	CLR	W0
0x0E14	0x88DD70  	MOV	W0, _i_gps
;Acelerografo.c,122 :: 		byteGPS = 0;
0x0E16	0x21BB01  	MOV	#lo_addr(_byteGPS), W1
0x0E18	0xEF2000  	CLR	W0
0x0E1A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,123 :: 		banGPSI = 0;
0x0E1C	0x21BB11  	MOV	#lo_addr(_banGPSI), W1
0x0E1E	0xEF2000  	CLR	W0
0x0E20	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,124 :: 		banGPSC = 0;
0x0E22	0x21B9E1  	MOV	#lo_addr(_banGPSC), W1
0x0E24	0xEF2000  	CLR	W0
0x0E26	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,130 :: 		banSetReloj = 0;
0x0E28	0x21B9F1  	MOV	#lo_addr(_banSetReloj), W1
0x0E2A	0xEF2000  	CLR	W0
0x0E2C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,131 :: 		banSyncReloj = 0;
0x0E2E	0x21BA01  	MOV	#lo_addr(_banSyncReloj), W1
0x0E30	0xEF2000  	CLR	W0
0x0E32	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,132 :: 		fuenteReloj = 0;
0x0E34	0x21B9D1  	MOV	#lo_addr(_fuenteReloj), W1
0x0E36	0xEF2000  	CLR	W0
0x0E38	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,133 :: 		horaSistema = 0;
0x0E3A	0xEF2000  	CLR	W0
0x0E3C	0xEF2002  	CLR	W1
0x0E3E	0x88DCA0  	MOV	W0, _horaSistema
0x0E40	0x88DCB1  	MOV	W1, _horaSistema+2
;Acelerografo.c,134 :: 		fechaSistema = 0;
0x0E42	0xEF2000  	CLR	W0
0x0E44	0xEF2002  	CLR	W1
0x0E46	0x88DCC0  	MOV	W0, _fechaSistema
0x0E48	0x88DCD1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,137 :: 		contMuestras = 0;
0x0E4A	0x21B9C1  	MOV	#lo_addr(_contMuestras), W1
0x0E4C	0xEF2000  	CLR	W0
0x0E4E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,138 :: 		contCiclos = 0;
0x0E50	0x21BA31  	MOV	#lo_addr(_contCiclos), W1
0x0E52	0xEF2000  	CLR	W0
0x0E54	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,139 :: 		contFIFO = 0;
0x0E56	0xEF2000  	CLR	W0
0x0E58	0x88DD20  	MOV	W0, _contFIFO
;Acelerografo.c,140 :: 		numFIFO = 0;
0x0E5A	0x21BA61  	MOV	#lo_addr(_numFIFO), W1
0x0E5C	0xEF2000  	CLR	W0
0x0E5E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,141 :: 		numSetsFIFO = 0;
0x0E60	0x21BA21  	MOV	#lo_addr(_numSetsFIFO), W1
0x0E62	0xEF2000  	CLR	W0
0x0E64	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,142 :: 		contTimer1 = 0;
0x0E66	0x21BA11  	MOV	#lo_addr(_contTimer1), W1
0x0E68	0xEF2000  	CLR	W0
0x0E6A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,145 :: 		RP1 = 0;
0x0E6C	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,146 :: 		RP2 = 0;
0x0E6E	0xA98E14  	BCLR	LATB4_bit, BitPos(LATB4_bit+0)
;Acelerografo.c,147 :: 		TEST = 1;
0x0E70	0xA88E15  	BSET	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,152 :: 		while (1)
L_main49:
;Acelerografo.c,154 :: 		Delay_ms(100);
0x0E72	0x2000D8  	MOV	#13, W8
0x0E74	0x235077  	MOV	#13575, W7
L_main51:
0x0E76	0xED200E  	DEC	W7
0x0E78	0x3AFFFE  	BRA NZ	L_main51
0x0E7A	0xED2010  	DEC	W8
0x0E7C	0x3AFFFC  	BRA NZ	L_main51
;Acelerografo.c,155 :: 		}
0x0E7E	0x37FFF9  	BRA	L_main49
;Acelerografo.c,156 :: 		}
L_end_main:
0x0E80	0x78054F  	POP	W10
L__main_end_loop:
0x0E82	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_ConfiguracionPrincipal:
;Acelerografo.c,163 :: 		void ConfiguracionPrincipal()
;Acelerografo.c,167 :: 		CLKDIVbits.FRCDIV = 0;   // FIN=FRC/1
0x05A8	0x781F8A  	PUSH	W10
0x05AA	0x781F8B  	PUSH	W11
0x05AC	0x781F8C  	PUSH	W12
0x05AE	0x781F8D  	PUSH	W13
0x05B0	0x803A21  	MOV	CLKDIVbits, W1
0x05B2	0x2F8FF0  	MOV	#63743, W0
0x05B4	0x608000  	AND	W1, W0, W0
0x05B6	0xB7A744  	MOV	WREG, CLKDIVbits
;Acelerografo.c,168 :: 		CLKDIVbits.PLLPOST = 0;  // N2=2
0x05B8	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x05BA	0x784090  	MOV.B	[W0], W1
0x05BC	0xB3C3F0  	MOV.B	#63, W0
0x05BE	0x60C080  	AND.B	W1, W0, W1
0x05C0	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x05C2	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,169 :: 		CLKDIVbits.PLLPRE = 5;   // N1=7
0x05C4	0xB3C050  	MOV.B	#5, W0
0x05C6	0x784080  	MOV.B	W0, W1
0x05C8	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x05CA	0x68C090  	XOR.B	W1, [W0], W1
0x05CC	0x60C0FF  	AND.B	W1, #31, W1
0x05CE	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x05D0	0x68C090  	XOR.B	W1, [W0], W1
0x05D2	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x05D4	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,170 :: 		PLLFBDbits.PLLDIV = 150; // M=152
0x05D6	0x200960  	MOV	#150, W0
0x05D8	0x780080  	MOV	W0, W1
0x05DA	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x05DC	0x688090  	XOR	W1, [W0], W1
0x05DE	0x201FF0  	MOV	#511, W0
0x05E0	0x608080  	AND	W1, W0, W1
0x05E2	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x05E4	0x688090  	XOR	W1, [W0], W1
0x05E6	0x883A31  	MOV	W1, PLLFBDbits
;Acelerografo.c,173 :: 		ANSELA = 0;      // Configura PORTA como digital     *
0x05E8	0xEF2E0E  	CLR	ANSELA
;Acelerografo.c,174 :: 		ANSELB = 0;      // Configura PORTB como digital     *
0x05EA	0xEF2E1E  	CLR	ANSELB
;Acelerografo.c,175 :: 		TRISA2_bit = 0;  // Configura el pin A2 como salida  *
0x05EC	0xA94E00  	BCLR	TRISA2_bit, BitPos(TRISA2_bit+0)
;Acelerografo.c,176 :: 		TRISA3_bit = 0;  // Configura el pin A3 como salida  *
0x05EE	0xA96E00  	BCLR	TRISA3_bit, BitPos(TRISA3_bit+0)
;Acelerografo.c,177 :: 		TRISA4_bit = 0;  // Configura el pin A4 como salida  *
0x05F0	0xA98E00  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
;Acelerografo.c,178 :: 		TRISB4_bit = 0;  // Configura el pin B4 como salida  *
0x05F2	0xA98E10  	BCLR	TRISB4_bit, BitPos(TRISB4_bit+0)
;Acelerografo.c,179 :: 		TRISB12_bit = 0; // Configura el pin B12 como salida *
0x05F4	0xA98E11  	BCLR	TRISB12_bit, BitPos(TRISB12_bit+0)
;Acelerografo.c,181 :: 		TRISB10_bit = 1; // Configura el pin B10 como entrada *
0x05F6	0xA84E11  	BSET	TRISB10_bit, BitPos(TRISB10_bit+0)
;Acelerografo.c,182 :: 		TRISB11_bit = 1; // Configura el pin B11 como entrada *
0x05F8	0xA86E11  	BSET	TRISB11_bit, BitPos(TRISB11_bit+0)
;Acelerografo.c,183 :: 		TRISB13_bit = 1; // Configura el pin B13 como entrada *
0x05FA	0xA8AE11  	BSET	TRISB13_bit, BitPos(TRISB13_bit+0)
;Acelerografo.c,184 :: 		TRISB14_bit = 1;
0x05FC	0xA8CE11  	BSET	TRISB14_bit, BitPos(TRISB14_bit+0)
;Acelerografo.c,185 :: 		TRISB15_bit = 1; // Configura el pin B15 como entrada *
0x05FE	0xA8EE11  	BSET	TRISB15_bit, BitPos(TRISB15_bit+0)
;Acelerografo.c,187 :: 		INTCON2.GIE = 1; // Habilita las interrupciones globales *
0x0600	0xA8E8C3  	BSET	INTCON2, #15
;Acelerografo.c,190 :: 		RPINR18bits.U1RXR = 0x22; // Configura el pin RB2/RPI34 como Rx1 *
0x0602	0xB3C220  	MOV.B	#34, W0
0x0604	0x784080  	MOV.B	W0, W1
0x0606	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x0608	0x68C090  	XOR.B	W1, [W0], W1
0x060A	0xB3C7F0  	MOV.B	#127, W0
0x060C	0x60C080  	AND.B	W1, W0, W1
0x060E	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x0610	0x68C090  	XOR.B	W1, [W0], W1
0x0612	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x0614	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,191 :: 		RPOR0bits.RP35R = 0x01;   // Configura el Tx1 en el pin RB3/RP35 *
0x0616	0x201000  	MOV	#256, W0
0x0618	0x780080  	MOV	W0, W1
0x061A	0x206800  	MOV	#lo_addr(RPOR0bits), W0
0x061C	0x688090  	XOR	W1, [W0], W1
0x061E	0x23F000  	MOV	#16128, W0
0x0620	0x608080  	AND	W1, W0, W1
0x0622	0x206800  	MOV	#lo_addr(RPOR0bits), W0
0x0624	0x688090  	XOR	W1, [W0], W1
0x0626	0x883401  	MOV	W1, RPOR0bits
;Acelerografo.c,192 :: 		U1RXIE_bit = 1;           // Habilita la interrupcion por UART1 RX *
0x0628	0xA86821  	BSET	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Acelerografo.c,194 :: 		IPC2bits.U1RXIP = 0x04; // Prioridad de la interrupcion UART1 RX
0x062A	0x240000  	MOV	#16384, W0
0x062C	0x780080  	MOV	W0, W1
0x062E	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0630	0x688090  	XOR	W1, [W0], W1
0x0632	0x270000  	MOV	#28672, W0
0x0634	0x608080  	AND	W1, W0, W1
0x0636	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0638	0x688090  	XOR	W1, [W0], W1
0x063A	0x884221  	MOV	W1, IPC2bits
;Acelerografo.c,195 :: 		U1STAbits.URXISEL = 0x00;
0x063C	0x202220  	MOV	#lo_addr(U1STAbits), W0
0x063E	0x784090  	MOV.B	[W0], W1
0x0640	0xB3C3F0  	MOV.B	#63, W0
0x0642	0x60C080  	AND.B	W1, W0, W1
0x0644	0x202220  	MOV	#lo_addr(U1STAbits), W0
0x0646	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,196 :: 		UART1_Init(9600); // Inicializa el UART1 con una velocidad de 9600 baudios
0x0648	0x22580A  	MOV	#9600, W10
0x064A	0x20000B  	MOV	#0, W11
0x064C	0x07FEAC  	RCALL	_UART1_Init
;Acelerografo.c,208 :: 		SPI1STAT.SPIEN = 1;                                                                                                                                                 // Habilita el SPI1 *
0x064E	0xA8E241  	BSET	SPI1STAT, #15
;Acelerografo.c,209 :: 		SPI1_Init_Advanced(_SPI_SLAVE, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_1, _SPI_SS_ENABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_HIGH, _SPI_ACTIVE_2_IDLE); //*
0x0650	0x20003D  	MOV	#3, W13
0x0652	0x2001CC  	MOV	#28, W12
0x0654	0xEF2016  	CLR	W11
0x0656	0xEF2014  	CLR	W10
0x0658	0xEF2000  	CLR	W0
0x065A	0x781F80  	PUSH	W0
0x065C	0x200400  	MOV	#64, W0
0x065E	0x781F80  	PUSH	W0
0x0660	0x202000  	MOV	#512, W0
0x0662	0x781F80  	PUSH	W0
0x0664	0x200800  	MOV	#128, W0
0x0666	0x781F80  	PUSH	W0
0x0668	0x07FF4A  	RCALL	_SPI1_Init_Advanced
0x066A	0xB1008F  	SUB	#8, W15
;Acelerografo.c,210 :: 		SPI1IE_bit = 1;                                                                                                                                                     // Habilita la interrupcion por SPI1  *
0x066C	0xA84821  	BSET	SPI1IE_bit, BitPos(SPI1IE_bit+0)
;Acelerografo.c,211 :: 		SPI1IF_bit = 0;                                                                                                                                                     // Limpia la bandera de interrupcion por SPI *
0x066E	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Acelerografo.c,212 :: 		IPC2bits.SPI1IP = 0x03;                                                                                                                                             // Prioridad de la interrupcion SPI1
0x0670	0x203000  	MOV	#768, W0
0x0672	0x780080  	MOV	W0, W1
0x0674	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0676	0x688090  	XOR	W1, [W0], W1
0x0678	0x207000  	MOV	#1792, W0
0x067A	0x608080  	AND	W1, W0, W1
0x067C	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x067E	0x688090  	XOR	W1, [W0], W1
0x0680	0x884221  	MOV	W1, IPC2bits
;Acelerografo.c,215 :: 		RPINR22bits.SDI2R = 0x21; // Configura el pin RB1/RPI33 como SDI2 *
0x0682	0xB3C210  	MOV.B	#33, W0
0x0684	0x784080  	MOV.B	W0, W1
0x0686	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0688	0x68C090  	XOR.B	W1, [W0], W1
0x068A	0xB3C7F0  	MOV.B	#127, W0
0x068C	0x60C080  	AND.B	W1, W0, W1
0x068E	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0690	0x68C090  	XOR.B	W1, [W0], W1
0x0692	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0694	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,216 :: 		RPOR2bits.RP38R = 0x08;   // Configura el SDO2 en el pin RB6/RP38 *
0x0696	0xB3C080  	MOV.B	#8, W0
0x0698	0x784080  	MOV.B	W0, W1
0x069A	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x069C	0x68C090  	XOR.B	W1, [W0], W1
0x069E	0xB3C3F0  	MOV.B	#63, W0
0x06A0	0x60C080  	AND.B	W1, W0, W1
0x06A2	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x06A4	0x68C090  	XOR.B	W1, [W0], W1
0x06A6	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x06A8	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,217 :: 		RPOR1bits.RP37R = 0x09;   // Configura el SCK2 en el pin RB5/RP37 *
0x06AA	0x209000  	MOV	#2304, W0
0x06AC	0x780080  	MOV	W0, W1
0x06AE	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x06B0	0x688090  	XOR	W1, [W0], W1
0x06B2	0x23F000  	MOV	#16128, W0
0x06B4	0x608080  	AND	W1, W0, W1
0x06B6	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x06B8	0x688090  	XOR	W1, [W0], W1
0x06BA	0x883411  	MOV	W1, RPOR1bits
;Acelerografo.c,218 :: 		SPI2STAT.SPIEN = 1;       // Habilita el SPI2 *
0x06BC	0xA8E261  	BSET	SPI2STAT, #15
;Acelerografo.c,219 :: 		SPI2_Init();              // Inicializa el modulo SPI2
0x06BE	0x07FEFD  	RCALL	_SPI2_Init
;Acelerografo.c,220 :: 		CS_DS3234 = 1;            // Pone en alto el CS del RTC
0x06C0	0xA84E04  	BSET	LATA2_bit, BitPos(LATA2_bit+0)
;Acelerografo.c,221 :: 		CS_ADXL355 = 1;           // Pone en alto el CS del acelerometro
0x06C2	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;Acelerografo.c,224 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF | STANDBY); // Coloco el ADXL en modo STANDBY para pausar las conversiones y limpiar el FIFO
0x06C4	0xB3C05B  	MOV.B	#5, W11
0x06C6	0xB3C2DA  	MOV.B	#45, W10
0x06C8	0x07FF0C  	RCALL	_ADXL355_write_byte
;Acelerografo.c,228 :: 		RPINR0 = 0x2F00;        // Asigna INT1 al RB15/RPI47 (SQW)
0x06CA	0x22F000  	MOV	#12032, W0
0x06CC	0xB7A6A0  	MOV	WREG, RPINR0
;Acelerografo.c,229 :: 		INT1IE_bit = 1;         // Habilita la interrupcion externa INT1
0x06CE	0xA88822  	BSET	INT1IE_bit, BitPos(INT1IE_bit+0)
;Acelerografo.c,230 :: 		INT1IF_bit = 0;         // Limpia la bandera de interrupcion externa INT1
0x06D0	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Acelerografo.c,231 :: 		IPC5bits.INT1IP = 0x01; // Prioridad en la interrupocion externa 1
0x06D2	0xB3C010  	MOV.B	#1, W0
0x06D4	0x784080  	MOV.B	W0, W1
0x06D6	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x06D8	0x68C090  	XOR.B	W1, [W0], W1
0x06DA	0x60C0E7  	AND.B	W1, #7, W1
0x06DC	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x06DE	0x68C090  	XOR.B	W1, [W0], W1
0x06E0	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x06E2	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,234 :: 		T1CON = 0x0020;
0x06E4	0x200200  	MOV	#32, W0
0x06E6	0xB7A104  	MOV	WREG, T1CON
;Acelerografo.c,235 :: 		T1CON.TON = 0;        // Apaga el Timer1
0x06E8	0xA9E105  	BCLR	T1CON, #15
;Acelerografo.c,236 :: 		T1IE_bit = 1;         // Habilita la interrupcion de desbordamiento TMR1
0x06EA	0xA86820  	BSET	T1IE_bit, BitPos(T1IE_bit+0)
;Acelerografo.c,237 :: 		T1IF_bit = 0;         // Limpia la bandera de interrupcion del TMR1
0x06EC	0xA96800  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;Acelerografo.c,238 :: 		PR1 = 62500;          // Car ga el preload para un tiempo de 100ms
0x06EE	0x2F4240  	MOV	#62500, W0
0x06F0	0xB7A102  	MOV	WREG, PR1
;Acelerografo.c,239 :: 		IPC0bits.T1IP = 0x02; // Prioridad de la interrupcion por desbordamiento del TMR1
0x06F2	0x220000  	MOV	#8192, W0
0x06F4	0x780080  	MOV	W0, W1
0x06F6	0x208400  	MOV	#lo_addr(IPC0bits), W0
0x06F8	0x688090  	XOR	W1, [W0], W1
0x06FA	0x270000  	MOV	#28672, W0
0x06FC	0x608080  	AND	W1, W0, W1
0x06FE	0x208400  	MOV	#lo_addr(IPC0bits), W0
0x0700	0x688090  	XOR	W1, [W0], W1
0x0702	0x884201  	MOV	W1, IPC0bits
;Acelerografo.c,241 :: 		Delay_ms(200); // Espera hasta que se estabilicen los cambios
0x0704	0x200198  	MOV	#25, W8
0x0706	0x26A0E7  	MOV	#27150, W7
L_ConfiguracionPrincipal53:
0x0708	0xED200E  	DEC	W7
0x070A	0x3AFFFE  	BRA NZ	L_ConfiguracionPrincipal53
0x070C	0xED2010  	DEC	W8
0x070E	0x3AFFFC  	BRA NZ	L_ConfiguracionPrincipal53
0x0710	0x000000  	NOP
;Acelerografo.c,242 :: 		}
L_end_ConfiguracionPrincipal:
0x0712	0x7806CF  	POP	W13
0x0714	0x78064F  	POP	W12
0x0716	0x7805CF  	POP	W11
0x0718	0x78054F  	POP	W10
0x071A	0x060000  	RETURN
; end of _ConfiguracionPrincipal
_UART1_Init:
0x03A6	0xFA0008  	LNK	#8
;__Lib_UART_12_p24_p33.c,145 :: 		
;__Lib_UART_12_p24_p33.c,148 :: 		
0x03A8	0x2022A0  	MOV	#lo_addr(_UART1_Write), W0
0x03AA	0x8885A0  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p24_p33.c,149 :: 		
0x03AC	0x2FFFF0  	MOV	#lo_addr(_UART1_Read), W0
0x03AE	0x888590  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p24_p33.c,150 :: 		
0x03B0	0x2FFFF0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x03B2	0x888570  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p24_p33.c,151 :: 		
0x03B4	0x2FFFF0  	MOV	#lo_addr(_UART1_Tx_Idle), W0
0x03B6	0x888580  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p24_p33.c,156 :: 		
0x03B8	0xEF2220  	CLR	U1MODE
;__Lib_UART_12_p24_p33.c,157 :: 		
0x03BA	0x280000  	MOV	#32768, W0
0x03BC	0xB7A222  	MOV	WREG, U1STA
;__Lib_UART_12_p24_p33.c,161 :: 		
0x03BE	0xA96220  	BCLR	U1MODE, #3
;__Lib_UART_12_p24_p33.c,162 :: 		
0x03C0	0x07FF3B  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x03C2	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,164 :: 		
0x03C4	0x203E80  	MOV	#1000, W0
0x03C6	0x200001  	MOV	#0, W1
0x03C8	0x07006F  	RCALL	__Multiply_32x32
0x03CA	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,166 :: 		
0x03CC	0x07FF20  	RCALL	_Get_Fosc_Per_Cyc
0x03CE	0xDE0041  	LSR	W0, #1, W0
0x03D0	0x400064  	ADD	W0, #4, W0
0x03D2	0x780080  	MOV	W0, W1
0x03D4	0x470060  	ADD	W14, #0, W0
0x03D6	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init83:
0x03D8	0xE90081  	DEC	W1, W1
0x03DA	0x350003  	BRA LT	L__UART1_Init84
0x03DC	0xD01810  	SL	[W0], [W0++]
0x03DE	0xD29010  	RLC	[W0], [W0--]
0x03E0	0x37FFFB  	BRA	L__UART1_Init83
L__UART1_Init84:
;__Lib_UART_12_p24_p33.c,168 :: 		
0x03E2	0xBE9F82  	PUSH.D	W2
0x03E4	0xBE9F8A  	PUSH.D	W10
0x03E6	0xBE0002  	MOV.D	W2, W0
0x03E8	0x90010E  	MOV	[W14+0], W2
0x03EA	0x90019E  	MOV	[W14+2], W3
0x03EC	0xEB0200  	CLR	W4
0x03EE	0x07FF86  	RCALL	__Modulus_32x32
0x03F0	0xBE054F  	POP.D	W10
0x03F2	0xBE014F  	POP.D	W2
0x03F4	0x980720  	MOV	W0, [W14+4]
0x03F6	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,169 :: 		
0x03F8	0xBE9F8A  	PUSH.D	W10
; tmp end address is: 4 (W2)
0x03FA	0xBE0002  	MOV.D	W2, W0
0x03FC	0x90010E  	MOV	[W14+0], W2
0x03FE	0x90019E  	MOV	[W14+2], W3
0x0400	0xEB0200  	CLR	W4
0x0402	0x07FFA8  	RCALL	__Divide_32x32
0x0404	0xBE054F  	POP.D	W10
; tmp start address is: 6 (W3)
0x0406	0x780180  	MOV	W0, W3
0x0408	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,171 :: 		
0x040A	0x470060  	ADD	W14, #0, W0
0x040C	0xD10150  	LSR	[++W0], W2
0x040E	0xD380C0  	RRC	[--W0], W1
0x0410	0x470064  	ADD	W14, #4, W0
0x0412	0xE10830  	CP	W1, [W0++]
0x0414	0xE19020  	CPB	W2, [W0--]
0x0416	0x310007  	BRA GEU	L__UART1_Init62
L__UART1_Init85:
;__Lib_UART_12_p24_p33.c,172 :: 		
0x0418	0x418061  	ADD	W3, #1, W0
0x041A	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x041C	0x780280  	MOV	W0, W5
0x041E	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x0420	0x780105  	MOV	W5, W2
0x0422	0x780186  	MOV	W6, W3
0x0424	0x370002  	BRA	L_UART1_Init13
L__UART1_Init62:
;__Lib_UART_12_p24_p33.c,171 :: 		
0x0426	0x780103  	MOV	W3, W2
0x0428	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,172 :: 		
L_UART1_Init13:
;__Lib_UART_12_p24_p33.c,175 :: 		
; tmp start address is: 4 (W2)
0x042A	0x718002  	IOR	W3, W2, W0
0x042C	0x3A0033  	BRA NZ	L__UART1_Init64
L__UART1_Init86:
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,177 :: 		
0x042E	0x07FF04  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x0430	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,179 :: 		
0x0432	0x203E80  	MOV	#1000, W0
0x0434	0x200001  	MOV	#0, W1
0x0436	0x070038  	RCALL	__Multiply_32x32
0x0438	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,181 :: 		
0x043A	0x07FEE9  	RCALL	_Get_Fosc_Per_Cyc
0x043C	0xDE0041  	LSR	W0, #1, W0
0x043E	0xECA000  	INC2	W0
0x0440	0x780080  	MOV	W0, W1
0x0442	0x470060  	ADD	W14, #0, W0
0x0444	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init87:
0x0446	0xE90081  	DEC	W1, W1
0x0448	0x350003  	BRA LT	L__UART1_Init88
0x044A	0xD01810  	SL	[W0], [W0++]
0x044C	0xD29010  	RLC	[W0], [W0--]
0x044E	0x37FFFB  	BRA	L__UART1_Init87
L__UART1_Init88:
;__Lib_UART_12_p24_p33.c,183 :: 		
0x0450	0xBE9F82  	PUSH.D	W2
0x0452	0xBE0002  	MOV.D	W2, W0
0x0454	0x90010E  	MOV	[W14+0], W2
0x0456	0x90019E  	MOV	[W14+2], W3
0x0458	0xEB0200  	CLR	W4
0x045A	0x07FF50  	RCALL	__Modulus_32x32
0x045C	0xBE014F  	POP.D	W2
0x045E	0x980720  	MOV	W0, [W14+4]
0x0460	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,184 :: 		
0x0462	0xBE0002  	MOV.D	W2, W0
0x0464	0x90010E  	MOV	[W14+0], W2
0x0466	0x90019E  	MOV	[W14+2], W3
0x0468	0xEB0200  	CLR	W4
0x046A	0x07FF74  	RCALL	__Divide_32x32
; tmp end address is: 4 (W2)
; tmp start address is: 6 (W3)
0x046C	0x780180  	MOV	W0, W3
0x046E	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,186 :: 		
0x0470	0x470060  	ADD	W14, #0, W0
0x0472	0xD10150  	LSR	[++W0], W2
0x0474	0xD380C0  	RRC	[--W0], W1
0x0476	0x470064  	ADD	W14, #4, W0
0x0478	0xE10830  	CP	W1, [W0++]
0x047A	0xE19020  	CPB	W2, [W0--]
0x047C	0x310007  	BRA GEU	L__UART1_Init63
L__UART1_Init89:
;__Lib_UART_12_p24_p33.c,187 :: 		
0x047E	0x418061  	ADD	W3, #1, W0
0x0480	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x0482	0x780280  	MOV	W0, W5
0x0484	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x0486	0x780105  	MOV	W5, W2
0x0488	0x780186  	MOV	W6, W3
0x048A	0x370002  	BRA	L_UART1_Init15
L__UART1_Init63:
;__Lib_UART_12_p24_p33.c,186 :: 		
0x048C	0x780103  	MOV	W3, W2
0x048E	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,187 :: 		
L_UART1_Init15:
;__Lib_UART_12_p24_p33.c,189 :: 		
; tmp start address is: 4 (W2)
0x0490	0xA86220  	BSET	U1MODE, #3
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,190 :: 		
0x0492	0x370000  	BRA	L_UART1_Init14
L__UART1_Init64:
;__Lib_UART_12_p24_p33.c,175 :: 		
;__Lib_UART_12_p24_p33.c,190 :: 		
L_UART1_Init14:
;__Lib_UART_12_p24_p33.c,192 :: 		
; tmp start address is: 4 (W2)
0x0494	0x510061  	SUB	W2, #1, W0
0x0496	0x5980E0  	SUBB	W3, #0, W1
; tmp end address is: 4 (W2)
; tmp start address is: 0 (W0)
0x0498	0x881140  	MOV	W0, U1BRG
; tmp end address is: 0 (W0)
;__Lib_UART_12_p24_p33.c,195 :: 		
0x049A	0xA92222  	BCLR	U1STA, #1
;__Lib_UART_12_p24_p33.c,197 :: 		
0x049C	0xA8E221  	BSET	U1MODE, #15
;__Lib_UART_12_p24_p33.c,198 :: 		
0x049E	0xA84223  	BSET	U1STA, #10
;__Lib_UART_12_p24_p33.c,200 :: 		
0x04A0	0x07FEAF  	RCALL	_Delay_100ms
0x04A2	0x07FEAE  	RCALL	_Delay_100ms
;__Lib_UART_12_p24_p33.c,202 :: 		
L_end_UART1_Init:
0x04A4	0xFA8000  	ULNK
0x04A6	0x060000  	RETURN
; end of _UART1_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x0238	0x238800  	MOV	#14464, W0
0x023A	0x200011  	MOV	#1, W1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x023C	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x020E	0x200020  	MOV	#2, W0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x0210	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x0200	0x2000D8  	MOV	#13, W8
0x0202	0x235077  	MOV	#13575, W7
L_Delay_100ms33:
0x0204	0xED200E  	DEC	W7
0x0206	0x3AFFFE  	BRA NZ	L_Delay_100ms33
0x0208	0xED2010  	DEC	W8
0x020A	0x3AFFFC  	BRA NZ	L_Delay_100ms33
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x020C	0x060000  	RETURN
; end of _Delay_100ms
__Multiply_32x32:
0x04A8	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x04AA	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x04AC	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x04AE	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x04B0	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x04B2	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x04B4	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x04B6	0xFA8000  	ULNK
0x04B8	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x02FC	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x02FE	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x0300	0x000000040350  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x0304	0xE20008  	CP0	W4
;__Lib_Math.c,173 :: 		
0x0306	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x0308	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x030A	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x030C	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.c,180 :: 		
0x030E	0xE20002  	CP0	W1
;__Lib_Math.c,181 :: 		
0x0310	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x0312	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,183 :: 		
0x0314	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x0316	0xE20006  	CP0	W3
;__Lib_Math.c,186 :: 		
0x0318	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x031A	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,188 :: 		
0x031C	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x031E	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x0320	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,192 :: 		
0x0322	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x0324	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,194 :: 		
0x0326	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x0328	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x032A	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x032C	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.c,200 :: 		
0x032E	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x0330	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,203 :: 		
0x0332	0x200206  	MOV	#32, W6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x0334	0xD00000  	SL	W0, W0
;__Lib_Math.c,206 :: 		
0x0336	0xD28081  	RLC	W1, W1
;__Lib_Math.c,207 :: 		
0x0338	0xD28204  	RLC	W4, W4
;__Lib_Math.c,208 :: 		
0x033A	0xD28285  	RLC	W5, W5
;__Lib_Math.c,209 :: 		
0x033C	0xA80000  	BSET	W0, #0
;__Lib_Math.c,210 :: 		
0x033E	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,211 :: 		
0x0340	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,212 :: 		
0x0342	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x0344	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,214 :: 		
0x0346	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,215 :: 		
0x0348	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x034A	0xE90306  	DEC	W6, W6
;__Lib_Math.c,218 :: 		
0x034C	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x034E	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x0350	0xFA8000  	ULNK
0x0352	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x0354	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x0356	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x0358	0x0000000403A2  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x035C	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x035E	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x0360	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x0362	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x0364	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x0366	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x0368	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x036A	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x036C	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x036E	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x0370	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x0372	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x0374	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x0376	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x0378	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x037A	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x037C	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x037E	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x0380	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x0382	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x0384	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x0386	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x0388	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x038A	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x038C	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x038E	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x0390	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x0392	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x0394	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x0396	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x0398	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x039A	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x039C	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x039E	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x03A0	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x03A2	0xFA8000  	ULNK
0x03A4	0x060000  	RETURN
; end of __Divide_32x32
_SPI1_Init_Advanced:
0x04FE	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,123 :: 		
; slave_select start address is: 2 (W1)
0x0500	0x97B8CE  	MOV	[W14-8], W1
; data_sample start address is: 8 (W4)
0x0502	0x97BA3E  	MOV	[W14-10], W4
; clock_idle start address is: 4 (W2)
0x0504	0x97B92E  	MOV	[W14-12], W2
; edge start address is: 6 (W3)
0x0506	0x97B99E  	MOV	[W14-14], W3
;__Lib_SPI_12.c,126 :: 		
0x0508	0xEF2240  	CLR	SPI1STAT
;__Lib_SPI_12.c,127 :: 		
0x050A	0xEF2242  	CLR	SPI1CON
;__Lib_SPI_12.c,129 :: 		
0x050C	0x2FFFF0  	MOV	#lo_addr(_SPI1_Read), W0
0x050E	0x88DC00  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,130 :: 		
0x0510	0x2FFFF0  	MOV	#lo_addr(_SPI1_Write), W0
0x0512	0x88DC10  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,132 :: 		
0x0514	0x75000B  	IOR	W10, W11, W0
0x0516	0x70000C  	IOR	W0, W12, W0
0x0518	0x70000D  	IOR	W0, W13, W0
0x051A	0x700001  	IOR	W0, W1, W0
; slave_select end address is: 2 (W1)
0x051C	0x700004  	IOR	W0, W4, W0
; data_sample end address is: 8 (W4)
;__Lib_SPI_12.c,133 :: 		
0x051E	0x700082  	IOR	W0, W2, W1
; clock_idle end address is: 4 (W2)
0x0520	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x0522	0x708803  	IOR	W1, W3, [W0]
; edge end address is: 6 (W3)
;__Lib_SPI_12.c,135 :: 		
0x0524	0xA9C240  	BCLR	SPI1STAT, #6
;__Lib_SPI_12.c,136 :: 		
0x0526	0xA8E241  	BSET	SPI1STAT, #15
;__Lib_SPI_12.c,138 :: 		
L_end_SPI1_Init_Advanced:
0x0528	0xFA8000  	ULNK
0x052A	0x060000  	RETURN
; end of _SPI1_Init_Advanced
_SPI2_Init:
0x04BA	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,205 :: 		
;__Lib_SPI_12.c,207 :: 		
0x04BC	0x202120  	MOV	#lo_addr(_SPI2_Read), W0
0x04BE	0x88DC00  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,208 :: 		
0x04C0	0x202780  	MOV	#lo_addr(_SPI2_Write), W0
0x04C2	0x88DC10  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,210 :: 		
0x04C4	0xEF2260  	CLR	SPI2STAT
;__Lib_SPI_12.c,211 :: 		
0x04C6	0xEF2262  	CLR	SPI2CON
;__Lib_SPI_12.c,213 :: 		
0x04C8	0xA8A262  	BSET	SPI2CON, #5
;__Lib_SPI_12.c,214 :: 		
0x04CA	0xA9C262  	BCLR	SPI2CON, #6
;__Lib_SPI_12.c,216 :: 		
0x04CC	0x2001C1  	MOV	#28, W1
0x04CE	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x04D0	0x708810  	IOR	W1, [W0], [W0]
;__Lib_SPI_12.c,218 :: 		
0x04D2	0x2FFFC1  	MOV	#65532, W1
0x04D4	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x04D6	0x608810  	AND	W1, [W0], [W0]
;__Lib_SPI_12.c,219 :: 		
0x04D8	0xA80263  	BSET	SPI2CON, #8
;__Lib_SPI_12.c,221 :: 		
0x04DA	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,222 :: 		
0x04DC	0xA8E261  	BSET	SPI2STAT, #15
;__Lib_SPI_12.c,224 :: 		
L_end_SPI2_Init:
0x04DE	0xFA8000  	ULNK
0x04E0	0x060000  	RETURN
; end of _SPI2_Init
_ADXL355_write_byte:
;adxl355_spi.c,128 :: 		void ADXL355_write_byte(unsigned char address, unsigned char value){
;adxl355_spi.c,129 :: 		address = (address<<1)&0xFE;
0x04E2	0x781F8A  	PUSH	W10
0x04E4	0xFB800A  	ZE	W10, W0
0x04E6	0xDD00C1  	SL	W0, #1, W1
0x04E8	0x200FE0  	MOV	#254, W0
0x04EA	0x608000  	AND	W1, W0, W0
0x04EC	0x784500  	MOV.B	W0, W10
;adxl355_spi.c,130 :: 		CS_ADXL355=0;
0x04EE	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,131 :: 		SPI2_Write(address);
0x04F0	0xFB8500  	ZE	W0, W10
0x04F2	0x07FEC2  	RCALL	_SPI2_Write
;adxl355_spi.c,132 :: 		SPI2_Write(value);
0x04F4	0xFB850B  	ZE	W11, W10
0x04F6	0x07FEC0  	RCALL	_SPI2_Write
;adxl355_spi.c,133 :: 		CS_ADXL355=1;
0x04F8	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,134 :: 		}
L_end_ADXL355_write_byte:
0x04FA	0x78054F  	POP	W10
0x04FC	0x060000  	RETURN
; end of _ADXL355_write_byte
_SPI2_Write:
0x0278	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,175 :: 		
;__Lib_SPI_12.c,176 :: 		
0x027A	0x07FFCB  	RCALL	_SPI2_Read
;__Lib_SPI_12.c,183 :: 		
L_end_SPI2_Write:
0x027C	0xFA8000  	ULNK
0x027E	0x060000  	RETURN
; end of _SPI2_Write
_SPI2_Read:
0x0212	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,163 :: 		
;__Lib_SPI_12.c,165 :: 		
0x0214	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,167 :: 		
L_SPI2_Read4:
0x0216	0xAE2260  	BTSS	SPI2STAT, #1
0x0218	0x370001  	BRA	L_SPI2_Read5
0x021A	0x37FFFD  	BRA	L_SPI2_Read4
L_SPI2_Read5:
;__Lib_SPI_12.c,168 :: 		
0x021C	0x88134A  	MOV	W10, SPI2BUF
;__Lib_SPI_12.c,169 :: 		
L_SPI2_Read6:
0x021E	0xAF0260  	BTSC	SPI2STAT, #0
0x0220	0x370001  	BRA	L_SPI2_Read7
0x0222	0x37FFFD  	BRA	L_SPI2_Read6
L_SPI2_Read7:
;__Lib_SPI_12.c,171 :: 		
0x0224	0xBF8268  	MOV	SPI2BUF, WREG
;__Lib_SPI_12.c,173 :: 		
L_end_SPI2_Read:
0x0226	0xFA8000  	ULNK
0x0228	0x060000  	RETURN
; end of _SPI2_Read
_GPS_init:
;tiempo_gps.c,12 :: 		void GPS_init()
;tiempo_gps.c,16 :: 		UART1_Write_Text("$PMTK605*31\r\n");
0x0A0A	0x781F8A  	PUSH	W10
0x0A0C	0x781F8B  	PUSH	W11
0x0A0E	0x21010A  	MOV	#lo_addr(?lstr1_Acelerografo), W10
0x0A10	0x07FC16  	RCALL	_UART1_Write_Text
;tiempo_gps.c,17 :: 		UART1_Write_Text("$PMTK220,1000*1F\r\n");
0x0A12	0x2103CA  	MOV	#lo_addr(?lstr2_Acelerografo), W10
0x0A14	0x07FC14  	RCALL	_UART1_Write_Text
;tiempo_gps.c,18 :: 		UART1_Write_Text("$PMTK251,115200*1F\r\n");
0x0A16	0x2104FA  	MOV	#lo_addr(?lstr3_Acelerografo), W10
0x0A18	0x07FC12  	RCALL	_UART1_Write_Text
;tiempo_gps.c,19 :: 		Delay_ms(1000); // Tiempo necesario para que se de efecto el cambio de configuracion
0x0A1A	0x2007B8  	MOV	#123, W8
0x0A1C	0x212497  	MOV	#4681, W7
L_GPS_init18:
0x0A1E	0xED200E  	DEC	W7
0x0A20	0x3AFFFE  	BRA NZ	L_GPS_init18
0x0A22	0xED2010  	DEC	W8
0x0A24	0x3AFFFC  	BRA NZ	L_GPS_init18
;tiempo_gps.c,20 :: 		UART1_Init(115200);
0x0A26	0x2C200A  	MOV	#49664, W10
0x0A28	0x20001B  	MOV	#1, W11
0x0A2A	0x07FCBD  	RCALL	_UART1_Init
;tiempo_gps.c,21 :: 		UART1_Write_Text("$PMTK313,1*2E\r\n");
0x0A2C	0x2109DA  	MOV	#lo_addr(?lstr4_Acelerografo), W10
0x0A2E	0x07FC07  	RCALL	_UART1_Write_Text
;tiempo_gps.c,22 :: 		UART1_Write_Text("$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
0x0A30	0x2106DA  	MOV	#lo_addr(?lstr5_Acelerografo), W10
0x0A32	0x07FC05  	RCALL	_UART1_Write_Text
;tiempo_gps.c,23 :: 		UART1_Write_Text("$PMTK319,1*24\r\n");
0x0A34	0x21000A  	MOV	#lo_addr(?lstr6_Acelerografo), W10
0x0A36	0x07FC03  	RCALL	_UART1_Write_Text
;tiempo_gps.c,24 :: 		UART1_Write_Text("$PMTK413*34\r\n");
0x0A38	0x2102EA  	MOV	#lo_addr(?lstr7_Acelerografo), W10
0x0A3A	0x07FC01  	RCALL	_UART1_Write_Text
;tiempo_gps.c,25 :: 		UART1_Write_Text("$PMTK513,1*28\r\n");
0x0A3C	0x2101EA  	MOV	#lo_addr(?lstr8_Acelerografo), W10
0x0A3E	0x07FBFF  	RCALL	_UART1_Write_Text
;tiempo_gps.c,26 :: 		Delay_ms(1000);
0x0A40	0x2007B8  	MOV	#123, W8
0x0A42	0x212497  	MOV	#4681, W7
L_GPS_init20:
0x0A44	0xED200E  	DEC	W7
0x0A46	0x3AFFFE  	BRA NZ	L_GPS_init20
0x0A48	0xED2010  	DEC	W8
0x0A4A	0x3AFFFC  	BRA NZ	L_GPS_init20
;tiempo_gps.c,27 :: 		U1MODE.UARTEN = 0; // Desactiva el UART1
0x0A4C	0xA9E221  	BCLR	U1MODE, #15
;tiempo_gps.c,43 :: 		}
L_end_GPS_init:
0x0A4E	0x7805CF  	POP	W11
0x0A50	0x78054F  	POP	W10
0x0A52	0x060000  	RETURN
; end of _GPS_init
_UART1_Write_Text:
0x023E	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,76 :: 		
;__Lib_UART_12_p24_p33.c,77 :: 		
; counter start address is: 2 (W1)
0x0240	0xEF2002  	CLR	W1
;__Lib_UART_12_p24_p33.c,79 :: 		
; data_ start address is: 0 (W0)
0x0242	0x78401A  	MOV.B	[W10], W0
; counter end address is: 2 (W1)
; data_ end address is: 0 (W0)
;__Lib_UART_12_p24_p33.c,80 :: 		
L_UART1_Write_Text2:
; data_ start address is: 0 (W0)
; counter start address is: 2 (W1)
0x0244	0xE10460  	CP.B	W0, #0
0x0246	0x32000A  	BRA Z	L_UART1_Write_Text3
L__UART1_Write_Text71:
;__Lib_UART_12_p24_p33.c,81 :: 		
0x0248	0x781F8A  	PUSH	W10
; data_ end address is: 0 (W0)
0x024A	0xFB8500  	ZE	W0, W10
0x024C	0x07FFEE  	RCALL	_UART1_Write
0x024E	0x78054F  	POP	W10
;__Lib_UART_12_p24_p33.c,82 :: 		
0x0250	0x40C061  	ADD.B	W1, #1, W0
0x0252	0x784080  	MOV.B	W0, W1
;__Lib_UART_12_p24_p33.c,83 :: 		
0x0254	0xFB8000  	ZE	W0, W0
0x0256	0x450000  	ADD	W10, W0, W0
; data_ start address is: 0 (W0)
0x0258	0x784010  	MOV.B	[W0], W0
;__Lib_UART_12_p24_p33.c,84 :: 		
; counter end address is: 2 (W1)
; data_ end address is: 0 (W0)
0x025A	0x37FFF4  	BRA	L_UART1_Write_Text2
L_UART1_Write_Text3:
;__Lib_UART_12_p24_p33.c,85 :: 		
L_end_UART1_Write_Text:
0x025C	0xFA8000  	ULNK
0x025E	0x060000  	RETURN
; end of _UART1_Write_Text
_UART1_Write:
0x022A	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,70 :: 		
;__Lib_UART_12_p24_p33.c,71 :: 		
L_UART1_Write0:
0x022C	0xAF0223  	BTSC	U1STA, #8
0x022E	0x370001  	BRA	L_UART1_Write1
0x0230	0x37FFFD  	BRA	L_UART1_Write0
L_UART1_Write1:
;__Lib_UART_12_p24_p33.c,72 :: 		
0x0232	0x88112A  	MOV	W10, U1TXREG
;__Lib_UART_12_p24_p33.c,73 :: 		
L_end_UART1_Write:
0x0234	0xFA8000  	ULNK
0x0236	0x060000  	RETURN
; end of _UART1_Write
_DS3234_init:
;tiempo_rtc.c,55 :: 		void DS3234_init(){
;tiempo_rtc.c,57 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x0A54	0x781F8A  	PUSH	W10
0x0A56	0x781F8B  	PUSH	W11
0x0A58	0x781F8C  	PUSH	W12
0x0A5A	0x781F8D  	PUSH	W13
0x0A5C	0xEF201A  	CLR	W13
0x0A5E	0x2001CC  	MOV	#28, W12
0x0A60	0xEF2016  	CLR	W11
0x0A62	0x20020A  	MOV	#32, W10
0x0A64	0xEF2000  	CLR	W0
0x0A66	0x781F80  	PUSH	W0
0x0A68	0xEF2000  	CLR	W0
0x0A6A	0x781F80  	PUSH	W0
0x0A6C	0xEF2000  	CLR	W0
0x0A6E	0x781F80  	PUSH	W0
0x0A70	0xEF2000  	CLR	W0
0x0A72	0x781F80  	PUSH	W0
0x0A74	0x07FC2C  	RCALL	_SPI2_Init_Advanced
0x0A76	0xB1008F  	SUB	#8, W15
;tiempo_rtc.c,58 :: 		DS3234_write_byte(Control,0x20);
0x0A78	0xB3C20B  	MOV.B	#32, W11
0x0A7A	0xB3C8EA  	MOV.B	#142, W10
0x0A7C	0x07FC1F  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,59 :: 		DS3234_write_byte(ControlStatus,0x08);
0x0A7E	0xB3C08B  	MOV.B	#8, W11
0x0A80	0xB3C8FA  	MOV.B	#143, W10
0x0A82	0x07FC1C  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,60 :: 		SPI2_Init();
0x0A84	0x07FD1A  	RCALL	_SPI2_Init
;tiempo_rtc.c,62 :: 		}
L_end_DS3234_init:
0x0A86	0x7806CF  	POP	W13
0x0A88	0x78064F  	POP	W12
0x0A8A	0x7805CF  	POP	W11
0x0A8C	0x78054F  	POP	W10
0x0A8E	0x060000  	RETURN
; end of _DS3234_init
_SPI2_Init_Advanced:
0x02CE	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,187 :: 		
; slave_select start address is: 2 (W1)
0x02D0	0x97B8CE  	MOV	[W14-8], W1
; data_sample start address is: 8 (W4)
0x02D2	0x97BA3E  	MOV	[W14-10], W4
; clock_idle start address is: 4 (W2)
0x02D4	0x97B92E  	MOV	[W14-12], W2
; edge start address is: 6 (W3)
0x02D6	0x97B99E  	MOV	[W14-14], W3
;__Lib_SPI_12.c,190 :: 		
0x02D8	0xEF2260  	CLR	SPI2STAT
;__Lib_SPI_12.c,191 :: 		
0x02DA	0xEF2262  	CLR	SPI2CON
;__Lib_SPI_12.c,193 :: 		
0x02DC	0x202120  	MOV	#lo_addr(_SPI2_Read), W0
0x02DE	0x88DC00  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,194 :: 		
0x02E0	0x202780  	MOV	#lo_addr(_SPI2_Write), W0
0x02E2	0x88DC10  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,196 :: 		
0x02E4	0x75000B  	IOR	W10, W11, W0
0x02E6	0x70000C  	IOR	W0, W12, W0
0x02E8	0x70000D  	IOR	W0, W13, W0
0x02EA	0x700001  	IOR	W0, W1, W0
; slave_select end address is: 2 (W1)
0x02EC	0x700004  	IOR	W0, W4, W0
; data_sample end address is: 8 (W4)
;__Lib_SPI_12.c,197 :: 		
0x02EE	0x700082  	IOR	W0, W2, W1
; clock_idle end address is: 4 (W2)
0x02F0	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x02F2	0x708803  	IOR	W1, W3, [W0]
; edge end address is: 6 (W3)
;__Lib_SPI_12.c,199 :: 		
0x02F4	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,200 :: 		
0x02F6	0xA8E261  	BSET	SPI2STAT, #15
;__Lib_SPI_12.c,202 :: 		
L_end_SPI2_Init_Advanced:
0x02F8	0xFA8000  	ULNK
0x02FA	0x060000  	RETURN
; end of _SPI2_Init_Advanced
_DS3234_write_byte:
;tiempo_rtc.c,65 :: 		void DS3234_write_byte(unsigned char address, unsigned char value){
;tiempo_rtc.c,67 :: 		CS_DS3234 = 0;
0x02BC	0x781F8A  	PUSH	W10
0x02BE	0xA94E04  	BCLR	LATA2_bit, BitPos(LATA2_bit+0)
;tiempo_rtc.c,68 :: 		SPI2_Write(address);
0x02C0	0xFB850A  	ZE	W10, W10
0x02C2	0x07FFDA  	RCALL	_SPI2_Write
;tiempo_rtc.c,69 :: 		SPI2_Write(value);
0x02C4	0xFB850B  	ZE	W11, W10
0x02C6	0x07FFD8  	RCALL	_SPI2_Write
;tiempo_rtc.c,70 :: 		CS_DS3234 = 1;
0x02C8	0xA84E04  	BSET	LATA2_bit, BitPos(LATA2_bit+0)
;tiempo_rtc.c,72 :: 		}
L_end_DS3234_write_byte:
0x02CA	0x78054F  	POP	W10
0x02CC	0x060000  	RETURN
; end of _DS3234_write_byte
_ADXL355_init:
;adxl355_spi.c,106 :: 		void ADXL355_init(short tMuestreo){
;adxl355_spi.c,107 :: 		ADXL355_write_byte(Reset,0x52);                                             //Resetea el dispositivo
0x0A90	0x781F8A  	PUSH	W10
0x0A92	0x781F8B  	PUSH	W11
0x0A94	0x781F8A  	PUSH	W10
0x0A96	0xB3C52B  	MOV.B	#82, W11
0x0A98	0xB3C2FA  	MOV.B	#47, W10
0x0A9A	0x07FD23  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,108 :: 		Delay_ms(10);
0x0A9C	0x200028  	MOV	#2, W8
0x0A9E	0x238807  	MOV	#14464, W7
L_ADXL355_init0:
0x0AA0	0xED200E  	DEC	W7
0x0AA2	0x3AFFFE  	BRA NZ	L_ADXL355_init0
0x0AA4	0xED2010  	DEC	W8
0x0AA6	0x3AFFFC  	BRA NZ	L_ADXL355_init0
0x0AA8	0x000000  	NOP
0x0AAA	0x000000  	NOP
;adxl355_spi.c,109 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF|STANDBY);
0x0AAC	0xB3C05B  	MOV.B	#5, W11
0x0AAE	0xB3C2DA  	MOV.B	#45, W10
0x0AB0	0x07FD18  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,110 :: 		ADXL355_write_byte(Range, _2G);
0x0AB2	0xB3C01B  	MOV.B	#1, W11
0x0AB4	0xB3C2CA  	MOV.B	#44, W10
0x0AB6	0x07FD15  	RCALL	_ADXL355_write_byte
0x0AB8	0x78054F  	POP	W10
;adxl355_spi.c,111 :: 		switch (tMuestreo){
0x0ABA	0x370010  	BRA	L_ADXL355_init2
;adxl355_spi.c,112 :: 		case 1:
L_ADXL355_init4:
;adxl355_spi.c,113 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_62_5_Hz);       //ODR=250Hz 1
0x0ABC	0xB3C04B  	MOV.B	#4, W11
0x0ABE	0xB3C28A  	MOV.B	#40, W10
0x0AC0	0x07FD10  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,114 :: 		break;
0x0AC2	0x370014  	BRA	L_ADXL355_init3
;adxl355_spi.c,115 :: 		case 2:
L_ADXL355_init5:
;adxl355_spi.c,116 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_31_25_Hz);      //ODR=125Hz 2
0x0AC4	0xB3C05B  	MOV.B	#5, W11
0x0AC6	0xB3C28A  	MOV.B	#40, W10
0x0AC8	0x07FD0C  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,117 :: 		break;
0x0ACA	0x370010  	BRA	L_ADXL355_init3
;adxl355_spi.c,118 :: 		case 4:
L_ADXL355_init6:
;adxl355_spi.c,119 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_15_625_Hz);     //ODR=62.5Hz 4
0x0ACC	0xB3C06B  	MOV.B	#6, W11
0x0ACE	0xB3C28A  	MOV.B	#40, W10
0x0AD0	0x07FD08  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,120 :: 		break;
0x0AD2	0x37000C  	BRA	L_ADXL355_init3
;adxl355_spi.c,121 :: 		case 8:
L_ADXL355_init7:
;adxl355_spi.c,122 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_7_813_Hz );     //ODR=31.25Hz 8
0x0AD4	0xB3C07B  	MOV.B	#7, W11
0x0AD6	0xB3C28A  	MOV.B	#40, W10
0x0AD8	0x07FD04  	RCALL	_ADXL355_write_byte
;adxl355_spi.c,123 :: 		break;
0x0ADA	0x370008  	BRA	L_ADXL355_init3
;adxl355_spi.c,124 :: 		}
L_ADXL355_init2:
0x0ADC	0xE15461  	CP.B	W10, #1
0x0ADE	0x32FFEE  	BRA Z	L_ADXL355_init4
L__ADXL355_init208:
0x0AE0	0xE15462  	CP.B	W10, #2
0x0AE2	0x32FFF0  	BRA Z	L_ADXL355_init5
L__ADXL355_init209:
0x0AE4	0xE15464  	CP.B	W10, #4
0x0AE6	0x32FFF2  	BRA Z	L_ADXL355_init6
L__ADXL355_init210:
0x0AE8	0xE15468  	CP.B	W10, #8
0x0AEA	0x32FFF4  	BRA Z	L_ADXL355_init7
L__ADXL355_init211:
L_ADXL355_init3:
;adxl355_spi.c,125 :: 		}
L_end_ADXL355_init:
0x0AEC	0x7805CF  	POP	W11
0x0AEE	0x78054F  	POP	W10
0x0AF0	0x060000  	RETURN
; end of _ADXL355_init
0x111A	0x210001  	MOV	#lo_addr(?lstr6_Acelerografo), W1
0x111C	0x280000  	MOV	#32768, W0
0x111E	0x090055  	REPEAT	#85
0x1120	0x7818B0  	MOV	[W0++], [W1++]
0x1122	0x7858B0  	MOV.B	[W0++], [W1++]
0x1124	0x060000  	RETURN
_int_1:
0x10C8	0xF80034  	PUSH	DSWPAG
0x10CA	0xF80032  	PUSH	DSRPAG
0x10CC	0xF80036  	PUSH	RCOUNT
0x10CE	0x781F80  	PUSH	W0
0x10D0	0x200020  	MOV	#2, W0
0x10D2	0x09000C  	REPEAT	#12
0x10D4	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,545 :: 		void int_1() org IVT_ADDR_INT1INTERRUPT
;Acelerografo.c,548 :: 		INT1IF_bit = 0; // Limpia la bandera de interrupcion externa INT1
0x10D6	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Acelerografo.c,551 :: 		if (banSetReloj == 1)
0x10D8	0x21B9F0  	MOV	#lo_addr(_banSetReloj), W0
0x10DA	0x784010  	MOV.B	[W0], W0
0x10DC	0xE10461  	CP.B	W0, #1
0x10DE	0x3A0006  	BRA NZ	L_int_1125
L__int_1307:
;Acelerografo.c,553 :: 		TEST = ~TEST;
0x10E0	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,554 :: 		horaSistema++; // Incrementa el reloj del sistema
0x10E2	0x200011  	MOV	#1, W1
0x10E4	0x200002  	MOV	#0, W2
0x10E6	0x21B940  	MOV	#lo_addr(_horaSistema), W0
0x10E8	0x409810  	ADD	W1, [W0], [W0++]
0x10EA	0x491010  	ADDC	W2, [W0], [W0--]
;Acelerografo.c,555 :: 		}
L_int_1125:
;Acelerografo.c,558 :: 		if (horaSistema == 86400)
0x10EC	0x80DCA2  	MOV	_horaSistema, W2
0x10EE	0x80DCB3  	MOV	_horaSistema+2, W3
0x10F0	0x251800  	MOV	#20864, W0
0x10F2	0x200011  	MOV	#1, W1
0x10F4	0xE11000  	CP	W2, W0
0x10F6	0xE19801  	CPB	W3, W1
0x10F8	0x3A0004  	BRA NZ	L_int_1126
L__int_1308:
;Acelerografo.c,560 :: 		horaSistema = 0;
0x10FA	0xEF2000  	CLR	W0
0x10FC	0xEF2002  	CLR	W1
0x10FE	0x88DCA0  	MOV	W0, _horaSistema
0x1100	0x88DCB1  	MOV	W1, _horaSistema+2
;Acelerografo.c,561 :: 		}
L_int_1126:
;Acelerografo.c,564 :: 		if (banInicio == 1)
0x1102	0x21B920  	MOV	#lo_addr(_banInicio), W0
0x1104	0x784010  	MOV.B	[W0], W0
0x1106	0xE10461  	CP.B	W0, #1
0x1108	0x3A0000  	BRA NZ	L_int_1127
L__int_1309:
;Acelerografo.c,568 :: 		}
L_int_1127:
;Acelerografo.c,569 :: 		}
L_end_int_1:
0x110A	0x2001A0  	MOV	#26, W0
0x110C	0x09000C  	REPEAT	#12
0x110E	0x78104F  	POP	[W0--]
0x1110	0x78004F  	POP	W0
0x1112	0xF90036  	POP	RCOUNT
0x1114	0xF90032  	POP	DSRPAG
0x1116	0xF90034  	POP	DSWPAG
0x1118	0x064000  	RETFIE
; end of _int_1
_spi_1:
0x0E84	0xF80034  	PUSH	DSWPAG
0x0E86	0xF80032  	PUSH	DSRPAG
0x0E88	0xF80036  	PUSH	RCOUNT
0x0E8A	0x781F80  	PUSH	W0
0x0E8C	0x200020  	MOV	#2, W0
0x0E8E	0x09000C  	REPEAT	#12
0x0E90	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,394 :: 		void spi_1() org IVT_ADDR_SPI1INTERRUPT
;Acelerografo.c,397 :: 		SPI1IF_bit = 0;      // Limpia la bandera de interrupcion por SPI
0x0E92	0x781F8A  	PUSH	W10
0x0E94	0x781F8B  	PUSH	W11
0x0E96	0x781F8C  	PUSH	W12
0x0E98	0x781F8D  	PUSH	W13
0x0E9A	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Acelerografo.c,398 :: 		bufferSPI = SPI1BUF; // Guarda el contenido del bufeer (lectura)
0x0E9C	0x210AD1  	MOV	#lo_addr(_bufferSPI), W1
0x0E9E	0xBFC248  	MOV.B	SPI1BUF, WREG
0x0EA0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,402 :: 		if ((banSPI0 == 0) && (bufferSPI == 0xA0))
0x0EA2	0x21BAB0  	MOV	#lo_addr(_banSPI0), W0
0x0EA4	0x784010  	MOV.B	[W0], W0
0x0EA6	0xE10460  	CP.B	W0, #0
0x0EA8	0x3A000B  	BRA NZ	L__spi_1178
L__spi_1279:
0x0EAA	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x0EAC	0x784090  	MOV.B	[W0], W1
0x0EAE	0xB3CA00  	MOV.B	#160, W0
0x0EB0	0xE10C00  	CP.B	W1, W0
0x0EB2	0x3A0006  	BRA NZ	L__spi_1177
L__spi_1280:
L__spi_1176:
;Acelerografo.c,405 :: 		CambiarEstadoBandera(0, 1);
0x0EB4	0xB3C01B  	MOV.B	#1, W11
0x0EB6	0xEF2014  	CLR	W10
0x0EB8	0x07FE4F  	RCALL	_CambiarEstadoBandera
;Acelerografo.c,406 :: 		SPI1BUF = tipoOperacion; // Carga en el buffer el tipo de operacion requerido
0x0EBA	0x21B890  	MOV	#lo_addr(_tipoOperacion), W0
0x0EBC	0xFB8010  	ZE	[W0], W0
0x0EBE	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,402 :: 		if ((banSPI0 == 0) && (bufferSPI == 0xA0))
L__spi_1178:
L__spi_1177:
;Acelerografo.c,408 :: 		if ((banSPI0 == 1) && (bufferSPI != 0xA0) && (bufferSPI == 0xF0))
0x0EC0	0x21BAB0  	MOV	#lo_addr(_banSPI0), W0
0x0EC2	0x784010  	MOV.B	[W0], W0
0x0EC4	0xE10461  	CP.B	W0, #1
0x0EC6	0x3A0010  	BRA NZ	L__spi_1181
L__spi_1281:
0x0EC8	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x0ECA	0x784090  	MOV.B	[W0], W1
0x0ECC	0xB3CA00  	MOV.B	#160, W0
0x0ECE	0xE10C00  	CP.B	W1, W0
0x0ED0	0x32000B  	BRA Z	L__spi_1180
L__spi_1282:
0x0ED2	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x0ED4	0x784090  	MOV.B	[W0], W1
0x0ED6	0xB3CF00  	MOV.B	#240, W0
0x0ED8	0xE10C00  	CP.B	W1, W0
0x0EDA	0x3A0006  	BRA NZ	L__spi_1179
L__spi_1283:
L__spi_1175:
;Acelerografo.c,410 :: 		CambiarEstadoBandera(0, 0); // Limpia la bandera
0x0EDC	0xEF2016  	CLR	W11
0x0EDE	0xEF2014  	CLR	W10
0x0EE0	0x07FE3B  	RCALL	_CambiarEstadoBandera
;Acelerografo.c,411 :: 		tipoOperacion = 0;          // Limpia la variable de tipo de operacion
0x0EE2	0x21B891  	MOV	#lo_addr(_tipoOperacion), W1
0x0EE4	0xEF2000  	CLR	W0
0x0EE6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,408 :: 		if ((banSPI0 == 1) && (bufferSPI != 0xA0) && (bufferSPI == 0xF0))
L__spi_1181:
L__spi_1180:
L__spi_1179:
;Acelerografo.c,419 :: 		if ((banMuestrear == 0) && (bufferSPI == 0xA1))
0x0EE8	0x21B8E0  	MOV	#lo_addr(_banMuestrear), W0
0x0EEA	0x784010  	MOV.B	[W0], W0
0x0EEC	0xE10460  	CP.B	W0, #0
0x0EEE	0x3A0022  	BRA NZ	L__spi_1183
L__spi_1284:
0x0EF0	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x0EF2	0x784090  	MOV.B	[W0], W1
0x0EF4	0xB3CA10  	MOV.B	#161, W0
0x0EF6	0xE10C00  	CP.B	W1, W0
0x0EF8	0x3A001D  	BRA NZ	L__spi_1182
L__spi_1285:
L__spi_1174:
;Acelerografo.c,421 :: 		banMuestrear = 1; // Cambia el estado de la bandera para que no inicie el muestreo mas de una vez de manera consecutiva
0x0EFA	0x21B8E1  	MOV	#lo_addr(_banMuestrear), W1
0x0EFC	0xB3C010  	MOV.B	#1, W0
0x0EFE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,422 :: 		CambiarEstadoBandera(1, 1);
0x0F00	0xB3C01B  	MOV.B	#1, W11
0x0F02	0xB3C01A  	MOV.B	#1, W10
0x0F04	0x07FE29  	RCALL	_CambiarEstadoBandera
;Acelerografo.c,423 :: 		banCiclo = 0;
0x0F06	0x21B911  	MOV	#lo_addr(_banCiclo), W1
0x0F08	0xEF2000  	CLR	W0
0x0F0A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,424 :: 		contMuestras = 0;
0x0F0C	0x21B9C1  	MOV	#lo_addr(_contMuestras), W1
0x0F0E	0xEF2000  	CLR	W0
0x0F10	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,425 :: 		contCiclos = 0;
0x0F12	0x21BA31  	MOV	#lo_addr(_contCiclos), W1
0x0F14	0xEF2000  	CLR	W0
0x0F16	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,426 :: 		contFIFO = 0;
0x0F18	0xEF2000  	CLR	W0
0x0F1A	0x88DD20  	MOV	W0, _contFIFO
;Acelerografo.c,427 :: 		numFIFO = 0;
0x0F1C	0x21BA61  	MOV	#lo_addr(_numFIFO), W1
0x0F1E	0xEF2000  	CLR	W0
0x0F20	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,428 :: 		numSetsFIFO = 0;
0x0F22	0x21BA21  	MOV	#lo_addr(_numSetsFIFO), W1
0x0F24	0xEF2000  	CLR	W0
0x0F26	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,429 :: 		contTimer1 = 0;
0x0F28	0x21BA11  	MOV	#lo_addr(_contTimer1), W1
0x0F2A	0xEF2000  	CLR	W0
0x0F2C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,430 :: 		banInicio = 1; // Bandera que permite el inicio del muestreo dentro de la interrupcion INT1
0x0F2E	0x21B921  	MOV	#lo_addr(_banInicio), W1
0x0F30	0xB3C010  	MOV.B	#1, W0
0x0F32	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,419 :: 		if ((banMuestrear == 0) && (bufferSPI == 0xA1))
L__spi_1183:
L__spi_1182:
;Acelerografo.c,437 :: 		if ((banSPI1 == 1) && (bufferSPI == 0xF1))
0x0F34	0x21BAC0  	MOV	#lo_addr(_banSPI1), W0
0x0F36	0x784010  	MOV.B	[W0], W0
0x0F38	0xE10461  	CP.B	W0, #1
0x0F3A	0x3A0008  	BRA NZ	L__spi_1185
L__spi_1286:
0x0F3C	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x0F3E	0x784090  	MOV.B	[W0], W1
0x0F40	0xB3CF10  	MOV.B	#241, W0
0x0F42	0xE10C00  	CP.B	W1, W0
0x0F44	0x3A0003  	BRA NZ	L__spi_1184
L__spi_1287:
L__spi_1173:
;Acelerografo.c,439 :: 		CambiarEstadoBandera(1, 0);
0x0F46	0xEF2016  	CLR	W11
0x0F48	0xB3C01A  	MOV.B	#1, W10
0x0F4A	0x07FE06  	RCALL	_CambiarEstadoBandera
;Acelerografo.c,437 :: 		if ((banSPI1 == 1) && (bufferSPI == 0xF1))
L__spi_1185:
L__spi_1184:
;Acelerografo.c,469 :: 		if ((banSPI4 == 0) && (bufferSPI == 0xA4))
0x0F4C	0x21BA70  	MOV	#lo_addr(_banSPI4), W0
0x0F4E	0x784010  	MOV.B	[W0], W0
0x0F50	0xE10460  	CP.B	W0, #0
0x0F52	0x3A000A  	BRA NZ	L__spi_1187
L__spi_1288:
0x0F54	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x0F56	0x784090  	MOV.B	[W0], W1
0x0F58	0xB3CA40  	MOV.B	#164, W0
0x0F5A	0xE10C00  	CP.B	W1, W0
0x0F5C	0x3A0005  	BRA NZ	L__spi_1186
L__spi_1289:
L__spi_1172:
;Acelerografo.c,471 :: 		CambiarEstadoBandera(4, 1);
0x0F5E	0xB3C01B  	MOV.B	#1, W11
0x0F60	0xB3C04A  	MOV.B	#4, W10
0x0F62	0x07FDFA  	RCALL	_CambiarEstadoBandera
;Acelerografo.c,472 :: 		j = 0;
0x0F64	0xEF2000  	CLR	W0
0x0F66	0x88DC60  	MOV	W0, _j
;Acelerografo.c,469 :: 		if ((banSPI4 == 0) && (bufferSPI == 0xA4))
L__spi_1187:
L__spi_1186:
;Acelerografo.c,474 :: 		if ((banSPI4 == 1) && (bufferSPI != 0xA4) && (bufferSPI != 0xF4))
0x0F68	0x21BA70  	MOV	#lo_addr(_banSPI4), W0
0x0F6A	0x784010  	MOV.B	[W0], W0
0x0F6C	0xE10461  	CP.B	W0, #1
0x0F6E	0x3A0012  	BRA NZ	L__spi_1190
L__spi_1290:
0x0F70	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x0F72	0x784090  	MOV.B	[W0], W1
0x0F74	0xB3CA40  	MOV.B	#164, W0
0x0F76	0xE10C00  	CP.B	W1, W0
0x0F78	0x32000D  	BRA Z	L__spi_1189
L__spi_1291:
0x0F7A	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x0F7C	0x784090  	MOV.B	[W0], W1
0x0F7E	0xB3CF40  	MOV.B	#244, W0
0x0F80	0xE10C00  	CP.B	W1, W0
0x0F82	0x320008  	BRA Z	L__spi_1188
L__spi_1292:
L__spi_1171:
;Acelerografo.c,476 :: 		tiempoRPI[j] = bufferSPI;
0x0F84	0x21B791  	MOV	#lo_addr(_tiempoRPI), W1
0x0F86	0x21B8C0  	MOV	#lo_addr(_j), W0
0x0F88	0x408090  	ADD	W1, [W0], W1
0x0F8A	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x0F8C	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,477 :: 		j++;
0x0F8E	0x200011  	MOV	#1, W1
0x0F90	0x21B8C0  	MOV	#lo_addr(_j), W0
0x0F92	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,474 :: 		if ((banSPI4 == 1) && (bufferSPI != 0xA4) && (bufferSPI != 0xF4))
L__spi_1190:
L__spi_1189:
L__spi_1188:
;Acelerografo.c,479 :: 		if ((banSPI4 == 1) && (bufferSPI == 0xF4))
0x0F94	0x21BA70  	MOV	#lo_addr(_banSPI4), W0
0x0F96	0x784010  	MOV.B	[W0], W0
0x0F98	0xE10461  	CP.B	W0, #1
0x0F9A	0x3A0029  	BRA NZ	L__spi_1192
L__spi_1293:
0x0F9C	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x0F9E	0x784090  	MOV.B	[W0], W1
0x0FA0	0xB3CF40  	MOV.B	#244, W0
0x0FA2	0xE10C00  	CP.B	W1, W0
0x0FA4	0x3A0024  	BRA NZ	L__spi_1191
L__spi_1294:
L__spi_1170:
;Acelerografo.c,481 :: 		CambiarEstadoBandera(4, 0);
0x0FA6	0xEF2016  	CLR	W11
0x0FA8	0xB3C04A  	MOV.B	#4, W10
0x0FAA	0x07FDD6  	RCALL	_CambiarEstadoBandera
;Acelerografo.c,482 :: 		horaSistema = RecuperarHoraRPI(tiempoRPI);               // Recupera la hora de la RPi
0x0FAC	0x21B79A  	MOV	#lo_addr(_tiempoRPI), W10
0x0FAE	0x07FDBA  	RCALL	_RecuperarHoraRPI
0x0FB0	0x88DCA0  	MOV	W0, _horaSistema
0x0FB2	0x88DCB1  	MOV	W1, _horaSistema+2
;Acelerografo.c,483 :: 		fechaSistema = RecuperarFechaRPI(tiempoRPI);             // Recupera la fecha de la RPi
0x0FB4	0x21B79A  	MOV	#lo_addr(_tiempoRPI), W10
0x0FB6	0x07FD9D  	RCALL	_RecuperarFechaRPI
0x0FB8	0x88DCC0  	MOV	W0, _fechaSistema
0x0FBA	0x88DCD1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,484 :: 		DS3234_setDate(horaSistema, fechaSistema);               // Configura la hora en el RTC
0x0FBC	0xBE0600  	MOV.D	W0, W12
0x0FBE	0x80DCAA  	MOV	_horaSistema, W10
0x0FC0	0x80DCBB  	MOV	_horaSistema+2, W11
0x0FC2	0x07FCAF  	RCALL	_DS3234_setDate
;Acelerografo.c,485 :: 		horaSistema = RecuperarHoraRTC();                        // Recupera la hora del RTC
0x0FC4	0x07FBAB  	RCALL	_RecuperarHoraRTC
0x0FC6	0x88DCA0  	MOV	W0, _horaSistema
0x0FC8	0x88DCB1  	MOV	W1, _horaSistema+2
;Acelerografo.c,486 :: 		fechaSistema = RecuperarFechaRTC();                      // Recupera la fecha del RTC
0x0FCA	0x07FAB0  	RCALL	_RecuperarFechaRTC
0x0FCC	0x88DCC0  	MOV	W0, _fechaSistema
0x0FCE	0x88DCD1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,487 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo); // Actualiza los datos de la trama tiempo con la hora y fecha recuperadas
0x0FD0	0xBE0600  	MOV.D	W0, W12
0x0FD2	0x80DCAA  	MOV	_horaSistema, W10
0x0FD4	0x80DCBB  	MOV	_horaSistema+2, W11
0x0FD6	0x21B730  	MOV	#lo_addr(_tiempo), W0
0x0FD8	0x781F80  	PUSH	W0
0x0FDA	0x07FC3F  	RCALL	_AjustarTiempoSistema
0x0FDC	0xB1002F  	SUB	#2, W15
;Acelerografo.c,488 :: 		fuenteReloj = 2;                                         // Fuente de reloj = RPi
0x0FDE	0x21B9D1  	MOV	#lo_addr(_fuenteReloj), W1
0x0FE0	0xB3C020  	MOV.B	#2, W0
0x0FE2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,489 :: 		banSetReloj = 1;                                         // Activa esta bandera para usar la hora/fecha recuperada
0x0FE4	0x21B9F1  	MOV	#lo_addr(_banSetReloj), W1
0x0FE6	0xB3C010  	MOV.B	#1, W0
0x0FE8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,490 :: 		InterrupcionP1(0XB2);                                    // Envia la hora local a la RPi
0x0FEA	0xB3CB2A  	MOV.B	#178, W10
0x0FEC	0x07FC89  	RCALL	_InterrupcionP1
;Acelerografo.c,479 :: 		if ((banSPI4 == 1) && (bufferSPI == 0xF4))
L__spi_1192:
L__spi_1191:
;Acelerografo.c,495 :: 		if ((banSPI5 == 0) && (bufferSPI == 0xA5))
0x0FEE	0x21BA80  	MOV	#lo_addr(_banSPI5), W0
0x0FF0	0x784010  	MOV.B	[W0], W0
0x0FF2	0xE10460  	CP.B	W0, #0
0x0FF4	0x3A000D  	BRA NZ	L__spi_1194
L__spi_1295:
0x0FF6	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x0FF8	0x784090  	MOV.B	[W0], W1
0x0FFA	0xB3CA50  	MOV.B	#165, W0
0x0FFC	0xE10C00  	CP.B	W1, W0
0x0FFE	0x3A0008  	BRA NZ	L__spi_1193
L__spi_1296:
L__spi_1169:
;Acelerografo.c,497 :: 		CambiarEstadoBandera(5, 1);
0x1000	0xB3C01B  	MOV.B	#1, W11
0x1002	0xB3C05A  	MOV.B	#5, W10
0x1004	0x07FDA9  	RCALL	_CambiarEstadoBandera
;Acelerografo.c,498 :: 		j = 0;
0x1006	0xEF2000  	CLR	W0
0x1008	0x88DC60  	MOV	W0, _j
;Acelerografo.c,499 :: 		SPI1BUF = fuenteReloj; // Envia el indicador de fuente de reloj (0:RTC, 1:GPS)
0x100A	0x21B9D0  	MOV	#lo_addr(_fuenteReloj), W0
0x100C	0xFB8010  	ZE	[W0], W0
0x100E	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,495 :: 		if ((banSPI5 == 0) && (bufferSPI == 0xA5))
L__spi_1194:
L__spi_1193:
;Acelerografo.c,501 :: 		if ((banSPI5 == 1) && (bufferSPI != 0xA5) && (bufferSPI != 0xF5))
0x1010	0x21BA80  	MOV	#lo_addr(_banSPI5), W0
0x1012	0x784010  	MOV.B	[W0], W0
0x1014	0xE10461  	CP.B	W0, #1
0x1016	0x3A0013  	BRA NZ	L__spi_1197
L__spi_1297:
0x1018	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x101A	0x784090  	MOV.B	[W0], W1
0x101C	0xB3CA50  	MOV.B	#165, W0
0x101E	0xE10C00  	CP.B	W1, W0
0x1020	0x32000E  	BRA Z	L__spi_1196
L__spi_1298:
0x1022	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x1024	0x784090  	MOV.B	[W0], W1
0x1026	0xB3CF50  	MOV.B	#245, W0
0x1028	0xE10C00  	CP.B	W1, W0
0x102A	0x320009  	BRA Z	L__spi_1195
L__spi_1299:
L__spi_1168:
;Acelerografo.c,503 :: 		SPI1BUF = tiempo[j]; // Envia la trama de tiempo
0x102C	0x21B731  	MOV	#lo_addr(_tiempo), W1
0x102E	0x21B8C0  	MOV	#lo_addr(_j), W0
0x1030	0x408010  	ADD	W1, [W0], W0
0x1032	0x784010  	MOV.B	[W0], W0
0x1034	0xFB8000  	ZE	W0, W0
0x1036	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,504 :: 		j++;
0x1038	0x200011  	MOV	#1, W1
0x103A	0x21B8C0  	MOV	#lo_addr(_j), W0
0x103C	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,501 :: 		if ((banSPI5 == 1) && (bufferSPI != 0xA5) && (bufferSPI != 0xF5))
L__spi_1197:
L__spi_1196:
L__spi_1195:
;Acelerografo.c,506 :: 		if ((banSPI5 == 1) && (bufferSPI == 0xF5))
0x103E	0x21BA80  	MOV	#lo_addr(_banSPI5), W0
0x1040	0x784010  	MOV.B	[W0], W0
0x1042	0xE10461  	CP.B	W0, #1
0x1044	0x3A0008  	BRA NZ	L__spi_1199
L__spi_1300:
0x1046	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x1048	0x784090  	MOV.B	[W0], W1
0x104A	0xB3CF50  	MOV.B	#245, W0
0x104C	0xE10C00  	CP.B	W1, W0
0x104E	0x3A0003  	BRA NZ	L__spi_1198
L__spi_1301:
L__spi_1167:
;Acelerografo.c,508 :: 		CambiarEstadoBandera(5, 0);
0x1050	0xEF2016  	CLR	W11
0x1052	0xB3C05A  	MOV.B	#5, W10
0x1054	0x07FD81  	RCALL	_CambiarEstadoBandera
;Acelerografo.c,506 :: 		if ((banSPI5 == 1) && (bufferSPI == 0xF5))
L__spi_1199:
L__spi_1198:
;Acelerografo.c,524 :: 		if ((banSPI7 == 0) && (bufferSPI == 0xA7))
0x1056	0x21BB30  	MOV	#lo_addr(_banSPI7), W0
0x1058	0x784010  	MOV.B	[W0], W0
0x105A	0xE10460  	CP.B	W0, #0
0x105C	0x3A0008  	BRA NZ	L__spi_1201
L__spi_1302:
0x105E	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x1060	0x784090  	MOV.B	[W0], W1
0x1062	0xB3CA70  	MOV.B	#167, W0
0x1064	0xE10C00  	CP.B	W1, W0
0x1066	0x3A0003  	BRA NZ	L__spi_1200
L__spi_1303:
L__spi_1166:
;Acelerografo.c,526 :: 		CambiarEstadoBandera(7, 1);
0x1068	0xB3C01B  	MOV.B	#1, W11
0x106A	0xB3C07A  	MOV.B	#7, W10
0x106C	0x07FD75  	RCALL	_CambiarEstadoBandera
;Acelerografo.c,524 :: 		if ((banSPI7 == 0) && (bufferSPI == 0xA7))
L__spi_1201:
L__spi_1200:
;Acelerografo.c,528 :: 		if ((banSPI7 == 1) && (bufferSPI == 0xF7))
0x106E	0x21BB30  	MOV	#lo_addr(_banSPI7), W0
0x1070	0x784010  	MOV.B	[W0], W0
0x1072	0xE10461  	CP.B	W0, #1
0x1074	0x3A001D  	BRA NZ	L__spi_1203
L__spi_1304:
0x1076	0x210AD0  	MOV	#lo_addr(_bufferSPI), W0
0x1078	0x784090  	MOV.B	[W0], W1
0x107A	0xB3CF70  	MOV.B	#247, W0
0x107C	0xE10C00  	CP.B	W1, W0
0x107E	0x3A0018  	BRA NZ	L__spi_1202
L__spi_1305:
L__spi_1165:
;Acelerografo.c,530 :: 		CambiarEstadoBandera(7, 0);
0x1080	0xEF2016  	CLR	W11
0x1082	0xB3C07A  	MOV.B	#7, W10
0x1084	0x07FD69  	RCALL	_CambiarEstadoBandera
;Acelerografo.c,531 :: 		horaSistema = RecuperarHoraRTC();                        // Recupera la hora del RTC
0x1086	0x07FB4A  	RCALL	_RecuperarHoraRTC
0x1088	0x88DCA0  	MOV	W0, _horaSistema
0x108A	0x88DCB1  	MOV	W1, _horaSistema+2
;Acelerografo.c,532 :: 		fechaSistema = RecuperarFechaRTC();                      // Recupera la fecha del RTC
0x108C	0x07FA4F  	RCALL	_RecuperarFechaRTC
0x108E	0x88DCC0  	MOV	W0, _fechaSistema
0x1090	0x88DCD1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,533 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo); // Actualiza los datos de la trama tiempo con la hora y fecha recuperadas
0x1092	0xBE0600  	MOV.D	W0, W12
0x1094	0x80DCAA  	MOV	_horaSistema, W10
0x1096	0x80DCBB  	MOV	_horaSistema+2, W11
0x1098	0x21B730  	MOV	#lo_addr(_tiempo), W0
0x109A	0x781F80  	PUSH	W0
0x109C	0x07FBDE  	RCALL	_AjustarTiempoSistema
0x109E	0xB1002F  	SUB	#2, W15
;Acelerografo.c,534 :: 		fuenteReloj = 0;                                         // Indica que la fuente de reloj es el RTC
0x10A0	0x21B9D1  	MOV	#lo_addr(_fuenteReloj), W1
0x10A2	0xEF2000  	CLR	W0
0x10A4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,535 :: 		banSetReloj = 1;                                         // Activa esta bandera para usar la hora/fecha recuperada
0x10A6	0x21B9F1  	MOV	#lo_addr(_banSetReloj), W1
0x10A8	0xB3C010  	MOV.B	#1, W0
0x10AA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,536 :: 		InterrupcionP1(0XB2);                                    // Envia la hora local a la RPi
0x10AC	0xB3CB2A  	MOV.B	#178, W10
0x10AE	0x07FC28  	RCALL	_InterrupcionP1
;Acelerografo.c,528 :: 		if ((banSPI7 == 1) && (bufferSPI == 0xF7))
L__spi_1203:
L__spi_1202:
;Acelerografo.c,540 :: 		}
L_end_spi_1:
0x10B0	0x7806CF  	POP	W13
0x10B2	0x78064F  	POP	W12
0x10B4	0x7805CF  	POP	W11
0x10B6	0x78054F  	POP	W10
0x10B8	0x2001A0  	MOV	#26, W0
0x10BA	0x09000C  	REPEAT	#12
0x10BC	0x78104F  	POP	[W0--]
0x10BE	0x78004F  	POP	W0
0x10C0	0xF90036  	POP	RCOUNT
0x10C2	0xF90032  	POP	DSRPAG
0x10C4	0xF90034  	POP	DSWPAG
0x10C6	0x064000  	RETFIE
; end of _spi_1
_CambiarEstadoBandera:
;Acelerografo.c,261 :: 		void CambiarEstadoBandera(char bandera, char estado)
;Acelerografo.c,263 :: 		if (estado == 1)
0x0B58	0xE15C61  	CP.B	W11, #1
0x0B5A	0x3A0052  	BRA NZ	L_CambiarEstadoBandera57
L__CambiarEstadoBandera258:
;Acelerografo.c,266 :: 		banSPI0 = 3;
0x0B5C	0x21BAB1  	MOV	#lo_addr(_banSPI0), W1
0x0B5E	0xB3C030  	MOV.B	#3, W0
0x0B60	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,267 :: 		banSPI1 = 3;
0x0B62	0x21BAC1  	MOV	#lo_addr(_banSPI1), W1
0x0B64	0xB3C030  	MOV.B	#3, W0
0x0B66	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,268 :: 		banSPI2 = 3;
0x0B68	0x21BAD1  	MOV	#lo_addr(_banSPI2), W1
0x0B6A	0xB3C030  	MOV.B	#3, W0
0x0B6C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,269 :: 		banSPI4 = 3;
0x0B6E	0x21BA71  	MOV	#lo_addr(_banSPI4), W1
0x0B70	0xB3C030  	MOV.B	#3, W0
0x0B72	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,270 :: 		banSPI5 = 3;
0x0B74	0x21BA81  	MOV	#lo_addr(_banSPI5), W1
0x0B76	0xB3C030  	MOV.B	#3, W0
0x0B78	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,271 :: 		banSPI6 = 3;
0x0B7A	0x21BA91  	MOV	#lo_addr(_banSPI6), W1
0x0B7C	0xB3C030  	MOV.B	#3, W0
0x0B7E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,272 :: 		banSPI7 = 3;
0x0B80	0x21BB31  	MOV	#lo_addr(_banSPI7), W1
0x0B82	0xB3C030  	MOV.B	#3, W0
0x0B84	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,273 :: 		banSPI8 = 3;
0x0B86	0x21BB41  	MOV	#lo_addr(_banSPI8), W1
0x0B88	0xB3C030  	MOV.B	#3, W0
0x0B8A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,274 :: 		banSPIA = 3;
0x0B8C	0x21BB21  	MOV	#lo_addr(_banSPIA), W1
0x0B8E	0xB3C030  	MOV.B	#3, W0
0x0B90	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,276 :: 		switch (bandera)
0x0B92	0x370024  	BRA	L_CambiarEstadoBandera58
;Acelerografo.c,278 :: 		case 0:
L_CambiarEstadoBandera60:
;Acelerografo.c,279 :: 		banSPI0 = 1;
0x0B94	0x21BAB1  	MOV	#lo_addr(_banSPI0), W1
0x0B96	0xB3C010  	MOV.B	#1, W0
0x0B98	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,280 :: 		break;
0x0B9A	0x370032  	BRA	L_CambiarEstadoBandera59
;Acelerografo.c,281 :: 		case 1:
L_CambiarEstadoBandera61:
;Acelerografo.c,282 :: 		banSPI1 = 1;
0x0B9C	0x21BAC1  	MOV	#lo_addr(_banSPI1), W1
0x0B9E	0xB3C010  	MOV.B	#1, W0
0x0BA0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,283 :: 		break;
0x0BA2	0x37002E  	BRA	L_CambiarEstadoBandera59
;Acelerografo.c,284 :: 		case 2:
L_CambiarEstadoBandera62:
;Acelerografo.c,285 :: 		banSPI2 = 1;
0x0BA4	0x21BAD1  	MOV	#lo_addr(_banSPI2), W1
0x0BA6	0xB3C010  	MOV.B	#1, W0
0x0BA8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,286 :: 		break;
0x0BAA	0x37002A  	BRA	L_CambiarEstadoBandera59
;Acelerografo.c,287 :: 		case 4:
L_CambiarEstadoBandera63:
;Acelerografo.c,288 :: 		banSPI4 = 1;
0x0BAC	0x21BA71  	MOV	#lo_addr(_banSPI4), W1
0x0BAE	0xB3C010  	MOV.B	#1, W0
0x0BB0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,289 :: 		break;
0x0BB2	0x370026  	BRA	L_CambiarEstadoBandera59
;Acelerografo.c,290 :: 		case 5:
L_CambiarEstadoBandera64:
;Acelerografo.c,291 :: 		banSPI5 = 1;
0x0BB4	0x21BA81  	MOV	#lo_addr(_banSPI5), W1
0x0BB6	0xB3C010  	MOV.B	#1, W0
0x0BB8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,292 :: 		break;
0x0BBA	0x370022  	BRA	L_CambiarEstadoBandera59
;Acelerografo.c,293 :: 		case 6:
L_CambiarEstadoBandera65:
;Acelerografo.c,294 :: 		banSPI6 = 1;
0x0BBC	0x21BA91  	MOV	#lo_addr(_banSPI6), W1
0x0BBE	0xB3C010  	MOV.B	#1, W0
0x0BC0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,295 :: 		break;
0x0BC2	0x37001E  	BRA	L_CambiarEstadoBandera59
;Acelerografo.c,296 :: 		case 7:
L_CambiarEstadoBandera66:
;Acelerografo.c,297 :: 		banSPI7 = 1;
0x0BC4	0x21BB31  	MOV	#lo_addr(_banSPI7), W1
0x0BC6	0xB3C010  	MOV.B	#1, W0
0x0BC8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,298 :: 		break;
0x0BCA	0x37001A  	BRA	L_CambiarEstadoBandera59
;Acelerografo.c,299 :: 		case 8:
L_CambiarEstadoBandera67:
;Acelerografo.c,300 :: 		banSPI8 = 1;
0x0BCC	0x21BB41  	MOV	#lo_addr(_banSPI8), W1
0x0BCE	0xB3C010  	MOV.B	#1, W0
0x0BD0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,301 :: 		break;
0x0BD2	0x370016  	BRA	L_CambiarEstadoBandera59
;Acelerografo.c,302 :: 		case 0x0A:
L_CambiarEstadoBandera68:
;Acelerografo.c,303 :: 		banSPIA = 1;
0x0BD4	0x21BB21  	MOV	#lo_addr(_banSPIA), W1
0x0BD6	0xB3C010  	MOV.B	#1, W0
0x0BD8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,304 :: 		break;
0x0BDA	0x370012  	BRA	L_CambiarEstadoBandera59
;Acelerografo.c,305 :: 		}
L_CambiarEstadoBandera58:
0x0BDC	0xE15460  	CP.B	W10, #0
0x0BDE	0x32FFDA  	BRA Z	L_CambiarEstadoBandera60
L__CambiarEstadoBandera259:
0x0BE0	0xE15461  	CP.B	W10, #1
0x0BE2	0x32FFDC  	BRA Z	L_CambiarEstadoBandera61
L__CambiarEstadoBandera260:
0x0BE4	0xE15462  	CP.B	W10, #2
0x0BE6	0x32FFDE  	BRA Z	L_CambiarEstadoBandera62
L__CambiarEstadoBandera261:
0x0BE8	0xE15464  	CP.B	W10, #4
0x0BEA	0x32FFE0  	BRA Z	L_CambiarEstadoBandera63
L__CambiarEstadoBandera262:
0x0BEC	0xE15465  	CP.B	W10, #5
0x0BEE	0x32FFE2  	BRA Z	L_CambiarEstadoBandera64
L__CambiarEstadoBandera263:
0x0BF0	0xE15466  	CP.B	W10, #6
0x0BF2	0x32FFE4  	BRA Z	L_CambiarEstadoBandera65
L__CambiarEstadoBandera264:
0x0BF4	0xE15467  	CP.B	W10, #7
0x0BF6	0x32FFE6  	BRA Z	L_CambiarEstadoBandera66
L__CambiarEstadoBandera265:
0x0BF8	0xE15468  	CP.B	W10, #8
0x0BFA	0x32FFE8  	BRA Z	L_CambiarEstadoBandera67
L__CambiarEstadoBandera266:
0x0BFC	0xE1546A  	CP.B	W10, #10
0x0BFE	0x32FFEA  	BRA Z	L_CambiarEstadoBandera68
L__CambiarEstadoBandera267:
L_CambiarEstadoBandera59:
;Acelerografo.c,306 :: 		}
L_CambiarEstadoBandera57:
;Acelerografo.c,309 :: 		if (estado == 0)
0x0C00	0xE15C60  	CP.B	W11, #0
0x0C02	0x3A001B  	BRA NZ	L_CambiarEstadoBandera69
L__CambiarEstadoBandera268:
;Acelerografo.c,311 :: 		banSPI0 = 0;
0x0C04	0x21BAB1  	MOV	#lo_addr(_banSPI0), W1
0x0C06	0xEF2000  	CLR	W0
0x0C08	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,312 :: 		banSPI1 = 0;
0x0C0A	0x21BAC1  	MOV	#lo_addr(_banSPI1), W1
0x0C0C	0xEF2000  	CLR	W0
0x0C0E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,313 :: 		banSPI2 = 0;
0x0C10	0x21BAD1  	MOV	#lo_addr(_banSPI2), W1
0x0C12	0xEF2000  	CLR	W0
0x0C14	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,314 :: 		banSPI4 = 0;
0x0C16	0x21BA71  	MOV	#lo_addr(_banSPI4), W1
0x0C18	0xEF2000  	CLR	W0
0x0C1A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,315 :: 		banSPI5 = 0;
0x0C1C	0x21BA81  	MOV	#lo_addr(_banSPI5), W1
0x0C1E	0xEF2000  	CLR	W0
0x0C20	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,316 :: 		banSPI6 = 0;
0x0C22	0x21BA91  	MOV	#lo_addr(_banSPI6), W1
0x0C24	0xEF2000  	CLR	W0
0x0C26	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,317 :: 		banSPI7 = 0;
0x0C28	0x21BB31  	MOV	#lo_addr(_banSPI7), W1
0x0C2A	0xEF2000  	CLR	W0
0x0C2C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,318 :: 		banSPI8 = 0;
0x0C2E	0x21BB41  	MOV	#lo_addr(_banSPI8), W1
0x0C30	0xEF2000  	CLR	W0
0x0C32	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,319 :: 		banSPIA = 0;
0x0C34	0x21BB21  	MOV	#lo_addr(_banSPIA), W1
0x0C36	0xEF2000  	CLR	W0
0x0C38	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,320 :: 		}
L_CambiarEstadoBandera69:
;Acelerografo.c,321 :: 		}
L_end_CambiarEstadoBandera:
0x0C3A	0x060000  	RETURN
; end of _CambiarEstadoBandera
_RecuperarHoraRPI:
0x0B24	0xFA0004  	LNK	#4
;tiempo_rpi.c,21 :: 		unsigned long RecuperarHoraRPI(unsigned short *tramaTiempoRpi){
;tiempo_rpi.c,25 :: 		horaRPi = ((long)tramaTiempoRpi[3]*3600)+((long)tramaTiempoRpi[4]*60)+((long)tramaTiempoRpi[5]);      //Calcula el segundo actual = hh*3600 + mm*60 + ss
0x0B26	0x450063  	ADD	W10, #3, W0
0x0B28	0xFB8010  	ZE	[W0], W0
0x0B2A	0xEB0080  	CLR	W1
0x0B2C	0x20E102  	MOV	#3600, W2
0x0B2E	0x200003  	MOV	#0, W3
0x0B30	0x07FCBB  	RCALL	__Multiply_32x32
0x0B32	0x980700  	MOV	W0, [W14+0]
0x0B34	0x980711  	MOV	W1, [W14+2]
0x0B36	0x450064  	ADD	W10, #4, W0
0x0B38	0xFB8010  	ZE	[W0], W0
0x0B3A	0xEB0080  	CLR	W1
0x0B3C	0x2003C2  	MOV	#60, W2
0x0B3E	0x200003  	MOV	#0, W3
0x0B40	0x07FCB3  	RCALL	__Multiply_32x32
0x0B42	0x90010E  	MOV	[W14+0], W2
0x0B44	0x90019E  	MOV	[W14+2], W3
0x0B46	0x410100  	ADD	W2, W0, W2
0x0B48	0x498181  	ADDC	W3, W1, W3
0x0B4A	0x450065  	ADD	W10, #5, W0
0x0B4C	0xFB8010  	ZE	[W0], W0
0x0B4E	0xEB0080  	CLR	W1
0x0B50	0x410000  	ADD	W2, W0, W0
0x0B52	0x498081  	ADDC	W3, W1, W1
;tiempo_rpi.c,27 :: 		return horaRPi;
;tiempo_rpi.c,29 :: 		}
L_end_RecuperarHoraRPI:
0x0B54	0xFA8000  	ULNK
0x0B56	0x060000  	RETURN
; end of _RecuperarHoraRPI
_RecuperarFechaRPI:
0x0AF2	0xFA0004  	LNK	#4
;tiempo_rpi.c,10 :: 		unsigned long RecuperarFechaRPI(unsigned short *tramaTiempoRpi){
;tiempo_rpi.c,14 :: 		fechaRPi = ((long)tramaTiempoRpi[0]*10000)+((long)tramaTiempoRpi[1]*100)+((long)tramaTiempoRpi[2]);      //10000*dd + 100*mm + aa
0x0AF4	0xFB801A  	ZE	[W10], W0
0x0AF6	0xEB0080  	CLR	W1
0x0AF8	0x227102  	MOV	#10000, W2
0x0AFA	0x200003  	MOV	#0, W3
0x0AFC	0x07FCD5  	RCALL	__Multiply_32x32
0x0AFE	0x980700  	MOV	W0, [W14+0]
0x0B00	0x980711  	MOV	W1, [W14+2]
0x0B02	0x450061  	ADD	W10, #1, W0
0x0B04	0xFB8010  	ZE	[W0], W0
0x0B06	0xEB0080  	CLR	W1
0x0B08	0x200642  	MOV	#100, W2
0x0B0A	0x200003  	MOV	#0, W3
0x0B0C	0x07FCCD  	RCALL	__Multiply_32x32
0x0B0E	0x90010E  	MOV	[W14+0], W2
0x0B10	0x90019E  	MOV	[W14+2], W3
0x0B12	0x410100  	ADD	W2, W0, W2
0x0B14	0x498181  	ADDC	W3, W1, W3
0x0B16	0x450062  	ADD	W10, #2, W0
0x0B18	0xFB8010  	ZE	[W0], W0
0x0B1A	0xEB0080  	CLR	W1
0x0B1C	0x410000  	ADD	W2, W0, W0
0x0B1E	0x498081  	ADDC	W3, W1, W1
;tiempo_rpi.c,16 :: 		return fechaRPi;
;tiempo_rpi.c,18 :: 		}
L_end_RecuperarFechaRPI:
0x0B20	0xFA8000  	ULNK
0x0B22	0x060000  	RETURN
; end of _RecuperarFechaRPI
_DS3234_setDate:
0x0922	0xFA000E  	LNK	#14
;tiempo_rtc.c,87 :: 		void DS3234_setDate(unsigned long longHora, unsigned long longFecha){
;tiempo_rtc.c,97 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x0924	0x781F8A  	PUSH	W10
0x0926	0x781F8B  	PUSH	W11
0x0928	0xBE9F8C  	PUSH.D	W12
0x092A	0xBE9F8A  	PUSH.D	W10
0x092C	0xEF201A  	CLR	W13
0x092E	0x2001CC  	MOV	#28, W12
0x0930	0xEF2016  	CLR	W11
0x0932	0x20020A  	MOV	#32, W10
0x0934	0xEF2000  	CLR	W0
0x0936	0x781F80  	PUSH	W0
0x0938	0xEF2000  	CLR	W0
0x093A	0x781F80  	PUSH	W0
0x093C	0xEF2000  	CLR	W0
0x093E	0x781F80  	PUSH	W0
0x0940	0xEF2000  	CLR	W0
0x0942	0x781F80  	PUSH	W0
0x0944	0x07FCC4  	RCALL	_SPI2_Init_Advanced
0x0946	0xB1008F  	SUB	#8, W15
0x0948	0xBE054F  	POP.D	W10
;tiempo_rtc.c,99 :: 		hora = (short)(longHora / 3600);
0x094A	0xBE9F8A  	PUSH.D	W10
0x094C	0x20E102  	MOV	#3600, W2
0x094E	0x200003  	MOV	#0, W3
0x0950	0xBE000A  	MOV.D	W10, W0
0x0952	0xEB0200  	CLR	W4
0x0954	0x07FCFF  	RCALL	__Divide_32x32
0x0956	0xBE054F  	POP.D	W10
0x0958	0x984700  	MOV.B	W0, [W14+0]
;tiempo_rtc.c,100 :: 		minuto = (short)((longHora%3600) / 60);
0x095A	0x20E102  	MOV	#3600, W2
0x095C	0x200003  	MOV	#0, W3
0x095E	0xBE000A  	MOV.D	W10, W0
0x0960	0xEB0200  	CLR	W4
0x0962	0x07FCCC  	RCALL	__Modulus_32x32
0x0964	0x980750  	MOV	W0, [W14+10]
0x0966	0x980761  	MOV	W1, [W14+12]
0x0968	0x2003C2  	MOV	#60, W2
0x096A	0x200003  	MOV	#0, W3
0x096C	0xEB0200  	CLR	W4
0x096E	0x07FCF2  	RCALL	__Divide_32x32
0x0970	0x984710  	MOV.B	W0, [W14+1]
;tiempo_rtc.c,101 :: 		segundo = (short)((longHora%3600) % 60);
0x0972	0x90005E  	MOV	[W14+10], W0
0x0974	0x9000EE  	MOV	[W14+12], W1
0x0976	0x2003C2  	MOV	#60, W2
0x0978	0x200003  	MOV	#0, W3
0x097A	0xEB0200  	CLR	W4
0x097C	0x07FCBF  	RCALL	__Modulus_32x32
0x097E	0xBE064F  	POP.D	W12
0x0980	0x984720  	MOV.B	W0, [W14+2]
;tiempo_rtc.c,103 :: 		dia = (short)(longFecha / 10000);
0x0982	0xBE9F8C  	PUSH.D	W12
0x0984	0x227102  	MOV	#10000, W2
0x0986	0x200003  	MOV	#0, W3
0x0988	0xBE000C  	MOV.D	W12, W0
0x098A	0xEB0200  	CLR	W4
0x098C	0x07FCE3  	RCALL	__Divide_32x32
0x098E	0xBE064F  	POP.D	W12
0x0990	0x984730  	MOV.B	W0, [W14+3]
;tiempo_rtc.c,104 :: 		mes = (short)((longFecha%10000) / 100);
0x0992	0x227102  	MOV	#10000, W2
0x0994	0x200003  	MOV	#0, W3
0x0996	0xBE000C  	MOV.D	W12, W0
0x0998	0xEB0200  	CLR	W4
0x099A	0x07FCB0  	RCALL	__Modulus_32x32
0x099C	0x980750  	MOV	W0, [W14+10]
0x099E	0x980761  	MOV	W1, [W14+12]
0x09A0	0x200642  	MOV	#100, W2
0x09A2	0x200003  	MOV	#0, W3
0x09A4	0xEB0200  	CLR	W4
0x09A6	0x07FCD6  	RCALL	__Divide_32x32
0x09A8	0x984740  	MOV.B	W0, [W14+4]
;tiempo_rtc.c,105 :: 		anio = (short)((longFecha%10000) % 100);
0x09AA	0x90005E  	MOV	[W14+10], W0
0x09AC	0x9000EE  	MOV	[W14+12], W1
0x09AE	0x200642  	MOV	#100, W2
0x09B0	0x200003  	MOV	#0, W3
0x09B2	0xEB0200  	CLR	W4
0x09B4	0x07FCA3  	RCALL	__Modulus_32x32
; anio start address is: 8 (W4)
0x09B6	0x784200  	MOV.B	W0, W4
;tiempo_rtc.c,107 :: 		segundo = Dec2Bcd(segundo);
0x09B8	0x90452E  	MOV.B	[W14+2], W10
0x09BA	0x07FC6B  	RCALL	_Dec2Bcd
0x09BC	0x984720  	MOV.B	W0, [W14+2]
;tiempo_rtc.c,108 :: 		minuto = Dec2Bcd(minuto);
0x09BE	0x90451E  	MOV.B	[W14+1], W10
0x09C0	0x07FC68  	RCALL	_Dec2Bcd
0x09C2	0x984710  	MOV.B	W0, [W14+1]
;tiempo_rtc.c,109 :: 		hora = Dec2Bcd(hora);
0x09C4	0x90450E  	MOV.B	[W14+0], W10
0x09C6	0x07FC65  	RCALL	_Dec2Bcd
0x09C8	0x984700  	MOV.B	W0, [W14+0]
;tiempo_rtc.c,110 :: 		dia = Dec2Bcd(dia);
0x09CA	0x90453E  	MOV.B	[W14+3], W10
0x09CC	0x07FC62  	RCALL	_Dec2Bcd
0x09CE	0x984730  	MOV.B	W0, [W14+3]
;tiempo_rtc.c,111 :: 		mes = Dec2Bcd(mes);
0x09D0	0x90454E  	MOV.B	[W14+4], W10
0x09D2	0x07FC5F  	RCALL	_Dec2Bcd
0x09D4	0x984740  	MOV.B	W0, [W14+4]
;tiempo_rtc.c,112 :: 		anio = Dec2Bcd(anio);
0x09D6	0x784504  	MOV.B	W4, W10
; anio end address is: 8 (W4)
0x09D8	0x07FC5C  	RCALL	_Dec2Bcd
; anio start address is: 2 (W1)
0x09DA	0x784080  	MOV.B	W0, W1
;tiempo_rtc.c,114 :: 		DS3234_write_byte(Segundos_Esc, segundo);
0x09DC	0x9045AE  	MOV.B	[W14+2], W11
0x09DE	0xB3C80A  	MOV.B	#128, W10
0x09E0	0x07FC6D  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,115 :: 		DS3234_write_byte(Minutos_Esc, minuto);
0x09E2	0x90459E  	MOV.B	[W14+1], W11
0x09E4	0xB3C81A  	MOV.B	#129, W10
0x09E6	0x07FC6A  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,116 :: 		DS3234_write_byte(Horas_Esc, hora);
0x09E8	0x90458E  	MOV.B	[W14+0], W11
0x09EA	0xB3C82A  	MOV.B	#130, W10
0x09EC	0x07FC67  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,117 :: 		DS3234_write_byte(DiaMes_Esc, dia);
0x09EE	0x9045BE  	MOV.B	[W14+3], W11
0x09F0	0xB3C84A  	MOV.B	#132, W10
0x09F2	0x07FC64  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,118 :: 		DS3234_write_byte(Mes_Esc, mes);
0x09F4	0x9045CE  	MOV.B	[W14+4], W11
0x09F6	0xB3C85A  	MOV.B	#133, W10
0x09F8	0x07FC61  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,119 :: 		DS3234_write_byte(Anio_Esc, anio);
0x09FA	0x784581  	MOV.B	W1, W11
; anio end address is: 2 (W1)
0x09FC	0xB3C86A  	MOV.B	#134, W10
0x09FE	0x07FC5E  	RCALL	_DS3234_write_byte
;tiempo_rtc.c,121 :: 		SPI2_Init();
0x0A00	0x07FD5C  	RCALL	_SPI2_Init
;tiempo_rtc.c,125 :: 		}
;tiempo_rtc.c,123 :: 		return;
;tiempo_rtc.c,125 :: 		}
L_end_DS3234_setDate:
0x0A02	0x7805CF  	POP	W11
0x0A04	0x78054F  	POP	W10
0x0A06	0xFA8000  	ULNK
0x0A08	0x060000  	RETURN
; end of _DS3234_setDate
_Dec2Bcd:
0x0292	0xFA0000  	LNK	#0
;__Lib_Conversions.c,304 :: 		
;__Lib_Conversions.c,305 :: 		
;__Lib_Conversions.c,307 :: 		
0x0294	0xE15469  	CP.B	W10, #9
0x0296	0x36000E  	BRA LEU	L_Dec2Bcd64
L__Dec2Bcd161:
;__Lib_Conversions.c,308 :: 		
0x0298	0xFB800A  	ZE	W10, W0
0x029A	0x2000A2  	MOV	#10, W2
0x029C	0x090011  	REPEAT	#17
0x029E	0xD80002  	DIV.S	W0, W2
;__Lib_Conversions.c,309 :: 		
0x02A0	0xFB8000  	ZE	W0, W0
0x02A2	0xDD0044  	SL	W0, #4, W0
; tmp start address is: 6 (W3)
0x02A4	0x784180  	MOV.B	W0, W3
;__Lib_Conversions.c,310 :: 		
0x02A6	0xFB800A  	ZE	W10, W0
0x02A8	0x2000A2  	MOV	#10, W2
0x02AA	0x090011  	REPEAT	#17
0x02AC	0xD80002  	DIV.S	W0, W2
0x02AE	0x780001  	MOV	W1, W0
; tmp start address is: 2 (W1)
0x02B0	0x71C080  	IOR.B	W3, W0, W1
; tmp end address is: 6 (W3)
;__Lib_Conversions.c,311 :: 		
; tmp end address is: 2 (W1)
0x02B2	0x370001  	BRA	L_Dec2Bcd65
L_Dec2Bcd64:
;__Lib_Conversions.c,312 :: 		
; tmp start address is: 2 (W1)
0x02B4	0x78408A  	MOV.B	W10, W1
; tmp end address is: 2 (W1)
L_Dec2Bcd65:
;__Lib_Conversions.c,313 :: 		
; tmp start address is: 2 (W1)
0x02B6	0x784001  	MOV.B	W1, W0
; tmp end address is: 2 (W1)
;__Lib_Conversions.c,314 :: 		
L_end_Dec2Bcd:
0x02B8	0xFA8000  	ULNK
0x02BA	0x060000  	RETURN
; end of _Dec2Bcd
_RecuperarHoraRTC:
0x071C	0xFA0004  	LNK	#4
;tiempo_rtc.c,128 :: 		unsigned long RecuperarHoraRTC(){
;tiempo_rtc.c,136 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x071E	0x781F8A  	PUSH	W10
0x0720	0x781F8B  	PUSH	W11
0x0722	0x781F8C  	PUSH	W12
0x0724	0x781F8D  	PUSH	W13
0x0726	0xEF201A  	CLR	W13
0x0728	0x2001CC  	MOV	#28, W12
0x072A	0xEF2016  	CLR	W11
0x072C	0x20020A  	MOV	#32, W10
0x072E	0xEF2000  	CLR	W0
0x0730	0x781F80  	PUSH	W0
0x0732	0xEF2000  	CLR	W0
0x0734	0x781F80  	PUSH	W0
0x0736	0xEF2000  	CLR	W0
0x0738	0x781F80  	PUSH	W0
0x073A	0xEF2000  	CLR	W0
0x073C	0x781F80  	PUSH	W0
0x073E	0x07FDC7  	RCALL	_SPI2_Init_Advanced
0x0740	0xB1008F  	SUB	#8, W15
;tiempo_rtc.c,138 :: 		valueRead = DS3234_read_byte(Segundos_Lec);
0x0742	0xEF2014  	CLR	W10
0x0744	0x07FD9D  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,139 :: 		valueRead = Bcd2Dec(valueRead);
0x0746	0x784500  	MOV.B	W0, W10
0x0748	0x07FD8B  	RCALL	_Bcd2Dec
;tiempo_rtc.c,140 :: 		segundo = (long)valueRead;
; segundo start address is: 12 (W6)
0x074A	0xFB8300  	ZE	W0, W6
0x074C	0xEB0380  	CLR	W7
;tiempo_rtc.c,141 :: 		valueRead = DS3234_read_byte(Minutos_Lec);
0x074E	0xB3C01A  	MOV.B	#1, W10
0x0750	0x07FD97  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,142 :: 		valueRead = Bcd2Dec(valueRead);
0x0752	0x784500  	MOV.B	W0, W10
0x0754	0x07FD85  	RCALL	_Bcd2Dec
;tiempo_rtc.c,143 :: 		minuto = (long)valueRead;
; minuto start address is: 16 (W8)
0x0756	0xFB8400  	ZE	W0, W8
0x0758	0xEB0480  	CLR	W9
;tiempo_rtc.c,144 :: 		valueRead = DS3234_read_byte(Horas_Lec);
0x075A	0xB3C02A  	MOV.B	#2, W10
0x075C	0x07FD91  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,145 :: 		valueRead = Bcd2Dec(valueRead);
0x075E	0x784500  	MOV.B	W0, W10
0x0760	0x07FD7F  	RCALL	_Bcd2Dec
;tiempo_rtc.c,146 :: 		hora = (long)valueRead;
0x0762	0xFB8000  	ZE	W0, W0
0x0764	0xEB0080  	CLR	W1
;tiempo_rtc.c,148 :: 		horaRTC = (hora*3600)+(minuto*60)+(segundo);                               //Calcula el segundo actual = hh*3600 + mm*60 + ss
0x0766	0x20E102  	MOV	#3600, W2
0x0768	0x200003  	MOV	#0, W3
0x076A	0x07FE9E  	RCALL	__Multiply_32x32
0x076C	0x980700  	MOV	W0, [W14+0]
0x076E	0x980711  	MOV	W1, [W14+2]
0x0770	0xBE0008  	MOV.D	W8, W0
0x0772	0x2003C2  	MOV	#60, W2
0x0774	0x200003  	MOV	#0, W3
0x0776	0x07FE98  	RCALL	__Multiply_32x32
; minuto end address is: 16 (W8)
0x0778	0x90010E  	MOV	[W14+0], W2
0x077A	0x90019E  	MOV	[W14+2], W3
0x077C	0x410000  	ADD	W2, W0, W0
0x077E	0x498081  	ADDC	W3, W1, W1
; horaRTC start address is: 4 (W2)
0x0780	0x400106  	ADD	W0, W6, W2
0x0782	0x488187  	ADDC	W1, W7, W3
; segundo end address is: 12 (W6)
;tiempo_rtc.c,150 :: 		SPI2_Init();
0x0784	0x07FE9A  	RCALL	_SPI2_Init
;tiempo_rtc.c,152 :: 		return horaRTC;
0x0786	0xBE0002  	MOV.D	W2, W0
; horaRTC end address is: 4 (W2)
;tiempo_rtc.c,154 :: 		}
;tiempo_rtc.c,152 :: 		return horaRTC;
;tiempo_rtc.c,154 :: 		}
L_end_RecuperarHoraRTC:
0x0788	0x7806CF  	POP	W13
0x078A	0x78064F  	POP	W12
0x078C	0x7805CF  	POP	W11
0x078E	0x78054F  	POP	W10
0x0790	0xFA8000  	ULNK
0x0792	0x060000  	RETURN
; end of _RecuperarHoraRTC
_DS3234_read_byte:
;tiempo_rtc.c,75 :: 		unsigned char DS3234_read_byte(unsigned char address){
;tiempo_rtc.c,77 :: 		unsigned char value = 0x00;
0x0280	0x781F8A  	PUSH	W10
;tiempo_rtc.c,78 :: 		CS_DS3234 = 0;
0x0282	0xA94E04  	BCLR	LATA2_bit, BitPos(LATA2_bit+0)
;tiempo_rtc.c,79 :: 		SPI2_Write(address);
0x0284	0xFB850A  	ZE	W10, W10
0x0286	0x07FFF8  	RCALL	_SPI2_Write
;tiempo_rtc.c,80 :: 		value = SPI2_Read(0);
0x0288	0xEF2014  	CLR	W10
0x028A	0x07FFC3  	RCALL	_SPI2_Read
;tiempo_rtc.c,81 :: 		CS_DS3234 = 1;
0x028C	0xA84E04  	BSET	LATA2_bit, BitPos(LATA2_bit+0)
;tiempo_rtc.c,82 :: 		return value;
;tiempo_rtc.c,84 :: 		}
;tiempo_rtc.c,82 :: 		return value;
;tiempo_rtc.c,84 :: 		}
L_end_DS3234_read_byte:
0x028E	0x78054F  	POP	W10
0x0290	0x060000  	RETURN
; end of _DS3234_read_byte
_Bcd2Dec:
0x0260	0xFA0000  	LNK	#0
;__Lib_Conversions.c,319 :: 		
;__Lib_Conversions.c,320 :: 		
;__Lib_Conversions.c,322 :: 		
0x0262	0xFB800A  	ZE	W10, W0
0x0264	0xDE0044  	LSR	W0, #4, W0
0x0266	0xFB8080  	ZE	W0, W1
0x0268	0x2000A0  	MOV	#10, W0
0x026A	0xB80A00  	MUL.UU	W1, W0, W4
;__Lib_Conversions.c,323 :: 		
0x026C	0xFB800A  	ZE	W10, W0
0x026E	0x60016F  	AND	W0, #15, W2
0x0270	0xFB8004  	ZE	W4, W0
0x0272	0x400002  	ADD	W0, W2, W0
;__Lib_Conversions.c,324 :: 		
;__Lib_Conversions.c,325 :: 		
L_end_Bcd2Dec:
0x0274	0xFA8000  	ULNK
0x0276	0x060000  	RETURN
; end of _Bcd2Dec
_RecuperarFechaRTC:
0x052C	0xFA0004  	LNK	#4
;tiempo_rtc.c,157 :: 		unsigned long RecuperarFechaRTC(){
;tiempo_rtc.c,165 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x052E	0x781F8A  	PUSH	W10
0x0530	0x781F8B  	PUSH	W11
0x0532	0x781F8C  	PUSH	W12
0x0534	0x781F8D  	PUSH	W13
0x0536	0xEF201A  	CLR	W13
0x0538	0x2001CC  	MOV	#28, W12
0x053A	0xEF2016  	CLR	W11
0x053C	0x20020A  	MOV	#32, W10
0x053E	0xEF2000  	CLR	W0
0x0540	0x781F80  	PUSH	W0
0x0542	0xEF2000  	CLR	W0
0x0544	0x781F80  	PUSH	W0
0x0546	0xEF2000  	CLR	W0
0x0548	0x781F80  	PUSH	W0
0x054A	0xEF2000  	CLR	W0
0x054C	0x781F80  	PUSH	W0
0x054E	0x07FEBF  	RCALL	_SPI2_Init_Advanced
0x0550	0xB1008F  	SUB	#8, W15
;tiempo_rtc.c,167 :: 		valueRead = DS3234_read_byte(DiaMes_Lec);
0x0552	0xB3C04A  	MOV.B	#4, W10
0x0554	0x07FE95  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,168 :: 		valueRead = Bcd2Dec(valueRead);
0x0556	0x784500  	MOV.B	W0, W10
0x0558	0x07FE83  	RCALL	_Bcd2Dec
;tiempo_rtc.c,169 :: 		dia = (long)valueRead;
; dia start address is: 12 (W6)
0x055A	0xFB8300  	ZE	W0, W6
0x055C	0xEB0380  	CLR	W7
;tiempo_rtc.c,170 :: 		valueRead = 0x1F & DS3234_read_byte(Mes_Lec);
0x055E	0xB3C05A  	MOV.B	#5, W10
0x0560	0x07FE8F  	RCALL	_DS3234_read_byte
0x0562	0xFB8000  	ZE	W0, W0
0x0564	0x60007F  	AND	W0, #31, W0
;tiempo_rtc.c,171 :: 		valueRead = Bcd2Dec(valueRead);
0x0566	0x784500  	MOV.B	W0, W10
0x0568	0x07FE7B  	RCALL	_Bcd2Dec
;tiempo_rtc.c,172 :: 		mes = (long)valueRead;
; mes start address is: 16 (W8)
0x056A	0xFB8400  	ZE	W0, W8
0x056C	0xEB0480  	CLR	W9
;tiempo_rtc.c,173 :: 		valueRead = DS3234_read_byte(Anio_Lec);
0x056E	0xB3C06A  	MOV.B	#6, W10
0x0570	0x07FE87  	RCALL	_DS3234_read_byte
;tiempo_rtc.c,174 :: 		valueRead = Bcd2Dec(valueRead);
0x0572	0x784500  	MOV.B	W0, W10
0x0574	0x07FE75  	RCALL	_Bcd2Dec
;tiempo_rtc.c,175 :: 		anio = (long)valueRead;
0x0576	0xFB8000  	ZE	W0, W0
0x0578	0xEB0080  	CLR	W1
;tiempo_rtc.c,177 :: 		fechaRTC = (anio*10000)+(mes*100)+(dia);                                   //10000*aa + 100*mm + dd
0x057A	0x227102  	MOV	#10000, W2
0x057C	0x200003  	MOV	#0, W3
0x057E	0x07FF94  	RCALL	__Multiply_32x32
0x0580	0x980700  	MOV	W0, [W14+0]
0x0582	0x980711  	MOV	W1, [W14+2]
0x0584	0xBE0008  	MOV.D	W8, W0
0x0586	0x200642  	MOV	#100, W2
0x0588	0x200003  	MOV	#0, W3
0x058A	0x07FF8E  	RCALL	__Multiply_32x32
; mes end address is: 16 (W8)
0x058C	0x90010E  	MOV	[W14+0], W2
0x058E	0x90019E  	MOV	[W14+2], W3
0x0590	0x410000  	ADD	W2, W0, W0
0x0592	0x498081  	ADDC	W3, W1, W1
; fechaRTC start address is: 4 (W2)
0x0594	0x400106  	ADD	W0, W6, W2
0x0596	0x488187  	ADDC	W1, W7, W3
; dia end address is: 12 (W6)
;tiempo_rtc.c,179 :: 		SPI2_Init();
0x0598	0x07FF90  	RCALL	_SPI2_Init
;tiempo_rtc.c,181 :: 		return fechaRTC;
0x059A	0xBE0002  	MOV.D	W2, W0
; fechaRTC end address is: 4 (W2)
;tiempo_rtc.c,183 :: 		}
;tiempo_rtc.c,181 :: 		return fechaRTC;
;tiempo_rtc.c,183 :: 		}
L_end_RecuperarFechaRTC:
0x059C	0x7806CF  	POP	W13
0x059E	0x78064F  	POP	W12
0x05A0	0x7805CF  	POP	W11
0x05A2	0x78054F  	POP	W10
0x05A4	0xFA8000  	ULNK
0x05A6	0x060000  	RETURN
; end of _RecuperarFechaRTC
_AjustarTiempoSistema:
0x085A	0xFA000E  	LNK	#14
;tiempo_rtc.c,253 :: 		void AjustarTiempoSistema(unsigned long longHora, unsigned long longFecha, unsigned short *tramaTiempoSistema){
0x085C	0x97B84E  	MOV	[W14-8], W0
0x085E	0x9FBF40  	MOV	W0, [W14-8]
;tiempo_rtc.c,262 :: 		hora = (short)(longHora / 3600);
0x0860	0xBE9F8C  	PUSH.D	W12
0x0862	0xBE9F8A  	PUSH.D	W10
0x0864	0x20E102  	MOV	#3600, W2
0x0866	0x200003  	MOV	#0, W3
0x0868	0xBE000A  	MOV.D	W10, W0
0x086A	0xEB0200  	CLR	W4
0x086C	0x07FD73  	RCALL	__Divide_32x32
0x086E	0xBE054F  	POP.D	W10
0x0870	0x984700  	MOV.B	W0, [W14+0]
;tiempo_rtc.c,263 :: 		minuto = (short)((longHora%3600) / 60);
0x0872	0x20E102  	MOV	#3600, W2
0x0874	0x200003  	MOV	#0, W3
0x0876	0xBE000A  	MOV.D	W10, W0
0x0878	0xEB0200  	CLR	W4
0x087A	0x07FD40  	RCALL	__Modulus_32x32
0x087C	0x980750  	MOV	W0, [W14+10]
0x087E	0x980761  	MOV	W1, [W14+12]
0x0880	0x2003C2  	MOV	#60, W2
0x0882	0x200003  	MOV	#0, W3
0x0884	0xEB0200  	CLR	W4
0x0886	0x07FD66  	RCALL	__Divide_32x32
0x0888	0x984710  	MOV.B	W0, [W14+1]
;tiempo_rtc.c,264 :: 		segundo = (short)((longHora%3600) % 60);
0x088A	0x90005E  	MOV	[W14+10], W0
0x088C	0x9000EE  	MOV	[W14+12], W1
0x088E	0x2003C2  	MOV	#60, W2
0x0890	0x200003  	MOV	#0, W3
0x0892	0xEB0200  	CLR	W4
0x0894	0x07FD33  	RCALL	__Modulus_32x32
0x0896	0xBE064F  	POP.D	W12
0x0898	0x984720  	MOV.B	W0, [W14+2]
;tiempo_rtc.c,266 :: 		anio = (short)(longFecha / 10000);
0x089A	0xBE9F8C  	PUSH.D	W12
0x089C	0x227102  	MOV	#10000, W2
0x089E	0x200003  	MOV	#0, W3
0x08A0	0xBE000C  	MOV.D	W12, W0
0x08A2	0xEB0200  	CLR	W4
0x08A4	0x07FD57  	RCALL	__Divide_32x32
0x08A6	0xBE064F  	POP.D	W12
0x08A8	0x984740  	MOV.B	W0, [W14+4]
;tiempo_rtc.c,267 :: 		mes = (short)((longFecha%10000) / 100);
0x08AA	0x227102  	MOV	#10000, W2
0x08AC	0x200003  	MOV	#0, W3
0x08AE	0xBE000C  	MOV.D	W12, W0
0x08B0	0xEB0200  	CLR	W4
0x08B2	0x07FD24  	RCALL	__Modulus_32x32
0x08B4	0x980750  	MOV	W0, [W14+10]
0x08B6	0x980761  	MOV	W1, [W14+12]
0x08B8	0x200642  	MOV	#100, W2
0x08BA	0x200003  	MOV	#0, W3
0x08BC	0xEB0200  	CLR	W4
0x08BE	0x07FD4A  	RCALL	__Divide_32x32
0x08C0	0x984730  	MOV.B	W0, [W14+3]
;tiempo_rtc.c,268 :: 		dia = (short)((longFecha%10000) % 100);
0x08C2	0x90005E  	MOV	[W14+10], W0
0x08C4	0x9000EE  	MOV	[W14+12], W1
0x08C6	0x200642  	MOV	#100, W2
0x08C8	0x200003  	MOV	#0, W3
0x08CA	0xEB0200  	CLR	W4
0x08CC	0x07FD17  	RCALL	__Modulus_32x32
; dia start address is: 4 (W2)
0x08CE	0x784100  	MOV.B	W0, W2
;tiempo_rtc.c,270 :: 		tramaTiempoSistema[0] = anio;
0x08D0	0x97B8CE  	MOV	[W14-8], W1
0x08D2	0x90404E  	MOV.B	[W14+4], W0
0x08D4	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,271 :: 		tramaTiempoSistema[1] = mes;
0x08D6	0x97B84E  	MOV	[W14-8], W0
0x08D8	0x4000E1  	ADD	W0, #1, W1
0x08DA	0x90403E  	MOV.B	[W14+3], W0
0x08DC	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,272 :: 		tramaTiempoSistema[2] = dia;
0x08DE	0x97B84E  	MOV	[W14-8], W0
0x08E0	0xECA000  	INC2	W0
0x08E2	0x784802  	MOV.B	W2, [W0]
; dia end address is: 4 (W2)
;tiempo_rtc.c,273 :: 		tramaTiempoSistema[3] = hora;
0x08E4	0x97B84E  	MOV	[W14-8], W0
0x08E6	0x4000E3  	ADD	W0, #3, W1
0x08E8	0x90400E  	MOV.B	[W14+0], W0
0x08EA	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,274 :: 		tramaTiempoSistema[4] = minuto;
0x08EC	0x97B84E  	MOV	[W14-8], W0
0x08EE	0x4000E4  	ADD	W0, #4, W1
0x08F0	0x90401E  	MOV.B	[W14+1], W0
0x08F2	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,275 :: 		tramaTiempoSistema[5] = segundo;
0x08F4	0x97B84E  	MOV	[W14-8], W0
0x08F6	0x4000E5  	ADD	W0, #5, W1
0x08F8	0x90402E  	MOV.B	[W14+2], W0
0x08FA	0x784880  	MOV.B	W0, [W1]
;tiempo_rtc.c,277 :: 		}
L_end_AjustarTiempoSistema:
0x08FC	0xFA8000  	ULNK
0x08FE	0x060000  	RETURN
; end of _AjustarTiempoSistema
_InterrupcionP1:
;Acelerografo.c,247 :: 		void InterrupcionP1(char operacion)
;Acelerografo.c,250 :: 		CambiarEstadoBandera(0, 0); // Limpia la bandera banSPI0 para permitir una nueva peticion de operacion
0x0900	0x781F8B  	PUSH	W11
0x0902	0x781F8A  	PUSH	W10
0x0904	0xEF2016  	CLR	W11
0x0906	0xEF2014  	CLR	W10
0x0908	0x070127  	RCALL	_CambiarEstadoBandera
0x090A	0x78054F  	POP	W10
;Acelerografo.c,251 :: 		tipoOperacion = operacion;  // Carga en la variable el tipo de operacion requerido
0x090C	0x21B890  	MOV	#lo_addr(_tipoOperacion), W0
0x090E	0x78480A  	MOV.B	W10, [W0]
;Acelerografo.c,253 :: 		RP1 = 1;
0x0910	0xA88E04  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,254 :: 		Delay_us(50);
0x0912	0x201907  	MOV	#400, W7
L_InterrupcionP155:
0x0914	0xED200E  	DEC	W7
0x0916	0x3AFFFE  	BRA NZ	L_InterrupcionP155
0x0918	0x000000  	NOP
0x091A	0x000000  	NOP
;Acelerografo.c,255 :: 		RP1 = 0;
0x091C	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,256 :: 		}
L_end_InterrupcionP1:
0x091E	0x7805CF  	POP	W11
0x0920	0x060000  	RETURN
; end of _InterrupcionP1
_Timer1Int:
0x0C3C	0xF80034  	PUSH	DSWPAG
0x0C3E	0xF80032  	PUSH	DSRPAG
0x0C40	0xF80036  	PUSH	RCOUNT
0x0C42	0x781F80  	PUSH	W0
0x0C44	0x200020  	MOV	#2, W0
0x0C46	0x09000C  	REPEAT	#12
0x0C48	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,574 :: 		void Timer1Int() org IVT_ADDR_T1INTERRUPT
;Acelerografo.c,577 :: 		T1IF_bit = 0; // Limpia la bandera de interrupcion por desbordamiento del Timer1
0x0C4A	0x781F8A  	PUSH	W10
0x0C4C	0xA96800  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;Acelerografo.c,579 :: 		numFIFO = ADXL355_read_byte(FIFO_ENTRIES); // 75                            //Lee el numero de muestras disponibles en el FIFO
0x0C4E	0xB3C05A  	MOV.B	#5, W10
0x0C50	0x07FDF7  	RCALL	_ADXL355_read_byte
0x0C52	0x21BA61  	MOV	#lo_addr(_numFIFO), W1
0x0C54	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,580 :: 		numSetsFIFO = (numFIFO) / 3;               // 25                            //Lee el numero de sets disponibles en el FIFO
0x0C56	0xFB8000  	ZE	W0, W0
0x0C58	0x200032  	MOV	#3, W2
0x0C5A	0x090011  	REPEAT	#17
0x0C5C	0xD80002  	DIV.S	W0, W2
0x0C5E	0x780080  	MOV	W0, W1
0x0C60	0x21BA20  	MOV	#lo_addr(_numSetsFIFO), W0
0x0C62	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,583 :: 		for (x = 0; x < numSetsFIFO; x++)
0x0C64	0xEF2000  	CLR	W0
0x0C66	0x88DC30  	MOV	W0, _x
L_Timer1Int128:
0x0C68	0x21BA20  	MOV	#lo_addr(_numSetsFIFO), W0
0x0C6A	0xFB8090  	ZE	[W0], W1
0x0C6C	0x21B860  	MOV	#lo_addr(_x), W0
0x0C6E	0xE10810  	CP	W1, [W0]
0x0C70	0x36001A  	BRA LEU	L_Timer1Int129
L__Timer1Int311:
;Acelerografo.c,585 :: 		ADXL355_read_FIFO(datosLeidos); // Lee una sola posicion del FIFO
0x0C72	0x21064A  	MOV	#lo_addr(_datosLeidos), W10
0x0C74	0x07FD8F  	RCALL	_ADXL355_read_FIFO
;Acelerografo.c,586 :: 		for (y = 0; y < 9; y++)
0x0C76	0xEF2000  	CLR	W0
0x0C78	0x88DC20  	MOV	W0, _y
L_Timer1Int131:
0x0C7A	0x80DC20  	MOV	_y, W0
0x0C7C	0xE10069  	CP	W0, #9
0x0C7E	0x31000F  	BRA GEU	L_Timer1Int132
L__Timer1Int312:
;Acelerografo.c,588 :: 		datosFIFO[y + (x * 9)] = datosLeidos[y]; // LLena la trama datosFIFO
0x0C80	0x80DC31  	MOV	_x, W1
0x0C82	0x200090  	MOV	#9, W0
0x0C84	0xB80900  	MUL.UU	W1, W0, W2
0x0C86	0x21B840  	MOV	#lo_addr(_y), W0
0x0C88	0x410090  	ADD	W2, [W0], W1
0x0C8A	0x210B60  	MOV	#lo_addr(_datosFIFO), W0
0x0C8C	0x400101  	ADD	W0, W1, W2
0x0C8E	0x210641  	MOV	#lo_addr(_datosLeidos), W1
0x0C90	0x21B840  	MOV	#lo_addr(_y), W0
0x0C92	0x408010  	ADD	W1, [W0], W0
0x0C94	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,586 :: 		for (y = 0; y < 9; y++)
0x0C96	0x200011  	MOV	#1, W1
0x0C98	0x21B840  	MOV	#lo_addr(_y), W0
0x0C9A	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,589 :: 		}
0x0C9C	0x37FFEE  	BRA	L_Timer1Int131
L_Timer1Int132:
;Acelerografo.c,583 :: 		for (x = 0; x < numSetsFIFO; x++)
0x0C9E	0x200011  	MOV	#1, W1
0x0CA0	0x21B860  	MOV	#lo_addr(_x), W0
0x0CA2	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,590 :: 		}
0x0CA4	0x37FFE1  	BRA	L_Timer1Int128
L_Timer1Int129:
;Acelerografo.c,593 :: 		for (x = 0; x < (numSetsFIFO * 9); x++)
0x0CA6	0xEF2000  	CLR	W0
0x0CA8	0x88DC30  	MOV	W0, _x
L_Timer1Int134:
0x0CAA	0x21BA20  	MOV	#lo_addr(_numSetsFIFO), W0
0x0CAC	0xFB8090  	ZE	[W0], W1
0x0CAE	0x200090  	MOV	#9, W0
0x0CB0	0xB98900  	MUL.SS	W1, W0, W2
0x0CB2	0x21B860  	MOV	#lo_addr(_x), W0
0x0CB4	0xE11010  	CP	W2, [W0]
0x0CB6	0x360036  	BRA LEU	L_Timer1Int135
L__Timer1Int313:
;Acelerografo.c,595 :: 		if ((x == 0) || (x % 9 == 0))
0x0CB8	0x80DC30  	MOV	_x, W0
0x0CBA	0xE10060  	CP	W0, #0
0x0CBC	0x320008  	BRA Z	L__Timer1Int206
L__Timer1Int314:
0x0CBE	0x80DC30  	MOV	_x, W0
0x0CC0	0x200092  	MOV	#9, W2
0x0CC2	0x090011  	REPEAT	#17
0x0CC4	0xD88002  	DIV.U	W0, W2
0x0CC6	0x780001  	MOV	W1, W0
0x0CC8	0xE10060  	CP	W0, #0
0x0CCA	0x320001  	BRA Z	L__Timer1Int205
L__Timer1Int315:
0x0CCC	0x37001B  	BRA	L_Timer1Int139
L__Timer1Int206:
L__Timer1Int205:
;Acelerografo.c,597 :: 		tramaCompleta[contFIFO + contMuestras + x] = contMuestras;
0x0CCE	0x21B9C0  	MOV	#lo_addr(_contMuestras), W0
0x0CD0	0xFB8090  	ZE	[W0], W1
0x0CD2	0x21BA40  	MOV	#lo_addr(_contFIFO), W0
0x0CD4	0x408090  	ADD	W1, [W0], W1
0x0CD6	0x21B860  	MOV	#lo_addr(_x), W0
0x0CD8	0x408090  	ADD	W1, [W0], W1
0x0CDA	0x211A90  	MOV	#lo_addr(_tramaCompleta), W0
0x0CDC	0x400081  	ADD	W0, W1, W1
0x0CDE	0x21B9C0  	MOV	#lo_addr(_contMuestras), W0
0x0CE0	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,598 :: 		tramaCompleta[contFIFO + contMuestras + x + 1] = datosFIFO[x];
0x0CE2	0x21B9C0  	MOV	#lo_addr(_contMuestras), W0
0x0CE4	0xFB8090  	ZE	[W0], W1
0x0CE6	0x21BA40  	MOV	#lo_addr(_contFIFO), W0
0x0CE8	0x408090  	ADD	W1, [W0], W1
0x0CEA	0x21B860  	MOV	#lo_addr(_x), W0
0x0CEC	0x408010  	ADD	W1, [W0], W0
0x0CEE	0x4000E1  	ADD	W0, #1, W1
0x0CF0	0x211A90  	MOV	#lo_addr(_tramaCompleta), W0
0x0CF2	0x400101  	ADD	W0, W1, W2
0x0CF4	0x210B61  	MOV	#lo_addr(_datosFIFO), W1
0x0CF6	0x21B860  	MOV	#lo_addr(_x), W0
0x0CF8	0x408010  	ADD	W1, [W0], W0
0x0CFA	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,599 :: 		contMuestras++;
0x0CFC	0xB3C011  	MOV.B	#1, W1
0x0CFE	0x21B9C0  	MOV	#lo_addr(_contMuestras), W0
0x0D00	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,600 :: 		}
0x0D02	0x37000C  	BRA	L_Timer1Int140
L_Timer1Int139:
;Acelerografo.c,603 :: 		tramaCompleta[contFIFO + contMuestras + x] = datosFIFO[x];
0x0D04	0x21B9C0  	MOV	#lo_addr(_contMuestras), W0
0x0D06	0xFB8090  	ZE	[W0], W1
0x0D08	0x21BA40  	MOV	#lo_addr(_contFIFO), W0
0x0D0A	0x408090  	ADD	W1, [W0], W1
0x0D0C	0x21B860  	MOV	#lo_addr(_x), W0
0x0D0E	0x408090  	ADD	W1, [W0], W1
0x0D10	0x211A90  	MOV	#lo_addr(_tramaCompleta), W0
0x0D12	0x400101  	ADD	W0, W1, W2
0x0D14	0x210B61  	MOV	#lo_addr(_datosFIFO), W1
0x0D16	0x21B860  	MOV	#lo_addr(_x), W0
0x0D18	0x408010  	ADD	W1, [W0], W0
0x0D1A	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,604 :: 		}
L_Timer1Int140:
;Acelerografo.c,593 :: 		for (x = 0; x < (numSetsFIFO * 9); x++)
0x0D1C	0x200011  	MOV	#1, W1
0x0D1E	0x21B860  	MOV	#lo_addr(_x), W0
0x0D20	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,605 :: 		}
0x0D22	0x37FFC3  	BRA	L_Timer1Int134
L_Timer1Int135:
;Acelerografo.c,607 :: 		contFIFO = (contMuestras * 9); // Incrementa el contador de FIFOs
0x0D24	0x21B9C0  	MOV	#lo_addr(_contMuestras), W0
0x0D26	0xFB8090  	ZE	[W0], W1
0x0D28	0x200090  	MOV	#9, W0
0x0D2A	0xB98800  	MUL.SS	W1, W0, W0
0x0D2C	0x88DD20  	MOV	W0, _contFIFO
;Acelerografo.c,609 :: 		contTimer1++; // Incrementa una unidad cada vez que entra a la interrupcion por Timer1
0x0D2E	0xB3C011  	MOV.B	#1, W1
0x0D30	0x21BA10  	MOV	#lo_addr(_contTimer1), W0
0x0D32	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,611 :: 		if (contTimer1 == numTMR1)
0x0D34	0x21BA10  	MOV	#lo_addr(_contTimer1), W0
0x0D36	0x784090  	MOV.B	[W0], W1
0x0D38	0x21B880  	MOV	#lo_addr(_numTMR1), W0
0x0D3A	0xE10C10  	CP.B	W1, [W0]
0x0D3C	0x3A0007  	BRA NZ	L_Timer1Int141
L__Timer1Int316:
;Acelerografo.c,613 :: 		T1CON.TON = 0;  // Apaga el Timer1
0x0D3E	0xA9E105  	BCLR	T1CON, #15
;Acelerografo.c,614 :: 		banCiclo = 1;   // Activa la bandera que indica que se completo un ciclo de medicion
0x0D40	0x21B911  	MOV	#lo_addr(_banCiclo), W1
0x0D42	0xB3C010  	MOV.B	#1, W0
0x0D44	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,615 :: 		contTimer1 = 0; // Limpia el contador de interrupciones por Timer1
0x0D46	0x21BA11  	MOV	#lo_addr(_contTimer1), W1
0x0D48	0xEF2000  	CLR	W0
0x0D4A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,616 :: 		}
L_Timer1Int141:
;Acelerografo.c,617 :: 		}
L_end_Timer1Int:
0x0D4C	0x78054F  	POP	W10
0x0D4E	0x2001A0  	MOV	#26, W0
0x0D50	0x09000C  	REPEAT	#12
0x0D52	0x78104F  	POP	[W0--]
0x0D54	0x78004F  	POP	W0
0x0D56	0xF90036  	POP	RCOUNT
0x0D58	0xF90032  	POP	DSRPAG
0x0D5A	0xF90034  	POP	DSWPAG
0x0D5C	0x064000  	RETFIE
; end of _Timer1Int
_ADXL355_read_byte:
;adxl355_spi.c,137 :: 		unsigned char ADXL355_read_byte(unsigned char address){
;adxl355_spi.c,138 :: 		unsigned char value = 0x00;
0x0840	0x781F8A  	PUSH	W10
;adxl355_spi.c,139 :: 		address=(address<<1)|0x01;
0x0842	0xFB800A  	ZE	W10, W0
0x0844	0xDD0041  	SL	W0, #1, W0
0x0846	0x700061  	IOR	W0, #1, W0
0x0848	0x784500  	MOV.B	W0, W10
;adxl355_spi.c,140 :: 		CS_ADXL355=0;
0x084A	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,141 :: 		SPI2_Write(address);
0x084C	0xFB8500  	ZE	W0, W10
0x084E	0x07FD14  	RCALL	_SPI2_Write
;adxl355_spi.c,142 :: 		value=SPI2_Read(0);
0x0850	0xEF2014  	CLR	W10
0x0852	0x07FCDF  	RCALL	_SPI2_Read
;adxl355_spi.c,143 :: 		CS_ADXL355=1;
0x0854	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,144 :: 		return value;
;adxl355_spi.c,145 :: 		}
;adxl355_spi.c,144 :: 		return value;
;adxl355_spi.c,145 :: 		}
L_end_ADXL355_read_byte:
0x0856	0x78054F  	POP	W10
0x0858	0x060000  	RETURN
; end of _ADXL355_read_byte
_ADXL355_read_FIFO:
0x0794	0xFA0002  	LNK	#2
;adxl355_spi.c,167 :: 		unsigned int ADXL355_read_FIFO(unsigned char *vectorFIFO){
;adxl355_spi.c,170 :: 		CS_ADXL355 = 0;
0x0796	0x781F8A  	PUSH	W10
0x0798	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,171 :: 		SPI2_Write(add);
0x079A	0x781F8A  	PUSH	W10
0x079C	0x20023A  	MOV	#35, W10
0x079E	0x07FD6C  	RCALL	_SPI2_Write
0x07A0	0x78054F  	POP	W10
;adxl355_spi.c,173 :: 		vectorFIFO[0] = SPI2_Read(0);
0x07A2	0x78000A  	MOV	W10, W0
0x07A4	0x980700  	MOV	W0, [W14+0]
0x07A6	0x781F8A  	PUSH	W10
0x07A8	0xEF2014  	CLR	W10
0x07AA	0x07FD33  	RCALL	_SPI2_Read
0x07AC	0x78054F  	POP	W10
0x07AE	0x90008E  	MOV	[W14+0], W1
0x07B0	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,174 :: 		vectorFIFO[1] = SPI2_Read(1);
0x07B2	0x450061  	ADD	W10, #1, W0
0x07B4	0x980700  	MOV	W0, [W14+0]
0x07B6	0x781F8A  	PUSH	W10
0x07B8	0x20001A  	MOV	#1, W10
0x07BA	0x07FD2B  	RCALL	_SPI2_Read
0x07BC	0x78054F  	POP	W10
0x07BE	0x90008E  	MOV	[W14+0], W1
0x07C0	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,175 :: 		vectorFIFO[2] = SPI2_Read(2);
0x07C2	0x450062  	ADD	W10, #2, W0
0x07C4	0x980700  	MOV	W0, [W14+0]
0x07C6	0x781F8A  	PUSH	W10
0x07C8	0x20002A  	MOV	#2, W10
0x07CA	0x07FD23  	RCALL	_SPI2_Read
0x07CC	0x78054F  	POP	W10
0x07CE	0x90008E  	MOV	[W14+0], W1
0x07D0	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,177 :: 		vectorFIFO[3] = SPI2_Read(0);
0x07D2	0x450063  	ADD	W10, #3, W0
0x07D4	0x980700  	MOV	W0, [W14+0]
0x07D6	0x781F8A  	PUSH	W10
0x07D8	0xEF2014  	CLR	W10
0x07DA	0x07FD1B  	RCALL	_SPI2_Read
0x07DC	0x78054F  	POP	W10
0x07DE	0x90008E  	MOV	[W14+0], W1
0x07E0	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,178 :: 		vectorFIFO[4] = SPI2_Read(1);
0x07E2	0x450064  	ADD	W10, #4, W0
0x07E4	0x980700  	MOV	W0, [W14+0]
0x07E6	0x781F8A  	PUSH	W10
0x07E8	0x20001A  	MOV	#1, W10
0x07EA	0x07FD13  	RCALL	_SPI2_Read
0x07EC	0x78054F  	POP	W10
0x07EE	0x90008E  	MOV	[W14+0], W1
0x07F0	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,179 :: 		vectorFIFO[5] = SPI2_Read(2);
0x07F2	0x450065  	ADD	W10, #5, W0
0x07F4	0x980700  	MOV	W0, [W14+0]
0x07F6	0x781F8A  	PUSH	W10
0x07F8	0x20002A  	MOV	#2, W10
0x07FA	0x07FD0B  	RCALL	_SPI2_Read
0x07FC	0x78054F  	POP	W10
0x07FE	0x90008E  	MOV	[W14+0], W1
0x0800	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,181 :: 		vectorFIFO[6] = SPI2_Read(0);
0x0802	0x450066  	ADD	W10, #6, W0
0x0804	0x980700  	MOV	W0, [W14+0]
0x0806	0x781F8A  	PUSH	W10
0x0808	0xEF2014  	CLR	W10
0x080A	0x07FD03  	RCALL	_SPI2_Read
0x080C	0x78054F  	POP	W10
0x080E	0x90008E  	MOV	[W14+0], W1
0x0810	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,182 :: 		vectorFIFO[7] = SPI2_Read(1);
0x0812	0x450067  	ADD	W10, #7, W0
0x0814	0x980700  	MOV	W0, [W14+0]
0x0816	0x781F8A  	PUSH	W10
0x0818	0x20001A  	MOV	#1, W10
0x081A	0x07FCFB  	RCALL	_SPI2_Read
0x081C	0x78054F  	POP	W10
0x081E	0x90008E  	MOV	[W14+0], W1
0x0820	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,183 :: 		vectorFIFO[8] = SPI2_Read(2);
0x0822	0x450068  	ADD	W10, #8, W0
0x0824	0x980700  	MOV	W0, [W14+0]
0x0826	0x20002A  	MOV	#2, W10
0x0828	0x07FCF4  	RCALL	_SPI2_Read
0x082A	0x90008E  	MOV	[W14+0], W1
0x082C	0x784880  	MOV.B	W0, [W1]
;adxl355_spi.c,184 :: 		CS_ADXL355 = 1;
0x082E	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;adxl355_spi.c,185 :: 		Delay_us(5);
0x0830	0x200287  	MOV	#40, W7
L_ADXL355_read_FIFO16:
0x0832	0xED200E  	DEC	W7
0x0834	0x3AFFFE  	BRA NZ	L_ADXL355_read_FIFO16
0x0836	0x000000  	NOP
0x0838	0x000000  	NOP
;adxl355_spi.c,187 :: 		}
;adxl355_spi.c,186 :: 		return;
;adxl355_spi.c,187 :: 		}
L_end_ADXL355_read_FIFO:
0x083A	0x78054F  	POP	W10
0x083C	0xFA8000  	ULNK
0x083E	0x060000  	RETURN
; end of _ADXL355_read_FIFO
;Acelerografo.c,0 :: ?ICS?lstr6_Acelerografo [16]
0x8000	0x5024 ;?ICS?lstr6_Acelerografo+0
0x8002	0x544D ;?ICS?lstr6_Acelerografo+2
0x8004	0x334B ;?ICS?lstr6_Acelerografo+4
0x8006	0x3931 ;?ICS?lstr6_Acelerografo+6
0x8008	0x312C ;?ICS?lstr6_Acelerografo+8
0x800A	0x322A ;?ICS?lstr6_Acelerografo+10
0x800C	0x0D34 ;?ICS?lstr6_Acelerografo+12
0x800E	0x000A ;?ICS?lstr6_Acelerografo+14
; end of ?ICS?lstr6_Acelerografo
;Acelerografo.c,0 :: ?ICS?lstr1_Acelerografo [14]
0x8010	0x5024 ;?ICS?lstr1_Acelerografo+0
0x8012	0x544D ;?ICS?lstr1_Acelerografo+2
0x8014	0x364B ;?ICS?lstr1_Acelerografo+4
0x8016	0x3530 ;?ICS?lstr1_Acelerografo+6
0x8018	0x332A ;?ICS?lstr1_Acelerografo+8
0x801A	0x0D31 ;?ICS?lstr1_Acelerografo+10
0x801C	0x000A ;?ICS?lstr1_Acelerografo+12
; end of ?ICS?lstr1_Acelerografo
;Acelerografo.c,0 :: ?ICS?lstr8_Acelerografo [16]
0x801E	0x5024 ;?ICS?lstr8_Acelerografo+0
0x8020	0x544D ;?ICS?lstr8_Acelerografo+2
0x8022	0x354B ;?ICS?lstr8_Acelerografo+4
0x8024	0x3331 ;?ICS?lstr8_Acelerografo+6
0x8026	0x312C ;?ICS?lstr8_Acelerografo+8
0x8028	0x322A ;?ICS?lstr8_Acelerografo+10
0x802A	0x0D38 ;?ICS?lstr8_Acelerografo+12
0x802C	0x000A ;?ICS?lstr8_Acelerografo+14
; end of ?ICS?lstr8_Acelerografo
;Acelerografo.c,0 :: ?ICS?lstr7_Acelerografo [14]
0x802E	0x5024 ;?ICS?lstr7_Acelerografo+0
0x8030	0x544D ;?ICS?lstr7_Acelerografo+2
0x8032	0x344B ;?ICS?lstr7_Acelerografo+4
0x8034	0x3331 ;?ICS?lstr7_Acelerografo+6
0x8036	0x332A ;?ICS?lstr7_Acelerografo+8
0x8038	0x0D34 ;?ICS?lstr7_Acelerografo+10
0x803A	0x000A ;?ICS?lstr7_Acelerografo+12
; end of ?ICS?lstr7_Acelerografo
;,0 :: _initBlock_4 [40]
; Containing: ?ICS?lstr2_Acelerografo [19]
;             ?ICS?lstr3_Acelerografo [21]
0x803C	0x5024 ;_initBlock_4+0 : ?ICS?lstr2_Acelerografo at 0x803C
0x803E	0x544D ;_initBlock_4+2
0x8040	0x324B ;_initBlock_4+4
0x8042	0x3032 ;_initBlock_4+6
0x8044	0x312C ;_initBlock_4+8
0x8046	0x3030 ;_initBlock_4+10
0x8048	0x2A30 ;_initBlock_4+12
0x804A	0x4631 ;_initBlock_4+14
0x804C	0x0A0D ;_initBlock_4+16
0x804E	0x2400 ;_initBlock_4+18 : ?ICS?lstr3_Acelerografo at 0x804F
0x8050	0x4D50 ;_initBlock_4+20
0x8052	0x4B54 ;_initBlock_4+22
0x8054	0x3532 ;_initBlock_4+24
0x8056	0x2C31 ;_initBlock_4+26
0x8058	0x3131 ;_initBlock_4+28
0x805A	0x3235 ;_initBlock_4+30
0x805C	0x3030 ;_initBlock_4+32
0x805E	0x312A ;_initBlock_4+34
0x8060	0x0D46 ;_initBlock_4+36
0x8062	0x000A ;_initBlock_4+38
; end of _initBlock_4
;,0 :: _initBlock_5 [73]
; Containing: ?ICS_datosLeidos [9]
;             ?ICS?lstr5_Acelerografo [48]
;             ?ICS?lstr4_Acelerografo [16]
0x8064	0x0000 ;_initBlock_5+0 : ?ICS_datosLeidos at 0x8064
0x8066	0x0000 ;_initBlock_5+2
0x8068	0x0000 ;_initBlock_5+4
0x806A	0x0000 ;_initBlock_5+6
0x806C	0x2400 ;_initBlock_5+8 : ?ICS?lstr5_Acelerografo at 0x806D
0x806E	0x4D50 ;_initBlock_5+10
0x8070	0x4B54 ;_initBlock_5+12
0x8072	0x3133 ;_initBlock_5+14
0x8074	0x2C34 ;_initBlock_5+16
0x8076	0x2C30 ;_initBlock_5+18
0x8078	0x2C31 ;_initBlock_5+20
0x807A	0x2C30 ;_initBlock_5+22
0x807C	0x2C30 ;_initBlock_5+24
0x807E	0x2C30 ;_initBlock_5+26
0x8080	0x2C30 ;_initBlock_5+28
0x8082	0x2C30 ;_initBlock_5+30
0x8084	0x2C30 ;_initBlock_5+32
0x8086	0x2C30 ;_initBlock_5+34
0x8088	0x2C30 ;_initBlock_5+36
0x808A	0x2C30 ;_initBlock_5+38
0x808C	0x2C30 ;_initBlock_5+40
0x808E	0x2C30 ;_initBlock_5+42
0x8090	0x2C30 ;_initBlock_5+44
0x8092	0x2C30 ;_initBlock_5+46
0x8094	0x2C30 ;_initBlock_5+48
0x8096	0x2A30 ;_initBlock_5+50
0x8098	0x3932 ;_initBlock_5+52
0x809A	0x0A0D ;_initBlock_5+54
0x809C	0x2400 ;_initBlock_5+56 : ?ICS?lstr4_Acelerografo at 0x809D
0x809E	0x4D50 ;_initBlock_5+58
0x80A0	0x4B54 ;_initBlock_5+60
0x80A2	0x3133 ;_initBlock_5+62
0x80A4	0x2C33 ;_initBlock_5+64
0x80A6	0x2A31 ;_initBlock_5+66
0x80A8	0x4532 ;_initBlock_5+68
0x80AA	0x0A0D ;_initBlock_5+70
0x80AC	0x00 ;_initBlock_5+72
; end of _initBlock_5
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200      [14]    _Delay_100ms
0x020E       [4]    _Get_Fosc_Per_Cyc
0x0212      [24]    _SPI2_Read
0x022A      [14]    _UART1_Write
0x0238       [6]    _Get_Fosc_kHz
0x023E      [34]    _UART1_Write_Text
0x0260      [24]    _Bcd2Dec
0x0278       [8]    _SPI2_Write
0x0280      [18]    _DS3234_read_byte
0x0292      [42]    _Dec2Bcd
0x02BC      [18]    _DS3234_write_byte
0x02CE      [46]    _SPI2_Init_Advanced
0x02FC      [88]    __Modulus_32x32
0x0354      [82]    __Divide_32x32
0x03A6     [258]    _UART1_Init
0x04A8      [18]    __Multiply_32x32
0x04BA      [40]    _SPI2_Init
0x04E2      [28]    _ADXL355_write_byte
0x04FE      [46]    _SPI1_Init_Advanced
0x052C     [124]    _RecuperarFechaRTC
0x05A8     [372]    _ConfiguracionPrincipal
0x071C     [120]    _RecuperarHoraRTC
0x0794     [172]    _ADXL355_read_FIFO
0x0840      [26]    _ADXL355_read_byte
0x085A     [166]    _AjustarTiempoSistema
0x0900      [34]    _InterrupcionP1
0x0922     [232]    _DS3234_setDate
0x0A0A      [74]    _GPS_init
0x0A54      [60]    _DS3234_init
0x0A90      [98]    _ADXL355_init
0x0AF2      [50]    _RecuperarFechaRPI
0x0B24      [52]    _RecuperarHoraRPI
0x0B58     [228]    _CambiarEstadoBandera
0x0C3C     [290]    _Timer1Int
0x0D5E     [294]    _main
0x0E84     [580]    _spi_1
0x10C8      [82]    _int_1
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x06C4       [1]    RPINR18bits
0x0680       [2]    RPOR0bits
0x0820       [0]    U1RXIE_bit
0x08C2       [2]    INTCON2
0x0E10       [0]    TRISB13_bit
0x0E10       [0]    TRISB14_bit
0x0E10       [0]    TRISB15_bit
0x0800       [0]    SPI1IF_bit
0x06CC       [2]    RPINR22bits
0x0684       [2]    RPOR2bits
0x0820       [0]    SPI1IE_bit
0x0844       [2]    IPC2bits
0x0222       [2]    U1STAbits
0x0240       [2]    SPI1STAT
0x0746       [2]    PLLFBDbits
0x0E0E       [2]    ANSELA
0x0E1E       [2]    ANSELB
0x0744       [2]    CLKDIVbits
0x0E14       [0]    LATB4_bit
0x0E14       [0]    TEST
0x0E14       [0]    LATB12_bit
0x0E10       [0]    TRISB12_bit
0x0E10       [0]    TRISB10_bit
0x0E10       [0]    TRISB11_bit
0x0E10       [0]    TRISB4_bit
0x0E00       [0]    TRISA2_bit
0x0E00       [0]    TRISA3_bit
0x0E00       [0]    TRISA4_bit
0x10AE       [2]    _UART_Rdy_Ptr
0x10B0       [2]    _UART_Tx_Idle_Ptr
0x0222       [2]    U1STA
0x10B2       [2]    _UART_Rd_Ptr
0x0242       [2]    SPI1CON
0x0268       [2]    SPI2BUF
0x10B4       [2]    _UART_Wr_Ptr
0x10B6     [243]    _datosFIFO
0x11A9    [2506]    _tramaCompleta
0x1B73       [6]    _tiempo
0x0228       [2]    U1BRG
0x0224       [2]    U1TXREG
0x1B79       [6]    _tiempoRPI
0x0802       [0]    INT1IF_bit
0x084A       [1]    IPC5bits
0x0104       [2]    T1CON
0x0822       [0]    INT1IE_bit
0x0682       [2]    RPOR1bits
0x0260       [2]    SPI2STAT
0x06A0       [2]    RPINR0
0x0262       [2]    SPI2CON
0x1B80       [2]    _SPI_Rd_Ptr
0x1B82       [2]    _SPI_Wr_Ptr
0x0840       [2]    IPC0bits
0x0820       [0]    T1IE_bit
0x0800       [0]    T1IF_bit
0x0102       [2]    PR1
0x0E14       [0]    RP2
0x1B84       [2]    _y
0x10AD       [1]    _bufferSPI
0x1B7F       [1]    _banLec
0x1B86       [2]    _x
0x1B88       [1]    _numTMR1
0x1B8A       [2]    _i
0x1B8C       [2]    _j
0x1B89       [1]    _tipoOperacion
0x1B8E       [1]    _banMuestrear
0x0248       [2]    SPI1BUF
0x1B8F       [1]    _banOperacion
0x1B90       [1]    _banEsc
0x1B91       [1]    _banCiclo
0x1B92       [1]    _banInicio
0x0E04       [0]    CS_ADXL355
0x0E04       [0]    LATA3_bit
0x0E04       [0]    CS_DS3234
0x0E04       [0]    LATA2_bit
0x1B93       [1]    _tasaMuestreo
0x0220       [2]    U1MODE
0x1B94       [4]    _horaSistema
0x1B98       [4]    _fechaSistema
0x1B9C       [1]    _contMuestras
0x1B9D       [1]    _fuenteReloj
0x1B9E       [1]    _banGPSC
0x1B9F       [1]    _banSetReloj
0x1BA0       [1]    _banSyncReloj
0x1BA1       [1]    _contTimer1
0x0E04       [0]    RP1
0x0E04       [0]    LATA4_bit
0x1BA2       [1]    _numSetsFIFO
0x1BA3       [1]    _contCiclos
0x1BA4       [2]    _contFIFO
0x1BA6       [1]    _numFIFO
0x1BA7       [1]    _banSPI4
0x1BA8       [1]    _banSPI5
0x1BA9       [1]    _banSPI6
0x1BAA       [1]    _banSPI3
0x1BAB       [1]    _banSPI0
0x1BAC       [1]    _banSPI1
0x1BAD       [1]    _banSPI2
0x1BAE       [2]    _i_gps
0x1BB0       [1]    _byteGPS
0x1BB1       [1]    _banGPSI
0x1BB2       [1]    _banSPIA
0x1BB3       [1]    _banSPI7
0x1BB4       [1]    _banSPI8
0x1BB5       [1]    _banSPI9
0x1000      [16]    ?lstr6_Acelerografo
0x1010      [14]    ?lstr1_Acelerografo
0x101E      [16]    ?lstr8_Acelerografo
0x102E      [14]    ?lstr7_Acelerografo
0x103C      [19]    ?lstr2_Acelerografo
0x104F      [21]    ?lstr3_Acelerografo
0x1064       [9]    _datosLeidos
0x106D      [48]    ?lstr5_Acelerografo
0x109D      [16]    ?lstr4_Acelerografo
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x0014       [2]    FARG_SPI2_Read_buffer
0x0220       [2]    U1MODE
0x0222       [2]    U1STA
0x0224       [2]    U1TXREG
0x0228       [2]    U1BRG
0x0014       [2]    FARG_UART1_Write__data
0x0014       [2]    FARG_UART1_Write_Text_uart_text
0x0240       [2]    SPI1STAT
0x0242       [2]    SPI1CON
0x0248       [2]    SPI1BUF
0x0014       [1]    FARG_Bcd2Dec_bcdnum
0x0260       [2]    SPI2STAT
0x0262       [2]    SPI2CON
0x0268       [2]    SPI2BUF
0x0014       [2]    FARG_SPI2_Write_data_out
0x0014       [1]    FARG_DS3234_read_byte_address
0x0014       [1]    FARG_Dec2Bcd_decnum
0x0014       [1]    FARG_DS3234_write_byte_address
0x0016       [1]    FARG_DS3234_write_byte_value
0x0014       [2]    FARG_SPI2_Init_Advanced_master_mode
0x0016       [2]    FARG_SPI2_Init_Advanced_mode16
0x0018       [2]    FARG_SPI2_Init_Advanced_sec_prescaler
0x001A       [2]    FARG_SPI2_Init_Advanced_pri_prescaler
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0014       [1]    FARG_ADXL355_write_byte_address
0x0016       [1]    FARG_ADXL355_write_byte_value
0x0014       [2]    FARG_SPI1_Init_Advanced_master_mode
0x0016       [2]    FARG_SPI1_Init_Advanced_mode16
0x0018       [2]    FARG_SPI1_Init_Advanced_sec_prescaler
0x001A       [2]    FARG_SPI1_Init_Advanced_pri_prescaler
0x06A0       [2]    RPINR0
0x0014       [2]    FARG_ADXL355_read_FIFO_vectorFIFO
0x0014       [1]    FARG_ADXL355_read_byte_address
0x0014       [4]    FARG_AjustarTiempoSistema_longHora
0x0018       [4]    FARG_AjustarTiempoSistema_longFecha
0x08C2       [2]    INTCON2
0x0014       [1]    FARG_InterrupcionP1_operacion
0x0014       [4]    FARG_DS3234_setDate_longHora
0x0018       [4]    FARG_DS3234_setDate_longFecha
0x0014       [1]    FARG_ADXL355_init_tMuestreo
0x0014       [2]    FARG_RecuperarFechaRPI_tramaTiempoRpi
0x0014       [2]    FARG_RecuperarHoraRPI_tramaTiempoRpi
0x0014       [1]    FARG_CambiarEstadoBandera_bandera
0x0016       [1]    FARG_CambiarEstadoBandera_estado
0x0E0E       [2]    ANSELA
0x0E1E       [2]    ANSELB
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x8000      [16]    ?ICS?lstr6_Acelerografo
0x8010      [14]    ?ICS?lstr1_Acelerografo
0x801E      [16]    ?ICS?lstr8_Acelerografo
0x802E      [14]    ?ICS?lstr7_Acelerografo
0x803C      [19]    ?ICS?lstr2_Acelerografo
0x804F      [21]    ?ICS?lstr3_Acelerografo
0x8064       [9]    ?ICS_datosLeidos
0x806D      [48]    ?ICS?lstr5_Acelerografo
0x809D      [16]    ?ICS?lstr4_Acelerografo
//** Label List: ** 
//----------------------------------------------
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_GPS_init18
  L_GPS_init20
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_IncrementarFecha27
  L_IncrementarFecha28
  L_IncrementarFecha29
  L_IncrementarFecha30
  L_IncrementarFecha31
  L_IncrementarFecha32
  L_IncrementarFecha33
  L_IncrementarFecha34
  L_IncrementarFecha35
  L_IncrementarFecha36
  L_IncrementarFecha37
  L_IncrementarFecha38
  L_IncrementarFecha39
  L_IncrementarFecha40
  L_IncrementarFecha41
  L_IncrementarFecha42
  L_IncrementarFecha43
  L_IncrementarFecha44
  L_IncrementarFecha45
  L_IncrementarFecha46
  L_IncrementarFecha47
  L_IncrementarFecha48
  L_main49
  L_main50
  L_main51
  L_ConfiguracionPrincipal53
  L_InterrupcionP155
  L_CambiarEstadoBandera57
  L_CambiarEstadoBandera58
  L_CambiarEstadoBandera59
  L_CambiarEstadoBandera60
  L_CambiarEstadoBandera61
  L_CambiarEstadoBandera62
  L_CambiarEstadoBandera63
  L_CambiarEstadoBandera64
  L_CambiarEstadoBandera65
  L_CambiarEstadoBandera66
  L_CambiarEstadoBandera67
  L_CambiarEstadoBandera68
  L_CambiarEstadoBandera69
  L_Muestrear70
  L_Muestrear71
  L_Muestrear72
  L_Muestrear73
  L_Muestrear74
  L_Muestrear75
  L_Muestrear76
  L_Muestrear77
  L_Muestrear78
  L_Muestrear79
  L_Muestrear80
  L_Muestrear81
  L_Muestrear82
  L_Muestrear83
  L_Muestrear84
  L_Muestrear85
  L_Muestrear86
  L_Muestrear87
  L_Muestrear88
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_spi_1114
  L_spi_1115
  L_spi_1116
  L_spi_1117
  L_spi_1118
  L_spi_1119
  L_spi_1120
  L_spi_1121
  L_spi_1122
  L_spi_1123
  L_spi_1124
  L_int_1125
  L_int_1126
  L_int_1127
  L_Timer1Int128
  L_Timer1Int129
  L_Timer1Int130
  L_Timer1Int131
  L_Timer1Int132
  L_Timer1Int133
  L_Timer1Int134
  L_Timer1Int135
  L_Timer1Int136
  L_Timer1Int137
  L_Timer1Int138
  L_Timer1Int139
  L_Timer1Int140
  L_Timer1Int141
  L__IncrementarFecha142
  L__IncrementarFecha143
  L__IncrementarFecha144
  L__IncrementarFecha145
  L__IncrementarFecha146
  L__IncrementarFecha147
  L__IncrementarFecha148
  L__IncrementarFecha149
  L__IncrementarFecha150
  L__IncrementarFecha151
  L__IncrementarFecha152
  L__IncrementarFecha153
  L__IncrementarFecha154
  L__IncrementarFecha155
  L__IncrementarFecha156
  L__IncrementarFecha157
  L__IncrementarFecha158
  L__IncrementarFecha159
  L__IncrementarFecha160
  L__IncrementarFecha161
  L__Muestrear162
  L__Muestrear163
  L__Muestrear164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__Timer1Int204
  L__Timer1Int205
  L__Timer1Int206
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init208
  L__ADXL355_init209
  L__ADXL355_init210
  L__ADXL355_init211
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data215
  L__ADXL355_read_data216
  L__ADXL355_read_data217
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha229
  L__IncrementarFecha230
  L__IncrementarFecha231
  L__IncrementarFecha232
  L__IncrementarFecha233
  L__IncrementarFecha234
  L__IncrementarFecha235
  L__IncrementarFecha236
  L__IncrementarFecha237
  L__IncrementarFecha238
  L__IncrementarFecha239
  L__IncrementarFecha240
  L__IncrementarFecha241
  L__IncrementarFecha242
  L__IncrementarFecha243
  L__IncrementarFecha244
  L__IncrementarFecha245
  L__IncrementarFecha246
  L__IncrementarFecha247
  L__IncrementarFecha248
  L__IncrementarFecha249
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_CambiarEstadoBandera
  _CambiarEstadoBandera
  L__CambiarEstadoBandera258
  L__CambiarEstadoBandera259
  L__CambiarEstadoBandera260
  L__CambiarEstadoBandera261
  L__CambiarEstadoBandera262
  L__CambiarEstadoBandera263
  L__CambiarEstadoBandera264
  L__CambiarEstadoBandera265
  L__CambiarEstadoBandera266
  L__CambiarEstadoBandera267
  L__CambiarEstadoBandera268
  L_end_Muestrear
  _Muestrear
  L__Muestrear270
  L__Muestrear271
  L__Muestrear272
  L__Muestrear273
  L__Muestrear274
  L__Muestrear275
  L__Muestrear276
  L__Muestrear277
  L_end_spi_1
  _spi_1
  L__spi_1279
  L__spi_1280
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L__spi_1286
  L__spi_1287
  L__spi_1288
  L__spi_1289
  L__spi_1290
  L__spi_1291
  L__spi_1292
  L__spi_1293
  L__spi_1294
  L__spi_1295
  L__spi_1296
  L__spi_1297
  L__spi_1298
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L_end_int_1
  _int_1
  L__int_1307
  L__int_1308
  L__int_1309
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int311
  L__Timer1Int312
  L__Timer1Int313
  L__Timer1Int314
  L__Timer1Int315
  L__Timer1Int316
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  L_SPI1_Read0
  L_SPI1_Read1
  L_SPI1_Read2
  L_SPI1_Read3
  L_SPI2_Read4
  L_SPI2_Read5
  L_SPI2_Read6
  L_SPI2_Read7
  L_end_SPI1_Read
  _SPI1_Read
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI2_Read
  _SPI2_Read
  L_end_SPI2_Write
  _SPI2_Write
  L_end_SPI2_Init_Advanced
  _SPI2_Init_Advanced
  L_end_SPI2_Init
  _SPI2_Init
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init14
  L_UART1_Init15
  L_UART1_Init_Advanced16
  L_UART1_Init_Advanced17
  L_UART1_Init_Advanced18
  L_UART1_Init_Advanced19
  L_UART1_Init_Advanced20
  L_UART1_Init_Advanced21
  L_UART1_Init_Advanced22
  L_UART1_Init_Advanced23
  L_UART1_Init_Advanced24
  L_UART2_Write25
  L_UART2_Write26
  L_UART2_Write_Text27
  L_UART2_Write_Text28
  L_UART2_Read_Text29
  L_UART2_Read_Text30
  L_UART2_Read_Text31
  L_UART2_Read_Text32
  L_UART2_Read_Text33
  L_UART2_Read_Text34
  L_UART2_Read_Text35
  L_UART2_Read_Text36
  L_UART2_Read_Text37
  L_UART2_Init38
  L_UART2_Init39
  L_UART2_Init40
  L_UART2_Init_Advanced41
  L_UART2_Init_Advanced42
  L_UART2_Init_Advanced43
  L_UART2_Init_Advanced44
  L_UART2_Init_Advanced45
  L_UART2_Init_Advanced46
  L_UART2_Init_Advanced47
  L_UART2_Init_Advanced48
  L_UART2_Init_Advanced49
  L_UART_Write_Text50
  L_UART_Write_Text51
  L_UART_Read_Text52
  L_UART_Read_Text53
  L_UART_Read_Text54
  L_UART_Read_Text55
  L_UART_Read_Text56
  L_UART_Read_Text57
  L_UART_Read_Text58
  L_UART_Read_Text59
  L_UART_Read_Text60
  L__UART1_Read_Text61
  L__UART1_Init62
  L__UART1_Init63
  L__UART1_Init64
  L__UART2_Read_Text65
  L__UART2_Init66
  L__UART2_Init67
  L__UART2_Init68
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text71
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text75
  L__UART1_Read_Text76
  L__UART1_Read_Text77
  L__UART1_Read_Text78
  L__UART1_Read_Text79
  L__UART1_Read_Text80
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init83
  L__UART1_Init84
  L__UART1_Init85
  L__UART1_Init86
  L__UART1_Init87
  L__UART1_Init88
  L__UART1_Init89
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced91
  L__UART1_Init_Advanced92
  L__UART1_Init_Advanced93
  L__UART1_Init_Advanced94
  L__UART1_Init_Advanced95
  L__UART1_Init_Advanced96
  L__UART1_Init_Advanced97
  L__UART1_Init_Advanced98
  L__UART1_Init_Advanced99
  L__UART1_Init_Advanced100
  L__UART1_Init_Advanced101
  L__UART1_Init_Advanced102
  L__UART1_Init_Advanced103
  L__UART1_Init_Advanced104
  L__UART1_Init_Advanced105
  L_end_UART2_Write
  _UART2_Write
  L_end_UART2_Write_Text
  _UART2_Write_Text
  L__UART2_Write_Text108
  L_end_UART2_Data_Ready
  _UART2_Data_Ready
  L_end_UART2_Read
  _UART2_Read
  L_end_UART2_Read_Text
  _UART2_Read_Text
  L__UART2_Read_Text112
  L__UART2_Read_Text113
  L__UART2_Read_Text114
  L__UART2_Read_Text115
  L__UART2_Read_Text116
  L__UART2_Read_Text117
  L_end_UART2_Tx_Idle
  _UART2_Tx_Idle
  L_end_UART2_Init
  _UART2_Init
  L__UART2_Init120
  L__UART2_Init121
  L__UART2_Init122
  L__UART2_Init123
  L__UART2_Init124
  L__UART2_Init125
  L__UART2_Init126
  L_end_UART2_Init_Advanced
  _UART2_Init_Advanced
  L__UART2_Init_Advanced128
  L__UART2_Init_Advanced129
  L__UART2_Init_Advanced130
  L__UART2_Init_Advanced131
  L__UART2_Init_Advanced132
  L__UART2_Init_Advanced133
  L__UART2_Init_Advanced134
  L__UART2_Init_Advanced135
  L__UART2_Init_Advanced136
  L__UART2_Init_Advanced137
  L__UART2_Init_Advanced138
  L__UART2_Init_Advanced139
  L__UART2_Init_Advanced140
  L__UART2_Init_Advanced141
  L__UART2_Init_Advanced142
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text146
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text150
  L__UART_Read_Text151
  L__UART_Read_Text152
  L__UART_Read_Text153
  L__UART_Read_Text154
  L__UART_Read_Text155
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_GPS_init18
  L_GPS_init20
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_IncrementarFecha27
  L_IncrementarFecha28
  L_IncrementarFecha29
  L_IncrementarFecha30
  L_IncrementarFecha31
  L_IncrementarFecha32
  L_IncrementarFecha33
  L_IncrementarFecha34
  L_IncrementarFecha35
  L_IncrementarFecha36
  L_IncrementarFecha37
  L_IncrementarFecha38
  L_IncrementarFecha39
  L_IncrementarFecha40
  L_IncrementarFecha41
  L_IncrementarFecha42
  L_IncrementarFecha43
  L_IncrementarFecha44
  L_IncrementarFecha45
  L_IncrementarFecha46
  L_IncrementarFecha47
  L_IncrementarFecha48
  L_main49
  L_main50
  L_main51
  L_ConfiguracionPrincipal53
  L_InterrupcionP155
  L_CambiarEstadoBandera57
  L_CambiarEstadoBandera58
  L_CambiarEstadoBandera59
  L_CambiarEstadoBandera60
  L_CambiarEstadoBandera61
  L_CambiarEstadoBandera62
  L_CambiarEstadoBandera63
  L_CambiarEstadoBandera64
  L_CambiarEstadoBandera65
  L_CambiarEstadoBandera66
  L_CambiarEstadoBandera67
  L_CambiarEstadoBandera68
  L_CambiarEstadoBandera69
  L_Muestrear70
  L_Muestrear71
  L_Muestrear72
  L_Muestrear73
  L_Muestrear74
  L_Muestrear75
  L_Muestrear76
  L_Muestrear77
  L_Muestrear78
  L_Muestrear79
  L_Muestrear80
  L_Muestrear81
  L_Muestrear82
  L_Muestrear83
  L_Muestrear84
  L_Muestrear85
  L_Muestrear86
  L_Muestrear87
  L_Muestrear88
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_spi_1114
  L_spi_1115
  L_spi_1116
  L_spi_1117
  L_spi_1118
  L_spi_1119
  L_spi_1120
  L_spi_1121
  L_spi_1122
  L_spi_1123
  L_spi_1124
  L_int_1125
  L_int_1126
  L_int_1127
  L_Timer1Int128
  L_Timer1Int129
  L_Timer1Int130
  L_Timer1Int131
  L_Timer1Int132
  L_Timer1Int133
  L_Timer1Int134
  L_Timer1Int135
  L_Timer1Int136
  L_Timer1Int137
  L_Timer1Int138
  L_Timer1Int139
  L_Timer1Int140
  L_Timer1Int141
  L__IncrementarFecha142
  L__IncrementarFecha143
  L__IncrementarFecha144
  L__IncrementarFecha145
  L__IncrementarFecha146
  L__IncrementarFecha147
  L__IncrementarFecha148
  L__IncrementarFecha149
  L__IncrementarFecha150
  L__IncrementarFecha151
  L__IncrementarFecha152
  L__IncrementarFecha153
  L__IncrementarFecha154
  L__IncrementarFecha155
  L__IncrementarFecha156
  L__IncrementarFecha157
  L__IncrementarFecha158
  L__IncrementarFecha159
  L__IncrementarFecha160
  L__IncrementarFecha161
  L__Muestrear162
  L__Muestrear163
  L__Muestrear164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__Timer1Int204
  L__Timer1Int205
  L__Timer1Int206
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init208
  L__ADXL355_init209
  L__ADXL355_init210
  L__ADXL355_init211
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data215
  L__ADXL355_read_data216
  L__ADXL355_read_data217
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha229
  L__IncrementarFecha230
  L__IncrementarFecha231
  L__IncrementarFecha232
  L__IncrementarFecha233
  L__IncrementarFecha234
  L__IncrementarFecha235
  L__IncrementarFecha236
  L__IncrementarFecha237
  L__IncrementarFecha238
  L__IncrementarFecha239
  L__IncrementarFecha240
  L__IncrementarFecha241
  L__IncrementarFecha242
  L__IncrementarFecha243
  L__IncrementarFecha244
  L__IncrementarFecha245
  L__IncrementarFecha246
  L__IncrementarFecha247
  L__IncrementarFecha248
  L__IncrementarFecha249
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_CambiarEstadoBandera
  _CambiarEstadoBandera
  L__CambiarEstadoBandera258
  L__CambiarEstadoBandera259
  L__CambiarEstadoBandera260
  L__CambiarEstadoBandera261
  L__CambiarEstadoBandera262
  L__CambiarEstadoBandera263
  L__CambiarEstadoBandera264
  L__CambiarEstadoBandera265
  L__CambiarEstadoBandera266
  L__CambiarEstadoBandera267
  L__CambiarEstadoBandera268
  L_end_Muestrear
  _Muestrear
  L__Muestrear270
  L__Muestrear271
  L__Muestrear272
  L__Muestrear273
  L__Muestrear274
  L__Muestrear275
  L__Muestrear276
  L__Muestrear277
  L_end_spi_1
  _spi_1
  L__spi_1279
  L__spi_1280
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L__spi_1286
  L__spi_1287
  L__spi_1288
  L__spi_1289
  L__spi_1290
  L__spi_1291
  L__spi_1292
  L__spi_1293
  L__spi_1294
  L__spi_1295
  L__spi_1296
  L__spi_1297
  L__spi_1298
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L_end_int_1
  _int_1
  L__int_1307
  L__int_1308
  L__int_1309
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int311
  L__Timer1Int312
  L__Timer1Int313
  L__Timer1Int314
  L__Timer1Int315
  L__Timer1Int316
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_GPS_init18
  L_GPS_init20
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_IncrementarFecha27
  L_IncrementarFecha28
  L_IncrementarFecha29
  L_IncrementarFecha30
  L_IncrementarFecha31
  L_IncrementarFecha32
  L_IncrementarFecha33
  L_IncrementarFecha34
  L_IncrementarFecha35
  L_IncrementarFecha36
  L_IncrementarFecha37
  L_IncrementarFecha38
  L_IncrementarFecha39
  L_IncrementarFecha40
  L_IncrementarFecha41
  L_IncrementarFecha42
  L_IncrementarFecha43
  L_IncrementarFecha44
  L_IncrementarFecha45
  L_IncrementarFecha46
  L_IncrementarFecha47
  L_IncrementarFecha48
  L_main49
  L_main50
  L_main51
  L_ConfiguracionPrincipal53
  L_InterrupcionP155
  L_CambiarEstadoBandera57
  L_CambiarEstadoBandera58
  L_CambiarEstadoBandera59
  L_CambiarEstadoBandera60
  L_CambiarEstadoBandera61
  L_CambiarEstadoBandera62
  L_CambiarEstadoBandera63
  L_CambiarEstadoBandera64
  L_CambiarEstadoBandera65
  L_CambiarEstadoBandera66
  L_CambiarEstadoBandera67
  L_CambiarEstadoBandera68
  L_CambiarEstadoBandera69
  L_Muestrear70
  L_Muestrear71
  L_Muestrear72
  L_Muestrear73
  L_Muestrear74
  L_Muestrear75
  L_Muestrear76
  L_Muestrear77
  L_Muestrear78
  L_Muestrear79
  L_Muestrear80
  L_Muestrear81
  L_Muestrear82
  L_Muestrear83
  L_Muestrear84
  L_Muestrear85
  L_Muestrear86
  L_Muestrear87
  L_Muestrear88
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_spi_1114
  L_spi_1115
  L_spi_1116
  L_spi_1117
  L_spi_1118
  L_spi_1119
  L_spi_1120
  L_spi_1121
  L_spi_1122
  L_spi_1123
  L_spi_1124
  L_int_1125
  L_int_1126
  L_int_1127
  L_Timer1Int128
  L_Timer1Int129
  L_Timer1Int130
  L_Timer1Int131
  L_Timer1Int132
  L_Timer1Int133
  L_Timer1Int134
  L_Timer1Int135
  L_Timer1Int136
  L_Timer1Int137
  L_Timer1Int138
  L_Timer1Int139
  L_Timer1Int140
  L_Timer1Int141
  L__IncrementarFecha142
  L__IncrementarFecha143
  L__IncrementarFecha144
  L__IncrementarFecha145
  L__IncrementarFecha146
  L__IncrementarFecha147
  L__IncrementarFecha148
  L__IncrementarFecha149
  L__IncrementarFecha150
  L__IncrementarFecha151
  L__IncrementarFecha152
  L__IncrementarFecha153
  L__IncrementarFecha154
  L__IncrementarFecha155
  L__IncrementarFecha156
  L__IncrementarFecha157
  L__IncrementarFecha158
  L__IncrementarFecha159
  L__IncrementarFecha160
  L__IncrementarFecha161
  L__Muestrear162
  L__Muestrear163
  L__Muestrear164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__Timer1Int204
  L__Timer1Int205
  L__Timer1Int206
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init208
  L__ADXL355_init209
  L__ADXL355_init210
  L__ADXL355_init211
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data215
  L__ADXL355_read_data216
  L__ADXL355_read_data217
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha229
  L__IncrementarFecha230
  L__IncrementarFecha231
  L__IncrementarFecha232
  L__IncrementarFecha233
  L__IncrementarFecha234
  L__IncrementarFecha235
  L__IncrementarFecha236
  L__IncrementarFecha237
  L__IncrementarFecha238
  L__IncrementarFecha239
  L__IncrementarFecha240
  L__IncrementarFecha241
  L__IncrementarFecha242
  L__IncrementarFecha243
  L__IncrementarFecha244
  L__IncrementarFecha245
  L__IncrementarFecha246
  L__IncrementarFecha247
  L__IncrementarFecha248
  L__IncrementarFecha249
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_CambiarEstadoBandera
  _CambiarEstadoBandera
  L__CambiarEstadoBandera258
  L__CambiarEstadoBandera259
  L__CambiarEstadoBandera260
  L__CambiarEstadoBandera261
  L__CambiarEstadoBandera262
  L__CambiarEstadoBandera263
  L__CambiarEstadoBandera264
  L__CambiarEstadoBandera265
  L__CambiarEstadoBandera266
  L__CambiarEstadoBandera267
  L__CambiarEstadoBandera268
  L_end_Muestrear
  _Muestrear
  L__Muestrear270
  L__Muestrear271
  L__Muestrear272
  L__Muestrear273
  L__Muestrear274
  L__Muestrear275
  L__Muestrear276
  L__Muestrear277
  L_end_spi_1
  _spi_1
  L__spi_1279
  L__spi_1280
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L__spi_1286
  L__spi_1287
  L__spi_1288
  L__spi_1289
  L__spi_1290
  L__spi_1291
  L__spi_1292
  L__spi_1293
  L__spi_1294
  L__spi_1295
  L__spi_1296
  L__spi_1297
  L__spi_1298
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L_end_int_1
  _int_1
  L__int_1307
  L__int_1308
  L__int_1309
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int311
  L__Timer1Int312
  L__Timer1Int313
  L__Timer1Int314
  L__Timer1Int315
  L__Timer1Int316
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_IntToStrWithZeros37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStr43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongWordToStrWithZeros48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongToStr54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_LongIntToStrWithZeros62
  L_LongIntToStrWithZeros63
  L_Dec2Bcd64
  L_Dec2Bcd65
  L_Rtrim66
  L_Rtrim67
  L_Rtrim68
  L_Rtrim69
  L_Ltrim70
  L_Ltrim71
  L_Ltrim72
  L_Ltrim73
  L_Ltrim74
  L_Ltrim75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L_FloatToStr94
  L_FloatToStr95
  L_FloatToStr96
  L_FloatToStr97
  L__ShortToStr98
  L__IntToStr99
  L__LongToStr100
  L__Rtrim101
  L__Rtrim102
  L__Rtrim103
  L__Ltrim104
  L__Ltrim105
  L__Ltrim106
  L__Ltrim107
  L__FloatToStr108
  L__FloatToStr109
  L__FloatToStr110
  L__FloatToStr111
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L__ByteToStr119
  L__ByteToStr120
  L_end_WordToStr
  _WordToStr
  L__WordToStr122
  L__WordToStr123
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros125
  L__WordToStrWithZeros126
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr128
  L__ShortToStr129
  L__ShortToStr130
  L__ShortToStr131
  L_end_IntToStr
  _IntToStr
  L__IntToStr133
  L__IntToStr134
  L__IntToStr135
  L__IntToStr136
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros138
  L__IntToStrWithZeros139
  L__IntToStrWithZeros140
  L__IntToStrWithZeros141
  L__IntToStrWithZeros142
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr144
  L__LongWordToStr145
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros147
  L__LongWordToStrWithZeros148
  L_end_LongToStr
  _LongToStr
  L__LongToStr150
  L__LongToStr151
  L__LongToStr152
  L__LongToStr153
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros155
  L__LongIntToStrWithZeros156
  L__LongIntToStrWithZeros157
  L__LongIntToStrWithZeros158
  L__LongIntToStrWithZeros159
  L_end_Dec2Bcd
  _Dec2Bcd
  L__Dec2Bcd161
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L_end_Rtrim
  _Rtrim
  L__Rtrim166
  L__Rtrim167
  L_end_Ltrim
  _Ltrim
  L__Ltrim169
  L__Ltrim170
  L__Ltrim171
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr173
  L__FloatToStr174
  L__FloatToStr175
  L__FloatToStr176
  L__FloatToStr177
  L__FloatToStr178
  L__FloatToStr179
  L__FloatToStr180
  L__FloatToStr181
  L__FloatToStr182
  L__FloatToStr183
  L__FloatToStr184
  L__FloatToStr185
  L__FloatToStr186
  L__FloatToStr187
  L__FloatToStr188
  L__FloatToStr189
  L__FloatToStr190
  L__FloatToStr191
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_GPS_init18
  L_GPS_init20
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L_IncrementarFecha27
  L_IncrementarFecha28
  L_IncrementarFecha29
  L_IncrementarFecha30
  L_IncrementarFecha31
  L_IncrementarFecha32
  L_IncrementarFecha33
  L_IncrementarFecha34
  L_IncrementarFecha35
  L_IncrementarFecha36
  L_IncrementarFecha37
  L_IncrementarFecha38
  L_IncrementarFecha39
  L_IncrementarFecha40
  L_IncrementarFecha41
  L_IncrementarFecha42
  L_IncrementarFecha43
  L_IncrementarFecha44
  L_IncrementarFecha45
  L_IncrementarFecha46
  L_IncrementarFecha47
  L_IncrementarFecha48
  L_main49
  L_main50
  L_main51
  L_ConfiguracionPrincipal53
  L_InterrupcionP155
  L_CambiarEstadoBandera57
  L_CambiarEstadoBandera58
  L_CambiarEstadoBandera59
  L_CambiarEstadoBandera60
  L_CambiarEstadoBandera61
  L_CambiarEstadoBandera62
  L_CambiarEstadoBandera63
  L_CambiarEstadoBandera64
  L_CambiarEstadoBandera65
  L_CambiarEstadoBandera66
  L_CambiarEstadoBandera67
  L_CambiarEstadoBandera68
  L_CambiarEstadoBandera69
  L_Muestrear70
  L_Muestrear71
  L_Muestrear72
  L_Muestrear73
  L_Muestrear74
  L_Muestrear75
  L_Muestrear76
  L_Muestrear77
  L_Muestrear78
  L_Muestrear79
  L_Muestrear80
  L_Muestrear81
  L_Muestrear82
  L_Muestrear83
  L_Muestrear84
  L_Muestrear85
  L_Muestrear86
  L_Muestrear87
  L_Muestrear88
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_spi_1102
  L_spi_1103
  L_spi_1104
  L_spi_1105
  L_spi_1106
  L_spi_1107
  L_spi_1108
  L_spi_1109
  L_spi_1110
  L_spi_1111
  L_spi_1112
  L_spi_1113
  L_spi_1114
  L_spi_1115
  L_spi_1116
  L_spi_1117
  L_spi_1118
  L_spi_1119
  L_spi_1120
  L_spi_1121
  L_spi_1122
  L_spi_1123
  L_spi_1124
  L_int_1125
  L_int_1126
  L_int_1127
  L_Timer1Int128
  L_Timer1Int129
  L_Timer1Int130
  L_Timer1Int131
  L_Timer1Int132
  L_Timer1Int133
  L_Timer1Int134
  L_Timer1Int135
  L_Timer1Int136
  L_Timer1Int137
  L_Timer1Int138
  L_Timer1Int139
  L_Timer1Int140
  L_Timer1Int141
  L__IncrementarFecha142
  L__IncrementarFecha143
  L__IncrementarFecha144
  L__IncrementarFecha145
  L__IncrementarFecha146
  L__IncrementarFecha147
  L__IncrementarFecha148
  L__IncrementarFecha149
  L__IncrementarFecha150
  L__IncrementarFecha151
  L__IncrementarFecha152
  L__IncrementarFecha153
  L__IncrementarFecha154
  L__IncrementarFecha155
  L__IncrementarFecha156
  L__IncrementarFecha157
  L__IncrementarFecha158
  L__IncrementarFecha159
  L__IncrementarFecha160
  L__IncrementarFecha161
  L__Muestrear162
  L__Muestrear163
  L__Muestrear164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__Timer1Int204
  L__Timer1Int205
  L__Timer1Int206
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init208
  L__ADXL355_init209
  L__ADXL355_init210
  L__ADXL355_init211
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data215
  L__ADXL355_read_data216
  L__ADXL355_read_data217
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha229
  L__IncrementarFecha230
  L__IncrementarFecha231
  L__IncrementarFecha232
  L__IncrementarFecha233
  L__IncrementarFecha234
  L__IncrementarFecha235
  L__IncrementarFecha236
  L__IncrementarFecha237
  L__IncrementarFecha238
  L__IncrementarFecha239
  L__IncrementarFecha240
  L__IncrementarFecha241
  L__IncrementarFecha242
  L__IncrementarFecha243
  L__IncrementarFecha244
  L__IncrementarFecha245
  L__IncrementarFecha246
  L__IncrementarFecha247
  L__IncrementarFecha248
  L__IncrementarFecha249
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_CambiarEstadoBandera
  _CambiarEstadoBandera
  L__CambiarEstadoBandera258
  L__CambiarEstadoBandera259
  L__CambiarEstadoBandera260
  L__CambiarEstadoBandera261
  L__CambiarEstadoBandera262
  L__CambiarEstadoBandera263
  L__CambiarEstadoBandera264
  L__CambiarEstadoBandera265
  L__CambiarEstadoBandera266
  L__CambiarEstadoBandera267
  L__CambiarEstadoBandera268
  L_end_Muestrear
  _Muestrear
  L__Muestrear270
  L__Muestrear271
  L__Muestrear272
  L__Muestrear273
  L__Muestrear274
  L__Muestrear275
  L__Muestrear276
  L__Muestrear277
  L_end_spi_1
  _spi_1
  L__spi_1279
  L__spi_1280
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L__spi_1286
  L__spi_1287
  L__spi_1288
  L__spi_1289
  L__spi_1290
  L__spi_1291
  L__spi_1292
  L__spi_1293
  L__spi_1294
  L__spi_1295
  L__spi_1296
  L__spi_1297
  L__spi_1298
  L__spi_1299
  L__spi_1300
  L__spi_1301
  L__spi_1302
  L__spi_1303
  L__spi_1304
  L__spi_1305
  L_end_int_1
  _int_1
  L__int_1307
  L__int_1308
  L__int_1309
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int311
  L__Timer1Int312
  L__Timer1Int313
  L__Timer1Int314
  L__Timer1Int315
  L__Timer1Int316
