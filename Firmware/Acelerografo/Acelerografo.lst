;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 14/9/2023 10:52:54
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x000000041130  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000F76  	3958
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x000000  	0
0x0022	0x000F04  	3844
0x0024	0x001098  	4248
0x0026	0x000000  	0
0x0028	0x001284  	4740
0x002A	0x0015C8  	5576
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x001230  	4656
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x0010F8  	4344
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
0x0100	0x000000  	0
0x0102	0x000000  	0
0x0104	0x000000  	0
0x0106	0x000000  	0
0x0108	0x000000  	0
0x010A	0x000000  	0
0x010C	0x000000  	0
0x010E	0x000000  	0
0x0110	0x000000  	0
0x0112	0x000000  	0
0x0114	0x000000  	0
0x0116	0x000000  	0
0x0118	0x000000  	0
0x011A	0x000000  	0
0x011C	0x000000  	0
0x011E	0x000000  	0
0x0120	0x000000  	0
0x0122	0x000000  	0
0x0124	0x000000  	0
0x0126	0x000000  	0
0x0128	0x000000  	0
0x012A	0x000000  	0
0x012C	0x000000  	0
0x012E	0x000000  	0
0x0130	0x000000  	0
0x0132	0x000000  	0
0x0134	0x000000  	0
0x0136	0x000000  	0
0x0138	0x000000  	0
0x013A	0x000000  	0
0x013C	0x000000  	0
0x013E	0x000000  	0
0x0140	0x000000  	0
0x0142	0x000000  	0
0x0144	0x000000  	0
0x0146	0x000000  	0
0x0148	0x000000  	0
0x014A	0x000000  	0
0x014C	0x000000  	0
0x014E	0x000000  	0
0x0150	0x000000  	0
0x0152	0x000000  	0
0x0154	0x000000  	0
0x0156	0x000000  	0
0x0158	0x000000  	0
0x015A	0x000000  	0
0x015C	0x000000  	0
0x015E	0x000000  	0
0x0160	0x000000  	0
0x0162	0x000000  	0
0x0164	0x000000  	0
0x0166	0x000000  	0
0x0168	0x000000  	0
0x016A	0x000000  	0
0x016C	0x000000  	0
0x016E	0x000000  	0
0x0170	0x000000  	0
0x0172	0x000000  	0
0x0174	0x000000  	0
0x0176	0x000000  	0
0x0178	0x000000  	0
0x017A	0x000000  	0
0x017C	0x000000  	0
0x017E	0x000000  	0
0x0180	0x000000  	0
0x0182	0x000000  	0
0x0184	0x000000  	0
0x0186	0x000000  	0
0x0188	0x000000  	0
0x018A	0x000000  	0
0x018C	0x000000  	0
0x018E	0x000000  	0
0x0190	0x000000  	0
0x0192	0x000000  	0
0x0194	0x000000  	0
0x0196	0x000000  	0
0x0198	0x000000  	0
0x019A	0x000000  	0
0x019C	0x000000  	0
0x019E	0x000000  	0
0x01A0	0x000000  	0
0x01A2	0x000000  	0
0x01A4	0x000000  	0
0x01A6	0x000000  	0
0x01A8	0x000000  	0
0x01AA	0x000000  	0
0x01AC	0x000000  	0
0x01AE	0x000000  	0
0x01B0	0x000000  	0
0x01B2	0x000000  	0
0x01B4	0x000000  	0
0x01B6	0x000000  	0
0x01B8	0x000000  	0
0x01BA	0x000000  	0
0x01BC	0x000000  	0
0x01BE	0x000000  	0
0x01C0	0x000000  	0
0x01C2	0x000000  	0
0x01C4	0x000000  	0
0x01C6	0x000000  	0
0x01C8	0x000000  	0
0x01CA	0x000000  	0
0x01CC	0x000000  	0
0x01CE	0x000000  	0
0x01D0	0x000000  	0
0x01D2	0x000000  	0
0x01D4	0x000000  	0
0x01D6	0x000000  	0
0x01D8	0x000000  	0
0x01DA	0x000000  	0
0x01DC	0x000000  	0
0x01DE	0x000000  	0
0x01E0	0x000000  	0
0x01E2	0x000000  	0
0x01E4	0x000000  	0
0x01E6	0x000000  	0
0x01E8	0x000000  	0
0x01EA	0x000000  	0
0x01EC	0x000000  	0
0x01EE	0x000000  	0
0x01F0	0x000000  	0
0x01F2	0x000000  	0
0x01F4	0x000000  	0
0x01F6	0x000000  	0
0x01F8	0x000000  	0
0x01FA	0x000000  	0
0x01FC	0x000000  	0
0x01FE	0x000000  	0
_main:
0x1130	0x21BE6F  	MOV	#7142, W15
0x1132	0x27FFF0  	MOV	#32767, W0
0x1134	0xB7A020  	MOV	WREG, SPLIM
0x1136	0x202010  	MOV	#513, W0
0x1138	0xB7A032  	MOV	WREG, DSRPAG
0x113A	0x200040  	MOV	#4, W0
0x113C	0xB72044  	IOR	CORCON
0x113E	0x0000000217DE  	CALL	6110
;Acelerografo.c,73 :: 		void main()
;Acelerografo.c,76 :: 		tasaMuestreo = 1; // 1=250Hz, 2=125Hz, 4=62.5Hz, 8=31.25Hz
0x1142	0x21BDE1  	MOV	#lo_addr(_tasaMuestreo), W1
0x1144	0xB3C010  	MOV.B	#1, W0
0x1146	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,77 :: 		numTMR1 = (tasaMuestreo * 10) - 1; // Calcula el numero de veces que tienen que desbordarse el TMR1 para cada tasa de muestreo
0x1148	0x21BE31  	MOV	#lo_addr(_numTMR1), W1
0x114A	0xB3C090  	MOV.B	#9, W0
0x114C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,79 :: 		banOperacion = 0;
0x114E	0x21BE51  	MOV	#lo_addr(_banOperacion), W1
0x1150	0xEF2000  	CLR	W0
0x1152	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,80 :: 		tipoOperacion = 0;
0x1154	0x21BE41  	MOV	#lo_addr(_tipoOperacion), W1
0x1156	0xEF2000  	CLR	W0
0x1158	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,82 :: 		banTI = 0;
0x115A	0x21BE01  	MOV	#lo_addr(_banTI), W1
0x115C	0xEF2000  	CLR	W0
0x115E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,83 :: 		banLec = 0;
0x1160	0x21BDF1  	MOV	#lo_addr(_banLec), W1
0x1162	0xEF2000  	CLR	W0
0x1164	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,84 :: 		banEsc = 0;
0x1166	0x21BE21  	MOV	#lo_addr(_banEsc), W1
0x1168	0xEF2000  	CLR	W0
0x116A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,85 :: 		banCiclo = 0;
0x116C	0x21BE11  	MOV	#lo_addr(_banCiclo), W1
0x116E	0xEF2000  	CLR	W0
0x1170	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,86 :: 		banSetReloj = 0;
0x1172	0x21B871  	MOV	#lo_addr(_banSetReloj), W1
0x1174	0xEF2000  	CLR	W0
0x1176	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,88 :: 		banSetGPS = 0;
0x1178	0x21A661  	MOV	#lo_addr(_banSetGPS), W1
0x117A	0xEF2000  	CLR	W0
0x117C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,89 :: 		banGPSI = 0;
0x117E	0x21A651  	MOV	#lo_addr(_banGPSI), W1
0x1180	0xEF2000  	CLR	W0
0x1182	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,90 :: 		banTFGPS = 0;
0x1184	0x21A681  	MOV	#lo_addr(_banTFGPS), W1
0x1186	0xEF2000  	CLR	W0
0x1188	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,91 :: 		banGPSC = 0;
0x118A	0x21A671  	MOV	#lo_addr(_banGPSC), W1
0x118C	0xEF2000  	CLR	W0
0x118E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,92 :: 		stsGPS = 0;
0x1190	0x21A621  	MOV	#lo_addr(_stsGPS), W1
0x1192	0xEF2000  	CLR	W0
0x1194	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,93 :: 		fuenteReloj = 0;
0x1196	0x21A611  	MOV	#lo_addr(_fuenteReloj), W1
0x1198	0xEF2000  	CLR	W0
0x119A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,94 :: 		banSyncReloj = 0;
0x119C	0x21A641  	MOV	#lo_addr(_banSyncReloj), W1
0x119E	0xEF2000  	CLR	W0
0x11A0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,96 :: 		banMuestrear = 0; // Inicia el programa con esta bandera en bajo para permitir que la RPi envie la peticion de inicio de muestreo
0x11A2	0x21A631  	MOV	#lo_addr(_banMuestrear), W1
0x11A4	0xEF2000  	CLR	W0
0x11A6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,97 :: 		banInicio = 0;    // Bandera de inicio de muestreo
0x11A8	0x21A741  	MOV	#lo_addr(_banInicio), W1
0x11AA	0xEF2000  	CLR	W0
0x11AC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,98 :: 		banLeer = 0;
0x11AE	0x21A691  	MOV	#lo_addr(_banLeer), W1
0x11B0	0xEF2000  	CLR	W0
0x11B2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,99 :: 		banConf = 0;
0x11B4	0x21A751  	MOV	#lo_addr(_banConf), W1
0x11B6	0xEF2000  	CLR	W0
0x11B8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,101 :: 		i = 0;
0x11BA	0xEF2000  	CLR	W0
0x11BC	0x88D3B0  	MOV	W0, _i
;Acelerografo.c,102 :: 		x = 0;
0x11BE	0xEF2000  	CLR	W0
0x11C0	0x88D360  	MOV	W0, _x
;Acelerografo.c,103 :: 		y = 0;
0x11C2	0xEF2000  	CLR	W0
0x11C4	0x88D350  	MOV	W0, _y
;Acelerografo.c,104 :: 		i_gps = 0;
0x11C6	0xEF2000  	CLR	W0
0x11C8	0x88D390  	MOV	W0, _i_gps
;Acelerografo.c,105 :: 		horaSistema = 0;
0x11CA	0xEF2000  	CLR	W0
0x11CC	0xEF2002  	CLR	W1
0x11CE	0x88D370  	MOV	W0, _horaSistema
0x11D0	0x88D381  	MOV	W1, _horaSistema+2
;Acelerografo.c,106 :: 		referenciaTiempo = 0;
0x11D2	0x21A601  	MOV	#lo_addr(_referenciaTiempo), W1
0x11D4	0xEF2000  	CLR	W0
0x11D6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,107 :: 		contTimeout1 = 0;
0x11D8	0x21A591  	MOV	#lo_addr(_contTimeout1), W1
0x11DA	0xEF2000  	CLR	W0
0x11DC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,109 :: 		contMuestras = 0;
0x11DE	0x21A581  	MOV	#lo_addr(_contMuestras), W1
0x11E0	0xEF2000  	CLR	W0
0x11E2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,110 :: 		contCiclos = 0;
0x11E4	0x21A5C1  	MOV	#lo_addr(_contCiclos), W1
0x11E6	0xEF2000  	CLR	W0
0x11E8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,111 :: 		contFIFO = 0;
0x11EA	0xEF2000  	CLR	W0
0x11EC	0x88D2D0  	MOV	W0, _contFIFO
;Acelerografo.c,112 :: 		numFIFO = 0;
0x11EE	0x21A551  	MOV	#lo_addr(_numFIFO), W1
0x11F0	0xEF2000  	CLR	W0
0x11F2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,113 :: 		numSetsFIFO = 0;
0x11F4	0x21A541  	MOV	#lo_addr(_numSetsFIFO), W1
0x11F6	0xEF2000  	CLR	W0
0x11F8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,114 :: 		contTimer1 = 0;
0x11FA	0x21A571  	MOV	#lo_addr(_contTimer1), W1
0x11FC	0xEF2000  	CLR	W0
0x11FE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,115 :: 		contTimer3 = 0;
0x1200	0x21A561  	MOV	#lo_addr(_contTimer3), W1
0x1202	0xEF2000  	CLR	W0
0x1204	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,117 :: 		byteGPS = 0;
0x1206	0x21A5E1  	MOV	#lo_addr(_byteGPS), W1
0x1208	0xEF2000  	CLR	W0
0x120A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,118 :: 		banInitGPS = 0;
0x120C	0x21A5D1  	MOV	#lo_addr(_banInitGPS), W1
0x120E	0xEF2000  	CLR	W0
0x1210	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,121 :: 		banInicializar = 0;
0x1212	0x21A5F1  	MOV	#lo_addr(_banInicializar), W1
0x1214	0xEF2000  	CLR	W0
0x1216	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,123 :: 		RP1 = 0;
0x1218	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,124 :: 		RP2 = 0;
0x121A	0xA98E14  	BCLR	LATB4_bit, BitPos(LATB4_bit+0)
;Acelerografo.c,125 :: 		LedTest = 0;
0x121C	0xA98E15  	BCLR	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,127 :: 		SPI1BUF = 0x00;
0x121E	0xEF2248  	CLR	SPI1BUF
;Acelerografo.c,129 :: 		ConfiguracionPrincipal();
0x1220	0x07FC3F  	RCALL	_ConfiguracionPrincipal
;Acelerografo.c,131 :: 		while (1)
L_main0:
;Acelerografo.c,133 :: 		Delay_ms(1);
0x1222	0x21F407  	MOV	#8000, W7
L_main2:
0x1224	0xED200E  	DEC	W7
0x1226	0x3AFFFE  	BRA NZ	L_main2
0x1228	0x000000  	NOP
0x122A	0x000000  	NOP
;Acelerografo.c,134 :: 		}
0x122C	0x37FFFA  	BRA	L_main0
;Acelerografo.c,136 :: 		}
L_end_main:
L__main_end_loop:
0x122E	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_ConfiguracionPrincipal:
;Acelerografo.c,143 :: 		void ConfiguracionPrincipal()
;Acelerografo.c,147 :: 		CLKDIVbits.FRCDIV = 0;   // FIN=FRC/1
0x0AA0	0x781F8A  	PUSH	W10
0x0AA2	0x781F8B  	PUSH	W11
0x0AA4	0x781F8C  	PUSH	W12
0x0AA6	0x781F8D  	PUSH	W13
0x0AA8	0x803A21  	MOV	CLKDIVbits, W1
0x0AAA	0x2F8FF0  	MOV	#63743, W0
0x0AAC	0x608000  	AND	W1, W0, W0
0x0AAE	0xB7A744  	MOV	WREG, CLKDIVbits
;Acelerografo.c,148 :: 		CLKDIVbits.PLLPOST = 0;  // N2=2
0x0AB0	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0AB2	0x784090  	MOV.B	[W0], W1
0x0AB4	0xB3C3F0  	MOV.B	#63, W0
0x0AB6	0x60C080  	AND.B	W1, W0, W1
0x0AB8	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0ABA	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,149 :: 		CLKDIVbits.PLLPRE = 5;   // N1=7
0x0ABC	0xB3C050  	MOV.B	#5, W0
0x0ABE	0x784080  	MOV.B	W0, W1
0x0AC0	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0AC2	0x68C090  	XOR.B	W1, [W0], W1
0x0AC4	0x60C0FF  	AND.B	W1, #31, W1
0x0AC6	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0AC8	0x68C090  	XOR.B	W1, [W0], W1
0x0ACA	0x207440  	MOV	#lo_addr(CLKDIVbits), W0
0x0ACC	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,150 :: 		PLLFBDbits.PLLDIV = 150; // M=152
0x0ACE	0x200960  	MOV	#150, W0
0x0AD0	0x780080  	MOV	W0, W1
0x0AD2	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x0AD4	0x688090  	XOR	W1, [W0], W1
0x0AD6	0x201FF0  	MOV	#511, W0
0x0AD8	0x608080  	AND	W1, W0, W1
0x0ADA	0x207460  	MOV	#lo_addr(PLLFBDbits), W0
0x0ADC	0x688090  	XOR	W1, [W0], W1
0x0ADE	0x883A31  	MOV	W1, PLLFBDbits
;Acelerografo.c,153 :: 		ANSELA = 0;      // Configura PORTA como digital     *
0x0AE0	0xEF2E0E  	CLR	ANSELA
;Acelerografo.c,154 :: 		ANSELB = 0;      // Configura PORTB como digital     *
0x0AE2	0xEF2E1E  	CLR	ANSELB
;Acelerografo.c,155 :: 		TRISA2_bit = 0;  // Configura el pin A2 como salida  *
0x0AE4	0xA94E00  	BCLR	TRISA2_bit, BitPos(TRISA2_bit+0)
;Acelerografo.c,156 :: 		TRISA3_bit = 0;  // Configura el pin A3 como salida  *
0x0AE6	0xA96E00  	BCLR	TRISA3_bit, BitPos(TRISA3_bit+0)
;Acelerografo.c,157 :: 		TRISA4_bit = 0;  // Configura el pin A4 como salida  *
0x0AE8	0xA98E00  	BCLR	TRISA4_bit, BitPos(TRISA4_bit+0)
;Acelerografo.c,158 :: 		TRISB4_bit = 0;  // Configura el pin B4 como salida  *
0x0AEA	0xA98E10  	BCLR	TRISB4_bit, BitPos(TRISB4_bit+0)
;Acelerografo.c,159 :: 		TRISB12_bit = 0; // Configura el pin B12 como salida *
0x0AEC	0xA98E11  	BCLR	TRISB12_bit, BitPos(TRISB12_bit+0)
;Acelerografo.c,161 :: 		TRISB10_bit = 1; // Configura el pin B10 como entrada *
0x0AEE	0xA84E11  	BSET	TRISB10_bit, BitPos(TRISB10_bit+0)
;Acelerografo.c,162 :: 		TRISB11_bit = 1; // Configura el pin B11 como entrada *
0x0AF0	0xA86E11  	BSET	TRISB11_bit, BitPos(TRISB11_bit+0)
;Acelerografo.c,163 :: 		TRISB13_bit = 1; // Configura el pin B13 como entrada *
0x0AF2	0xA8AE11  	BSET	TRISB13_bit, BitPos(TRISB13_bit+0)
;Acelerografo.c,164 :: 		TRISB14_bit = 1;
0x0AF4	0xA8CE11  	BSET	TRISB14_bit, BitPos(TRISB14_bit+0)
;Acelerografo.c,165 :: 		TRISB15_bit = 1; // Configura el pin B15 como entrada *
0x0AF6	0xA8EE11  	BSET	TRISB15_bit, BitPos(TRISB15_bit+0)
;Acelerografo.c,167 :: 		INTCON2.GIE = 1; // Habilita las interrupciones globales *
0x0AF8	0xA8E8C3  	BSET	INTCON2, #15
;Acelerografo.c,170 :: 		SPI1STAT.SPIEN = 1;                                                                                                                                                 // Habilita el SPI1 *
0x0AFA	0xA8E241  	BSET	SPI1STAT, #15
;Acelerografo.c,171 :: 		SPI1_Init_Advanced(_SPI_SLAVE, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_1, _SPI_SS_ENABLE, _SPI_DATA_SAMPLE_END, _SPI_CLK_IDLE_HIGH, _SPI_ACTIVE_2_IDLE); //*
0x0AFC	0x20003D  	MOV	#3, W13
0x0AFE	0x2001CC  	MOV	#28, W12
0x0B00	0xEF2016  	CLR	W11
0x0B02	0xEF2014  	CLR	W10
0x0B04	0xEF2000  	CLR	W0
0x0B06	0x781F80  	PUSH	W0
0x0B08	0x200400  	MOV	#64, W0
0x0B0A	0x781F80  	PUSH	W0
0x0B0C	0x202000  	MOV	#512, W0
0x0B0E	0x781F80  	PUSH	W0
0x0B10	0x200800  	MOV	#128, W0
0x0B12	0x781F80  	PUSH	W0
0x0B14	0x07FBC7  	RCALL	_SPI1_Init_Advanced
0x0B16	0xB1008F  	SUB	#8, W15
;Acelerografo.c,172 :: 		SPI1IE_bit = 1;                                                                                                                                                     // Habilita la interrupcion por SPI1  *
0x0B18	0xA84821  	BSET	SPI1IE_bit, BitPos(SPI1IE_bit+0)
;Acelerografo.c,173 :: 		SPI1IF_bit = 0;                                                                                                                                                     // Limpia la bandera de interrupcion por SPI *
0x0B1A	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Acelerografo.c,174 :: 		IPC2bits.SPI1IP = 0x03;                                                                                                                                             // Prioridad de la interrupcion SPI1
0x0B1C	0x203000  	MOV	#768, W0
0x0B1E	0x780080  	MOV	W0, W1
0x0B20	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0B22	0x688090  	XOR	W1, [W0], W1
0x0B24	0x207000  	MOV	#1792, W0
0x0B26	0x608080  	AND	W1, W0, W1
0x0B28	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0B2A	0x688090  	XOR	W1, [W0], W1
0x0B2C	0x884221  	MOV	W1, IPC2bits
;Acelerografo.c,177 :: 		RPINR22bits.SDI2R = 0x21; // Configura el pin RB1/RPI33 como SDI2 *
0x0B2E	0xB3C210  	MOV.B	#33, W0
0x0B30	0x784080  	MOV.B	W0, W1
0x0B32	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0B34	0x68C090  	XOR.B	W1, [W0], W1
0x0B36	0xB3C7F0  	MOV.B	#127, W0
0x0B38	0x60C080  	AND.B	W1, W0, W1
0x0B3A	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0B3C	0x68C090  	XOR.B	W1, [W0], W1
0x0B3E	0x206CC0  	MOV	#lo_addr(RPINR22bits), W0
0x0B40	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,178 :: 		RPOR2bits.RP38R = 0x08;   // Configura el SDO2 en el pin RB6/RP38 *
0x0B42	0xB3C080  	MOV.B	#8, W0
0x0B44	0x784080  	MOV.B	W0, W1
0x0B46	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x0B48	0x68C090  	XOR.B	W1, [W0], W1
0x0B4A	0xB3C3F0  	MOV.B	#63, W0
0x0B4C	0x60C080  	AND.B	W1, W0, W1
0x0B4E	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x0B50	0x68C090  	XOR.B	W1, [W0], W1
0x0B52	0x206840  	MOV	#lo_addr(RPOR2bits), W0
0x0B54	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,179 :: 		RPOR1bits.RP37R = 0x09;   // Configura el SCK2 en el pin RB5/RP37 *
0x0B56	0x209000  	MOV	#2304, W0
0x0B58	0x780080  	MOV	W0, W1
0x0B5A	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x0B5C	0x688090  	XOR	W1, [W0], W1
0x0B5E	0x23F000  	MOV	#16128, W0
0x0B60	0x608080  	AND	W1, W0, W1
0x0B62	0x206820  	MOV	#lo_addr(RPOR1bits), W0
0x0B64	0x688090  	XOR	W1, [W0], W1
0x0B66	0x883411  	MOV	W1, RPOR1bits
;Acelerografo.c,180 :: 		SPI2STATbits.SPIROV = 0;  // No Receive Overflow has occurred
0x0B68	0xA9C260  	BCLR	SPI2STATbits, #6
;Acelerografo.c,181 :: 		SPI2STAT.SPIEN = 1;       // Habilita el SPI2 *
0x0B6A	0xA8E261  	BSET	SPI2STAT, #15
;Acelerografo.c,182 :: 		SPI2_Init();              // Inicializa el modulo SPI2
0x0B6C	0x07FC4E  	RCALL	_SPI2_Init
;Acelerografo.c,183 :: 		CS_DS3234 = 1;            // Pone en alto el CS del RTC
0x0B6E	0xA84E04  	BSET	LATA2_bit, BitPos(LATA2_bit+0)
;Acelerografo.c,184 :: 		CS_ADXL355 = 1;           // Pone en alto el CS del acelerometro
0x0B70	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;Acelerografo.c,187 :: 		RPINR18bits.U1RXR = 0x22; // Configura el pin RB2/RPI34 como Rx1 *
0x0B72	0xB3C220  	MOV.B	#34, W0
0x0B74	0x784080  	MOV.B	W0, W1
0x0B76	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x0B78	0x68C090  	XOR.B	W1, [W0], W1
0x0B7A	0xB3C7F0  	MOV.B	#127, W0
0x0B7C	0x60C080  	AND.B	W1, W0, W1
0x0B7E	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x0B80	0x68C090  	XOR.B	W1, [W0], W1
0x0B82	0x206C40  	MOV	#lo_addr(RPINR18bits), W0
0x0B84	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,188 :: 		RPOR0bits.RP35R = 0x01;   // Configura el Tx1 en el pin RB3/RP35 *
0x0B86	0x201000  	MOV	#256, W0
0x0B88	0x780080  	MOV	W0, W1
0x0B8A	0x206800  	MOV	#lo_addr(RPOR0bits), W0
0x0B8C	0x688090  	XOR	W1, [W0], W1
0x0B8E	0x23F000  	MOV	#16128, W0
0x0B90	0x608080  	AND	W1, W0, W1
0x0B92	0x206800  	MOV	#lo_addr(RPOR0bits), W0
0x0B94	0x688090  	XOR	W1, [W0], W1
0x0B96	0x883401  	MOV	W1, RPOR0bits
;Acelerografo.c,189 :: 		U1RXIE_bit = 1;           // Habilita la interrupcion por UART1 RX *
0x0B98	0xA86821  	BSET	U1RXIE_bit, BitPos(U1RXIE_bit+0)
;Acelerografo.c,190 :: 		U1RXIF_bit = 0;           // Limpia la bandera de interrupcion por UART1 RX *
0x0B9A	0xA96801  	BCLR	U1RXIF_bit, BitPos(U1RXIF_bit+0)
;Acelerografo.c,191 :: 		IPC2bits.U1RXIP = 0x04;   // Prioridad de la interrupcion UART1 RX
0x0B9C	0x240000  	MOV	#16384, W0
0x0B9E	0x780080  	MOV	W0, W1
0x0BA0	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0BA2	0x688090  	XOR	W1, [W0], W1
0x0BA4	0x270000  	MOV	#28672, W0
0x0BA6	0x608080  	AND	W1, W0, W1
0x0BA8	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0BAA	0x688090  	XOR	W1, [W0], W1
0x0BAC	0x884221  	MOV	W1, IPC2bits
;Acelerografo.c,192 :: 		U1STAbits.URXISEL = 0x00;
0x0BAE	0x202220  	MOV	#lo_addr(U1STAbits), W0
0x0BB0	0x784090  	MOV.B	[W0], W1
0x0BB2	0xB3C3F0  	MOV.B	#63, W0
0x0BB4	0x60C080  	AND.B	W1, W0, W1
0x0BB6	0x202220  	MOV	#lo_addr(U1STAbits), W0
0x0BB8	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,193 :: 		UART1_Init(9600); // Inicializa el UART1 con una velocidad de 9600 baudios
0x0BBA	0x22580A  	MOV	#9600, W10
0x0BBC	0x20000B  	MOV	#0, W11
0x0BBE	0x07FC39  	RCALL	_UART1_Init
;Acelerografo.c,196 :: 		RPINR0 = 0x2F00;        // Asigna INT1 al RB15/RPI47 (SQW)
0x0BC0	0x22F000  	MOV	#12032, W0
0x0BC2	0xB7A6A0  	MOV	WREG, RPINR0
;Acelerografo.c,197 :: 		INT1IE_bit = 1;         // Habilita la interrupcion externa INT1
0x0BC4	0xA88822  	BSET	INT1IE_bit, BitPos(INT1IE_bit+0)
;Acelerografo.c,198 :: 		INT1IF_bit = 0;         // Limpia la bandera de interrupcion externa INT1
0x0BC6	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Acelerografo.c,199 :: 		IPC5bits.INT1IP = 0x02; // Prioridad en la interrupocion externa INT1
0x0BC8	0xB3C020  	MOV.B	#2, W0
0x0BCA	0x784080  	MOV.B	W0, W1
0x0BCC	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x0BCE	0x68C090  	XOR.B	W1, [W0], W1
0x0BD0	0x60C0E7  	AND.B	W1, #7, W1
0x0BD2	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x0BD4	0x68C090  	XOR.B	W1, [W0], W1
0x0BD6	0x2084A0  	MOV	#lo_addr(IPC5bits), W0
0x0BD8	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,202 :: 		RPINR1 = 0x002E;        // Asigna INT2 al RB14/RPI46 (PPS)
0x0BDA	0x2002E0  	MOV	#46, W0
0x0BDC	0xB7A6A2  	MOV	WREG, RPINR1
;Acelerografo.c,203 :: 		INT2IE_bit = 1;         // Habilita la interrupcion externa INT1
0x0BDE	0xA8A823  	BSET	INT2IE_bit, BitPos(INT2IE_bit+0)
;Acelerografo.c,204 :: 		INT2IF_bit = 0;         // Limpia la bandera de interrupcion externa INT1
0x0BE0	0xA9A803  	BCLR	INT2IF_bit, BitPos(INT2IF_bit+0)
;Acelerografo.c,205 :: 		IPC7bits.INT2IP = 0x01; // Prioridad en la interrupocion externa INT2
0x0BE2	0xB3C100  	MOV.B	#16, W0
0x0BE4	0x784080  	MOV.B	W0, W1
0x0BE6	0x2084E0  	MOV	#lo_addr(IPC7bits), W0
0x0BE8	0x68C090  	XOR.B	W1, [W0], W1
0x0BEA	0xB3C700  	MOV.B	#112, W0
0x0BEC	0x60C080  	AND.B	W1, W0, W1
0x0BEE	0x2084E0  	MOV	#lo_addr(IPC7bits), W0
0x0BF0	0x68C090  	XOR.B	W1, [W0], W1
0x0BF2	0x2084E0  	MOV	#lo_addr(IPC7bits), W0
0x0BF4	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,208 :: 		T1CON = 0x0020;
0x0BF6	0x200200  	MOV	#32, W0
0x0BF8	0xB7A104  	MOV	WREG, T1CON
;Acelerografo.c,209 :: 		T1CON.TON = 0;        // Apaga el TMR1
0x0BFA	0xA9E105  	BCLR	T1CON, #15
;Acelerografo.c,210 :: 		T1IE_bit = 1;         // Habilita la interrupcion de desbordamiento TMR1
0x0BFC	0xA86820  	BSET	T1IE_bit, BitPos(T1IE_bit+0)
;Acelerografo.c,211 :: 		T1IF_bit = 0;         // Limpia la bandera de interrupcion del TMR1
0x0BFE	0xA96800  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;Acelerografo.c,212 :: 		PR1 = 62500;          // Car ga el preload para un tiempo de 100ms
0x0C00	0x2F4240  	MOV	#62500, W0
0x0C02	0xB7A102  	MOV	WREG, PR1
;Acelerografo.c,213 :: 		IPC0bits.T1IP = 0x02; // Prioridad de la interrupcion por desbordamiento del TMR1
0x0C04	0x220000  	MOV	#8192, W0
0x0C06	0x780080  	MOV	W0, W1
0x0C08	0x208400  	MOV	#lo_addr(IPC0bits), W0
0x0C0A	0x688090  	XOR	W1, [W0], W1
0x0C0C	0x270000  	MOV	#28672, W0
0x0C0E	0x608080  	AND	W1, W0, W1
0x0C10	0x208400  	MOV	#lo_addr(IPC0bits), W0
0x0C12	0x688090  	XOR	W1, [W0], W1
0x0C14	0x884201  	MOV	W1, IPC0bits
;Acelerografo.c,216 :: 		T2CON = 0x30;         // Prescalador
0x0C16	0x200300  	MOV	#48, W0
0x0C18	0xB7A110  	MOV	WREG, T2CON
;Acelerografo.c,217 :: 		T2CON.TON = 0;        // Apaga el TMR2
0x0C1A	0xA9E111  	BCLR	T2CON, #15
;Acelerografo.c,218 :: 		T2IE_bit = 1;         // Habilita la interrupcion de desbordamiento TMR2
0x0C1C	0xA8E820  	BSET	T2IE_bit, BitPos(T2IE_bit+0)
;Acelerografo.c,219 :: 		T2IF_bit = 0;         // Limpia la bandera de interrupcion del TMR2
0x0C1E	0xA9E800  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;Acelerografo.c,220 :: 		PR2 = 46875;          // Carga el preload para un tiempo de 300ms
0x0C20	0x2B71B0  	MOV	#46875, W0
0x0C22	0xB7A10C  	MOV	WREG, PR2
;Acelerografo.c,221 :: 		IPC1bits.T2IP = 0x02; // Prioridad de la interrupcion por desbordamiento del TMR2
0x0C24	0x220000  	MOV	#8192, W0
0x0C26	0x780080  	MOV	W0, W1
0x0C28	0x208420  	MOV	#lo_addr(IPC1bits), W0
0x0C2A	0x688090  	XOR	W1, [W0], W1
0x0C2C	0x270000  	MOV	#28672, W0
0x0C2E	0x608080  	AND	W1, W0, W1
0x0C30	0x208420  	MOV	#lo_addr(IPC1bits), W0
0x0C32	0x688090  	XOR	W1, [W0], W1
0x0C34	0x884211  	MOV	W1, IPC1bits
;Acelerografo.c,224 :: 		T3CON = 0x20;         // Prescalador
0x0C36	0x200200  	MOV	#32, W0
0x0C38	0xB7A112  	MOV	WREG, T3CON
;Acelerografo.c,225 :: 		T3CON.TON = 0;        // Apaga el TMR3
0x0C3A	0xA9E113  	BCLR	T3CON, #15
;Acelerografo.c,226 :: 		T3IE_bit = 1;         // Habilita la interrupcion de desbordamiento TMR3
0x0C3C	0xA80821  	BSET	T3IE_bit, BitPos(T3IE_bit+0)
;Acelerografo.c,227 :: 		T3IF_bit = 0;         // Limpia la bandera de interrupcion del TMR3
0x0C3E	0xA90801  	BCLR	T3IF_bit, BitPos(T3IF_bit+0)
;Acelerografo.c,228 :: 		PR3 = 62500;          // Carga el preload para un tiempo de 500ms
0x0C40	0x2F4240  	MOV	#62500, W0
0x0C42	0xB7A10E  	MOV	WREG, PR3
;Acelerografo.c,229 :: 		IPC2bits.T3IP = 0x02; // Prioridad de la interrupcion por desbordamiento del TMR3
0x0C44	0xB3C020  	MOV.B	#2, W0
0x0C46	0x784080  	MOV.B	W0, W1
0x0C48	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0C4A	0x68C090  	XOR.B	W1, [W0], W1
0x0C4C	0x60C0E7  	AND.B	W1, #7, W1
0x0C4E	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0C50	0x68C090  	XOR.B	W1, [W0], W1
0x0C52	0x208440  	MOV	#lo_addr(IPC2bits), W0
0x0C54	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,231 :: 		Delay_ms(200); // Espera hasta que se estabilicen los cambios
0x0C56	0x200198  	MOV	#25, W8
0x0C58	0x26A0E7  	MOV	#27150, W7
L_ConfiguracionPrincipal4:
0x0C5A	0xED200E  	DEC	W7
0x0C5C	0x3AFFFE  	BRA NZ	L_ConfiguracionPrincipal4
0x0C5E	0xED2010  	DEC	W8
0x0C60	0x3AFFFC  	BRA NZ	L_ConfiguracionPrincipal4
0x0C62	0x000000  	NOP
;Acelerografo.c,234 :: 		DS3234_init();              // inicializa el RTC
0x0C64	0x07FCE9  	RCALL	_DS3234_init
;Acelerografo.c,236 :: 		Delay_ms(500);              // Espera hasta que se estabilicen los cambios del RTC
0x0C66	0x2003E8  	MOV	#62, W8
0x0C68	0x209247  	MOV	#2340, W7
L_ConfiguracionPrincipal6:
0x0C6A	0xED200E  	DEC	W7
0x0C6C	0x3AFFFE  	BRA NZ	L_ConfiguracionPrincipal6
0x0C6E	0xED2010  	DEC	W8
0x0C70	0x3AFFFC  	BRA NZ	L_ConfiguracionPrincipal6
0x0C72	0x000000  	NOP
0x0C74	0x000000  	NOP
;Acelerografo.c,239 :: 		ADXL355_init(tasaMuestreo); // Inicializa el modulo ADXL con la tasa de muestreo requerida
0x0C76	0x21BDE0  	MOV	#lo_addr(_tasaMuestreo), W0
0x0C78	0x784510  	MOV.B	[W0], W10
0x0C7A	0x07FB2B  	RCALL	_ADXL355_init
;Acelerografo.c,242 :: 		GPS_init();
0x0C7C	0x07FAFE  	RCALL	_GPS_init
;Acelerografo.c,243 :: 		U1MODE.UARTEN = 0;
0x0C7E	0xA9E221  	BCLR	U1MODE, #15
;Acelerografo.c,246 :: 		LedTest = ~LedTest;
0x0C80	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,247 :: 		Delay_ms(300);
0x0C82	0x200258  	MOV	#37, W8
0x0C84	0x29F157  	MOV	#40725, W7
L_ConfiguracionPrincipal8:
0x0C86	0xED200E  	DEC	W7
0x0C88	0x3AFFFE  	BRA NZ	L_ConfiguracionPrincipal8
0x0C8A	0xED2010  	DEC	W8
0x0C8C	0x3AFFFC  	BRA NZ	L_ConfiguracionPrincipal8
0x0C8E	0x000000  	NOP
0x0C90	0x000000  	NOP
;Acelerografo.c,248 :: 		LedTest = ~LedTest;
0x0C92	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,249 :: 		Delay_ms(300);
0x0C94	0x200258  	MOV	#37, W8
0x0C96	0x29F157  	MOV	#40725, W7
L_ConfiguracionPrincipal10:
0x0C98	0xED200E  	DEC	W7
0x0C9A	0x3AFFFE  	BRA NZ	L_ConfiguracionPrincipal10
0x0C9C	0xED2010  	DEC	W8
0x0C9E	0x3AFFFC  	BRA NZ	L_ConfiguracionPrincipal10
0x0CA0	0x000000  	NOP
0x0CA2	0x000000  	NOP
;Acelerografo.c,250 :: 		LedTest = ~LedTest;
0x0CA4	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,252 :: 		}
L_end_ConfiguracionPrincipal:
0x0CA6	0x7806CF  	POP	W13
0x0CA8	0x78064F  	POP	W12
0x0CAA	0x7805CF  	POP	W11
0x0CAC	0x78054F  	POP	W10
0x0CAE	0x060000  	RETURN
; end of _ConfiguracionPrincipal
_SPI1_Init_Advanced:
0x02A4	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,123 :: 		
; slave_select start address is: 2 (W1)
0x02A6	0x97B8CE  	MOV	[W14-8], W1
; data_sample start address is: 8 (W4)
0x02A8	0x97BA3E  	MOV	[W14-10], W4
; clock_idle start address is: 4 (W2)
0x02AA	0x97B92E  	MOV	[W14-12], W2
; edge start address is: 6 (W3)
0x02AC	0x97B99E  	MOV	[W14-14], W3
;__Lib_SPI_12.c,126 :: 		
0x02AE	0xEF2240  	CLR	SPI1STAT
;__Lib_SPI_12.c,127 :: 		
0x02B0	0xEF2242  	CLR	SPI1CON
;__Lib_SPI_12.c,129 :: 		
0x02B2	0x2FFFF0  	MOV	#lo_addr(_SPI1_Read), W0
0x02B4	0x88DEE0  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,130 :: 		
0x02B6	0x2FFFF0  	MOV	#lo_addr(_SPI1_Write), W0
0x02B8	0x88DED0  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,132 :: 		
0x02BA	0x75000B  	IOR	W10, W11, W0
0x02BC	0x70000C  	IOR	W0, W12, W0
0x02BE	0x70000D  	IOR	W0, W13, W0
0x02C0	0x700001  	IOR	W0, W1, W0
; slave_select end address is: 2 (W1)
0x02C2	0x700004  	IOR	W0, W4, W0
; data_sample end address is: 8 (W4)
;__Lib_SPI_12.c,133 :: 		
0x02C4	0x700082  	IOR	W0, W2, W1
; clock_idle end address is: 4 (W2)
0x02C6	0x202420  	MOV	#lo_addr(SPI1CON), W0
0x02C8	0x708803  	IOR	W1, W3, [W0]
; edge end address is: 6 (W3)
;__Lib_SPI_12.c,135 :: 		
0x02CA	0xA9C240  	BCLR	SPI1STAT, #6
;__Lib_SPI_12.c,136 :: 		
0x02CC	0xA8E241  	BSET	SPI1STAT, #15
;__Lib_SPI_12.c,138 :: 		
L_end_SPI1_Init_Advanced:
0x02CE	0xFA8000  	ULNK
0x02D0	0x060000  	RETURN
; end of _SPI1_Init_Advanced
_SPI2_Init:
0x040A	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,205 :: 		
;__Lib_SPI_12.c,207 :: 		
0x040C	0x202200  	MOV	#lo_addr(_SPI2_Read), W0
0x040E	0x88DEE0  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,208 :: 		
0x0410	0x206300  	MOV	#lo_addr(_SPI2_Write), W0
0x0412	0x88DED0  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,210 :: 		
0x0414	0xEF2260  	CLR	SPI2STAT
;__Lib_SPI_12.c,211 :: 		
0x0416	0xEF2262  	CLR	SPI2CON
;__Lib_SPI_12.c,213 :: 		
0x0418	0xA8A262  	BSET	SPI2CON, #5
;__Lib_SPI_12.c,214 :: 		
0x041A	0xA9C262  	BCLR	SPI2CON, #6
;__Lib_SPI_12.c,216 :: 		
0x041C	0x2001C1  	MOV	#28, W1
0x041E	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x0420	0x708810  	IOR	W1, [W0], [W0]
;__Lib_SPI_12.c,218 :: 		
0x0422	0x2FFFC1  	MOV	#65532, W1
0x0424	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x0426	0x608810  	AND	W1, [W0], [W0]
;__Lib_SPI_12.c,219 :: 		
0x0428	0xA80263  	BSET	SPI2CON, #8
;__Lib_SPI_12.c,221 :: 		
0x042A	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,222 :: 		
0x042C	0xA8E261  	BSET	SPI2STAT, #15
;__Lib_SPI_12.c,224 :: 		
L_end_SPI2_Init:
0x042E	0xFA8000  	ULNK
0x0430	0x060000  	RETURN
; end of _SPI2_Init
_UART1_Init:
0x0432	0xFA0008  	LNK	#8
;__Lib_UART_12_p24_p33.c,145 :: 		
;__Lib_UART_12_p24_p33.c,148 :: 		
0x0434	0x202000  	MOV	#lo_addr(_UART1_Write), W0
0x0436	0x88DEC0  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p24_p33.c,149 :: 		
0x0438	0x2FFFF0  	MOV	#lo_addr(_UART1_Read), W0
0x043A	0x88DEB0  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p24_p33.c,150 :: 		
0x043C	0x2FFFF0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x043E	0x88DB90  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p24_p33.c,151 :: 		
0x0440	0x2FFFF0  	MOV	#lo_addr(_UART1_Tx_Idle), W0
0x0442	0x88DB80  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p24_p33.c,156 :: 		
0x0444	0xEF2220  	CLR	U1MODE
;__Lib_UART_12_p24_p33.c,157 :: 		
0x0446	0x280000  	MOV	#32768, W0
0x0448	0xB7A222  	MOV	WREG, U1STA
;__Lib_UART_12_p24_p33.c,161 :: 		
0x044A	0xA96220  	BCLR	U1MODE, #3
;__Lib_UART_12_p24_p33.c,162 :: 		
0x044C	0x07FF13  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x044E	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,164 :: 		
0x0450	0x203E80  	MOV	#1000, W0
0x0452	0x200001  	MOV	#0, W1
0x0454	0x0700C4  	RCALL	__Multiply_32x32
0x0456	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,166 :: 		
0x0458	0x07FEE1  	RCALL	_Get_Fosc_Per_Cyc
0x045A	0xDE0041  	LSR	W0, #1, W0
0x045C	0x400064  	ADD	W0, #4, W0
0x045E	0x780080  	MOV	W0, W1
0x0460	0x470060  	ADD	W14, #0, W0
0x0462	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init83:
0x0464	0xE90081  	DEC	W1, W1
0x0466	0x350003  	BRA LT	L__UART1_Init84
0x0468	0xD01810  	SL	[W0], [W0++]
0x046A	0xD29010  	RLC	[W0], [W0--]
0x046C	0x37FFFB  	BRA	L__UART1_Init83
L__UART1_Init84:
;__Lib_UART_12_p24_p33.c,168 :: 		
0x046E	0xBE9F82  	PUSH.D	W2
0x0470	0xBE9F8A  	PUSH.D	W10
0x0472	0xBE0002  	MOV.D	W2, W0
0x0474	0x90010E  	MOV	[W14+0], W2
0x0476	0x90019E  	MOV	[W14+2], W3
0x0478	0xEB0200  	CLR	W4
0x047A	0x070085  	RCALL	__Modulus_32x32
0x047C	0xBE054F  	POP.D	W10
0x047E	0xBE014F  	POP.D	W2
0x0480	0x980720  	MOV	W0, [W14+4]
0x0482	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,169 :: 		
0x0484	0xBE9F8A  	PUSH.D	W10
; tmp end address is: 4 (W2)
0x0486	0xBE0002  	MOV.D	W2, W0
0x0488	0x90010E  	MOV	[W14+0], W2
0x048A	0x90019E  	MOV	[W14+2], W3
0x048C	0xEB0200  	CLR	W4
0x048E	0x070052  	RCALL	__Divide_32x32
0x0490	0xBE054F  	POP.D	W10
; tmp start address is: 6 (W3)
0x0492	0x780180  	MOV	W0, W3
0x0494	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,171 :: 		
0x0496	0x470060  	ADD	W14, #0, W0
0x0498	0xD10150  	LSR	[++W0], W2
0x049A	0xD380C0  	RRC	[--W0], W1
0x049C	0x470064  	ADD	W14, #4, W0
0x049E	0xE10830  	CP	W1, [W0++]
0x04A0	0xE19020  	CPB	W2, [W0--]
0x04A2	0x310007  	BRA GEU	L__UART1_Init62
L__UART1_Init85:
;__Lib_UART_12_p24_p33.c,172 :: 		
0x04A4	0x418061  	ADD	W3, #1, W0
0x04A6	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x04A8	0x780280  	MOV	W0, W5
0x04AA	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x04AC	0x780105  	MOV	W5, W2
0x04AE	0x780186  	MOV	W6, W3
0x04B0	0x370002  	BRA	L_UART1_Init13
L__UART1_Init62:
;__Lib_UART_12_p24_p33.c,171 :: 		
0x04B2	0x780103  	MOV	W3, W2
0x04B4	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,172 :: 		
L_UART1_Init13:
;__Lib_UART_12_p24_p33.c,175 :: 		
; tmp start address is: 4 (W2)
0x04B6	0x718002  	IOR	W3, W2, W0
0x04B8	0x3A0033  	BRA NZ	L__UART1_Init64
L__UART1_Init86:
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,177 :: 		
0x04BA	0x07FEDC  	RCALL	_Get_Fosc_kHz
; tmp start address is: 4 (W2)
0x04BC	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,179 :: 		
0x04BE	0x203E80  	MOV	#1000, W0
0x04C0	0x200001  	MOV	#0, W1
0x04C2	0x07008D  	RCALL	__Multiply_32x32
0x04C4	0xBE0100  	MOV.D	W0, W2
;__Lib_UART_12_p24_p33.c,181 :: 		
0x04C6	0x07FEAA  	RCALL	_Get_Fosc_Per_Cyc
0x04C8	0xDE0041  	LSR	W0, #1, W0
0x04CA	0xECA000  	INC2	W0
0x04CC	0x780080  	MOV	W0, W1
0x04CE	0x470060  	ADD	W14, #0, W0
0x04D0	0xBE880A  	MOV.D	W10, [W0]
L__UART1_Init87:
0x04D2	0xE90081  	DEC	W1, W1
0x04D4	0x350003  	BRA LT	L__UART1_Init88
0x04D6	0xD01810  	SL	[W0], [W0++]
0x04D8	0xD29010  	RLC	[W0], [W0--]
0x04DA	0x37FFFB  	BRA	L__UART1_Init87
L__UART1_Init88:
;__Lib_UART_12_p24_p33.c,183 :: 		
0x04DC	0xBE9F82  	PUSH.D	W2
0x04DE	0xBE0002  	MOV.D	W2, W0
0x04E0	0x90010E  	MOV	[W14+0], W2
0x04E2	0x90019E  	MOV	[W14+2], W3
0x04E4	0xEB0200  	CLR	W4
0x04E6	0x07004F  	RCALL	__Modulus_32x32
0x04E8	0xBE014F  	POP.D	W2
0x04EA	0x980720  	MOV	W0, [W14+4]
0x04EC	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p24_p33.c,184 :: 		
0x04EE	0xBE0002  	MOV.D	W2, W0
0x04F0	0x90010E  	MOV	[W14+0], W2
0x04F2	0x90019E  	MOV	[W14+2], W3
0x04F4	0xEB0200  	CLR	W4
0x04F6	0x07001E  	RCALL	__Divide_32x32
; tmp end address is: 4 (W2)
; tmp start address is: 6 (W3)
0x04F8	0x780180  	MOV	W0, W3
0x04FA	0x780201  	MOV	W1, W4
;__Lib_UART_12_p24_p33.c,186 :: 		
0x04FC	0x470060  	ADD	W14, #0, W0
0x04FE	0xD10150  	LSR	[++W0], W2
0x0500	0xD380C0  	RRC	[--W0], W1
0x0502	0x470064  	ADD	W14, #4, W0
0x0504	0xE10830  	CP	W1, [W0++]
0x0506	0xE19020  	CPB	W2, [W0--]
0x0508	0x310007  	BRA GEU	L__UART1_Init63
L__UART1_Init89:
;__Lib_UART_12_p24_p33.c,187 :: 		
0x050A	0x418061  	ADD	W3, #1, W0
0x050C	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
; tmp start address is: 10 (W5)
0x050E	0x780280  	MOV	W0, W5
0x0510	0x780301  	MOV	W1, W6
; tmp end address is: 10 (W5)
0x0512	0x780105  	MOV	W5, W2
0x0514	0x780186  	MOV	W6, W3
0x0516	0x370002  	BRA	L_UART1_Init15
L__UART1_Init63:
;__Lib_UART_12_p24_p33.c,186 :: 		
0x0518	0x780103  	MOV	W3, W2
0x051A	0x780184  	MOV	W4, W3
;__Lib_UART_12_p24_p33.c,187 :: 		
L_UART1_Init15:
;__Lib_UART_12_p24_p33.c,189 :: 		
; tmp start address is: 4 (W2)
0x051C	0xA86220  	BSET	U1MODE, #3
; tmp end address is: 4 (W2)
;__Lib_UART_12_p24_p33.c,190 :: 		
0x051E	0x370000  	BRA	L_UART1_Init14
L__UART1_Init64:
;__Lib_UART_12_p24_p33.c,175 :: 		
;__Lib_UART_12_p24_p33.c,190 :: 		
L_UART1_Init14:
;__Lib_UART_12_p24_p33.c,192 :: 		
; tmp start address is: 4 (W2)
0x0520	0x510061  	SUB	W2, #1, W0
0x0522	0x5980E0  	SUBB	W3, #0, W1
; tmp end address is: 4 (W2)
; tmp start address is: 0 (W0)
0x0524	0x881140  	MOV	W0, U1BRG
; tmp end address is: 0 (W0)
;__Lib_UART_12_p24_p33.c,195 :: 		
0x0526	0xA92222  	BCLR	U1STA, #1
;__Lib_UART_12_p24_p33.c,197 :: 		
0x0528	0xA8E221  	BSET	U1MODE, #15
;__Lib_UART_12_p24_p33.c,198 :: 		
0x052A	0xA84223  	BSET	U1STA, #10
;__Lib_UART_12_p24_p33.c,200 :: 		
0x052C	0x07FE70  	RCALL	_Delay_100ms
0x052E	0x07FE6F  	RCALL	_Delay_100ms
;__Lib_UART_12_p24_p33.c,202 :: 		
L_end_UART1_Init:
0x0530	0xFA8000  	ULNK
0x0532	0x060000  	RETURN
; end of _UART1_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x0274	0x238800  	MOV	#14464, W0
0x0276	0x200011  	MOV	#1, W1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x0278	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x021C	0x200020  	MOV	#2, W0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x021E	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x020E	0x2000D8  	MOV	#13, W8
0x0210	0x235077  	MOV	#13575, W7
L_Delay_100ms33:
0x0212	0xED200E  	DEC	W7
0x0214	0x3AFFFE  	BRA NZ	L_Delay_100ms33
0x0216	0xED2010  	DEC	W8
0x0218	0x3AFFFC  	BRA NZ	L_Delay_100ms33
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x021A	0x060000  	RETURN
; end of _Delay_100ms
__Multiply_32x32:
0x05DE	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x05E0	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x05E2	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x05E4	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x05E6	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x05E8	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x05EA	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x05EC	0xFA8000  	ULNK
0x05EE	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x0586	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x0588	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x058A	0x0000000405DA  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x058E	0xE20008  	CP0	W4
;__Lib_Math.c,173 :: 		
0x0590	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x0592	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x0594	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x0596	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.c,180 :: 		
0x0598	0xE20002  	CP0	W1
;__Lib_Math.c,181 :: 		
0x059A	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x059C	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,183 :: 		
0x059E	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x05A0	0xE20006  	CP0	W3
;__Lib_Math.c,186 :: 		
0x05A2	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x05A4	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,188 :: 		
0x05A6	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x05A8	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x05AA	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,192 :: 		
0x05AC	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x05AE	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,194 :: 		
0x05B0	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x05B2	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x05B4	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x05B6	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.c,200 :: 		
0x05B8	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x05BA	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,203 :: 		
0x05BC	0x200206  	MOV	#32, W6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x05BE	0xD00000  	SL	W0, W0
;__Lib_Math.c,206 :: 		
0x05C0	0xD28081  	RLC	W1, W1
;__Lib_Math.c,207 :: 		
0x05C2	0xD28204  	RLC	W4, W4
;__Lib_Math.c,208 :: 		
0x05C4	0xD28285  	RLC	W5, W5
;__Lib_Math.c,209 :: 		
0x05C6	0xA80000  	BSET	W0, #0
;__Lib_Math.c,210 :: 		
0x05C8	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,211 :: 		
0x05CA	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,212 :: 		
0x05CC	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x05CE	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,214 :: 		
0x05D0	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,215 :: 		
0x05D2	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x05D4	0xE90306  	DEC	W6, W6
;__Lib_Math.c,218 :: 		
0x05D6	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x05D8	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x05DA	0xFA8000  	ULNK
0x05DC	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x0534	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x0536	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x0538	0x000000040582  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x053C	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x053E	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x0540	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x0542	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x0544	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x0546	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x0548	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x054A	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x054C	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x054E	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x0550	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x0552	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x0554	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x0556	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x0558	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x055A	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x055C	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x055E	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x0560	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x0562	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x0564	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x0566	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x0568	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x056A	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x056C	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x056E	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x0570	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x0572	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x0574	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x0576	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x0578	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x057A	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x057C	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x057E	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x0580	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x0582	0xFA8000  	ULNK
0x0584	0x060000  	RETURN
; end of __Divide_32x32
_DS3234_init:
;TIEMPO_RTC.c,38 :: 		void DS3234_init(){
;TIEMPO_RTC.c,40 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x0638	0x781F8A  	PUSH	W10
0x063A	0x781F8B  	PUSH	W11
0x063C	0x781F8C  	PUSH	W12
0x063E	0x781F8D  	PUSH	W13
0x0640	0xEF201A  	CLR	W13
0x0642	0x2001CC  	MOV	#28, W12
0x0644	0xEF2016  	CLR	W11
0x0646	0x20020A  	MOV	#32, W10
0x0648	0xEF2000  	CLR	W0
0x064A	0x781F80  	PUSH	W0
0x064C	0xEF2000  	CLR	W0
0x064E	0x781F80  	PUSH	W0
0x0650	0xEF2000  	CLR	W0
0x0652	0x781F80  	PUSH	W0
0x0654	0xEF2000  	CLR	W0
0x0656	0x781F80  	PUSH	W0
0x0658	0x07FFCB  	RCALL	_SPI2_Init_Advanced
0x065A	0xB1008F  	SUB	#8, W15
;TIEMPO_RTC.c,41 :: 		DS3234_write_byte(Control,0x20);
0x065C	0xB3C20B  	MOV.B	#32, W11
0x065E	0xB3C8EA  	MOV.B	#142, W10
0x0660	0x07FFDE  	RCALL	_DS3234_write_byte
;TIEMPO_RTC.c,42 :: 		DS3234_write_byte(ControlStatus,0x08);
0x0662	0xB3C08B  	MOV.B	#8, W11
0x0664	0xB3C8FA  	MOV.B	#143, W10
0x0666	0x07FFDB  	RCALL	_DS3234_write_byte
;TIEMPO_RTC.c,43 :: 		SPI2_Init();
0x0668	0x07FED0  	RCALL	_SPI2_Init
;TIEMPO_RTC.c,45 :: 		}
L_end_DS3234_init:
0x066A	0x7806CF  	POP	W13
0x066C	0x78064F  	POP	W12
0x066E	0x7805CF  	POP	W11
0x0670	0x78054F  	POP	W10
0x0672	0x060000  	RETURN
; end of _DS3234_init
_SPI2_Init_Advanced:
0x05F0	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,187 :: 		
; slave_select start address is: 2 (W1)
0x05F2	0x97B8CE  	MOV	[W14-8], W1
; data_sample start address is: 8 (W4)
0x05F4	0x97BA3E  	MOV	[W14-10], W4
; clock_idle start address is: 4 (W2)
0x05F6	0x97B92E  	MOV	[W14-12], W2
; edge start address is: 6 (W3)
0x05F8	0x97B99E  	MOV	[W14-14], W3
;__Lib_SPI_12.c,190 :: 		
0x05FA	0xEF2260  	CLR	SPI2STAT
;__Lib_SPI_12.c,191 :: 		
0x05FC	0xEF2262  	CLR	SPI2CON
;__Lib_SPI_12.c,193 :: 		
0x05FE	0x202200  	MOV	#lo_addr(_SPI2_Read), W0
0x0600	0x88DEE0  	MOV	W0, _SPI_Rd_Ptr
;__Lib_SPI_12.c,194 :: 		
0x0602	0x206300  	MOV	#lo_addr(_SPI2_Write), W0
0x0604	0x88DED0  	MOV	W0, _SPI_Wr_Ptr
;__Lib_SPI_12.c,196 :: 		
0x0606	0x75000B  	IOR	W10, W11, W0
0x0608	0x70000C  	IOR	W0, W12, W0
0x060A	0x70000D  	IOR	W0, W13, W0
0x060C	0x700001  	IOR	W0, W1, W0
; slave_select end address is: 2 (W1)
0x060E	0x700004  	IOR	W0, W4, W0
; data_sample end address is: 8 (W4)
;__Lib_SPI_12.c,197 :: 		
0x0610	0x700082  	IOR	W0, W2, W1
; clock_idle end address is: 4 (W2)
0x0612	0x202620  	MOV	#lo_addr(SPI2CON), W0
0x0614	0x708803  	IOR	W1, W3, [W0]
; edge end address is: 6 (W3)
;__Lib_SPI_12.c,199 :: 		
0x0616	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,200 :: 		
0x0618	0xA8E261  	BSET	SPI2STAT, #15
;__Lib_SPI_12.c,202 :: 		
L_end_SPI2_Init_Advanced:
0x061A	0xFA8000  	ULNK
0x061C	0x060000  	RETURN
; end of _SPI2_Init_Advanced
_DS3234_write_byte:
;TIEMPO_RTC.c,48 :: 		void DS3234_write_byte(unsigned char address, unsigned char value){
;TIEMPO_RTC.c,50 :: 		CS_DS3234 = 0;
0x061E	0x781F8A  	PUSH	W10
0x0620	0xA94E04  	BCLR	LATA2_bit, BitPos(LATA2_bit+0)
;TIEMPO_RTC.c,51 :: 		SPI2_Write(address);
0x0622	0xFB850A  	ZE	W10, W10
0x0624	0x070005  	RCALL	_SPI2_Write
;TIEMPO_RTC.c,52 :: 		SPI2_Write(value);
0x0626	0xFB850B  	ZE	W11, W10
0x0628	0x070003  	RCALL	_SPI2_Write
;TIEMPO_RTC.c,53 :: 		CS_DS3234 = 1;
0x062A	0xA84E04  	BSET	LATA2_bit, BitPos(LATA2_bit+0)
;TIEMPO_RTC.c,55 :: 		}
L_end_DS3234_write_byte:
0x062C	0x78054F  	POP	W10
0x062E	0x060000  	RETURN
; end of _DS3234_write_byte
_SPI2_Write:
0x0630	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,175 :: 		
;__Lib_SPI_12.c,176 :: 		
0x0632	0x07FDF6  	RCALL	_SPI2_Read
;__Lib_SPI_12.c,183 :: 		
L_end_SPI2_Write:
0x0634	0xFA8000  	ULNK
0x0636	0x060000  	RETURN
; end of _SPI2_Write
_SPI2_Read:
0x0220	0xFA0000  	LNK	#0
;__Lib_SPI_12.c,163 :: 		
;__Lib_SPI_12.c,165 :: 		
0x0222	0xA9C260  	BCLR	SPI2STAT, #6
;__Lib_SPI_12.c,167 :: 		
L_SPI2_Read4:
0x0224	0xAE2260  	BTSS	SPI2STAT, #1
0x0226	0x370001  	BRA	L_SPI2_Read5
0x0228	0x37FFFD  	BRA	L_SPI2_Read4
L_SPI2_Read5:
;__Lib_SPI_12.c,168 :: 		
0x022A	0x88134A  	MOV	W10, SPI2BUF
;__Lib_SPI_12.c,169 :: 		
L_SPI2_Read6:
0x022C	0xAF0260  	BTSC	SPI2STAT, #0
0x022E	0x370001  	BRA	L_SPI2_Read7
0x0230	0x37FFFD  	BRA	L_SPI2_Read6
L_SPI2_Read7:
;__Lib_SPI_12.c,171 :: 		
0x0232	0xBF8268  	MOV	SPI2BUF, WREG
;__Lib_SPI_12.c,173 :: 		
L_end_SPI2_Read:
0x0234	0xFA8000  	ULNK
0x0236	0x060000  	RETURN
; end of _SPI2_Read
_ADXL355_init:
;ADXL355_SPI.c,8 :: 		void ADXL355_init(short tMuestreo){
;ADXL355_SPI.c,9 :: 		ADXL355_write_byte(Reset,0x52);                                             //Resetea el dispositivo
0x02D2	0x781F8A  	PUSH	W10
0x02D4	0x781F8B  	PUSH	W11
0x02D6	0x781F8A  	PUSH	W10
0x02D8	0xB3C52B  	MOV.B	#82, W11
0x02DA	0xB3C2FA  	MOV.B	#47, W10
0x02DC	0x07002B  	RCALL	_ADXL355_write_byte
;ADXL355_SPI.c,10 :: 		Delay_ms(10);
0x02DE	0x200028  	MOV	#2, W8
0x02E0	0x238807  	MOV	#14464, W7
L_ADXL355_init0:
0x02E2	0xED200E  	DEC	W7
0x02E4	0x3AFFFE  	BRA NZ	L_ADXL355_init0
0x02E6	0xED2010  	DEC	W8
0x02E8	0x3AFFFC  	BRA NZ	L_ADXL355_init0
0x02EA	0x000000  	NOP
0x02EC	0x000000  	NOP
;ADXL355_SPI.c,11 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF|STANDBY);
0x02EE	0xB3C05B  	MOV.B	#5, W11
0x02F0	0xB3C2DA  	MOV.B	#45, W10
0x02F2	0x070020  	RCALL	_ADXL355_write_byte
;ADXL355_SPI.c,12 :: 		ADXL355_write_byte(Range, _2G);
0x02F4	0xB3C01B  	MOV.B	#1, W11
0x02F6	0xB3C2CA  	MOV.B	#44, W10
0x02F8	0x07001D  	RCALL	_ADXL355_write_byte
0x02FA	0x78054F  	POP	W10
;ADXL355_SPI.c,13 :: 		switch (tMuestreo){
0x02FC	0x370010  	BRA	L_ADXL355_init2
;ADXL355_SPI.c,14 :: 		case 1:
L_ADXL355_init4:
;ADXL355_SPI.c,15 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_62_5_Hz);       //ODR=250Hz 1
0x02FE	0xB3C04B  	MOV.B	#4, W11
0x0300	0xB3C28A  	MOV.B	#40, W10
0x0302	0x070018  	RCALL	_ADXL355_write_byte
;ADXL355_SPI.c,16 :: 		break;
0x0304	0x370014  	BRA	L_ADXL355_init3
;ADXL355_SPI.c,17 :: 		case 2:
L_ADXL355_init5:
;ADXL355_SPI.c,18 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_31_25_Hz);      //ODR=125Hz 2
0x0306	0xB3C05B  	MOV.B	#5, W11
0x0308	0xB3C28A  	MOV.B	#40, W10
0x030A	0x070014  	RCALL	_ADXL355_write_byte
;ADXL355_SPI.c,19 :: 		break;
0x030C	0x370010  	BRA	L_ADXL355_init3
;ADXL355_SPI.c,20 :: 		case 4:
L_ADXL355_init6:
;ADXL355_SPI.c,21 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_15_625_Hz);     //ODR=62.5Hz 4
0x030E	0xB3C06B  	MOV.B	#6, W11
0x0310	0xB3C28A  	MOV.B	#40, W10
0x0312	0x070010  	RCALL	_ADXL355_write_byte
;ADXL355_SPI.c,22 :: 		break;
0x0314	0x37000C  	BRA	L_ADXL355_init3
;ADXL355_SPI.c,23 :: 		case 8:
L_ADXL355_init7:
;ADXL355_SPI.c,24 :: 		ADXL355_write_byte(Filter, NO_HIGH_PASS_FILTER|_7_813_Hz );     //ODR=31.25Hz 8
0x0316	0xB3C07B  	MOV.B	#7, W11
0x0318	0xB3C28A  	MOV.B	#40, W10
0x031A	0x07000C  	RCALL	_ADXL355_write_byte
;ADXL355_SPI.c,25 :: 		break;
0x031C	0x370008  	BRA	L_ADXL355_init3
;ADXL355_SPI.c,26 :: 		}
L_ADXL355_init2:
0x031E	0xE15461  	CP.B	W10, #1
0x0320	0x32FFEE  	BRA Z	L_ADXL355_init4
L__ADXL355_init19:
0x0322	0xE15462  	CP.B	W10, #2
0x0324	0x32FFF0  	BRA Z	L_ADXL355_init5
L__ADXL355_init20:
0x0326	0xE15464  	CP.B	W10, #4
0x0328	0x32FFF2  	BRA Z	L_ADXL355_init6
L__ADXL355_init21:
0x032A	0xE15468  	CP.B	W10, #8
0x032C	0x32FFF4  	BRA Z	L_ADXL355_init7
L__ADXL355_init22:
L_ADXL355_init3:
;ADXL355_SPI.c,27 :: 		}
L_end_ADXL355_init:
0x032E	0x7805CF  	POP	W11
0x0330	0x78054F  	POP	W10
0x0332	0x060000  	RETURN
; end of _ADXL355_init
_ADXL355_write_byte:
;ADXL355_SPI.c,30 :: 		void ADXL355_write_byte(unsigned char address, unsigned char value){
;ADXL355_SPI.c,31 :: 		address = (address<<1)&0xFE;
0x0334	0x781F8A  	PUSH	W10
0x0336	0xFB800A  	ZE	W10, W0
0x0338	0xDD00C1  	SL	W0, #1, W1
0x033A	0x200FE0  	MOV	#254, W0
0x033C	0x608000  	AND	W1, W0, W0
0x033E	0x784500  	MOV.B	W0, W10
;ADXL355_SPI.c,32 :: 		CS_ADXL355=0;
0x0340	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;ADXL355_SPI.c,33 :: 		SPI2_Write(address);
0x0342	0xFB8500  	ZE	W0, W10
0x0344	0x070175  	RCALL	_SPI2_Write
;ADXL355_SPI.c,34 :: 		SPI2_Write(value);
0x0346	0xFB850B  	ZE	W11, W10
0x0348	0x070173  	RCALL	_SPI2_Write
;ADXL355_SPI.c,35 :: 		CS_ADXL355=1;
0x034A	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;ADXL355_SPI.c,36 :: 		}
L_end_ADXL355_write_byte:
0x034C	0x78054F  	POP	W10
0x034E	0x060000  	RETURN
; end of _ADXL355_write_byte
_GPS_init:
;TIEMPO_GPS.c,9 :: 		void GPS_init()
;TIEMPO_GPS.c,11 :: 		UART1_Write_Text("$PMTK220,1000*1F\r\n");
0x027A	0x781F8A  	PUSH	W10
0x027C	0x21000A  	MOV	#lo_addr(?lstr1_TIEMPO_GPS), W10
0x027E	0x07FFE9  	RCALL	_UART1_Write_Text
;TIEMPO_GPS.c,12 :: 		UART1_Write_Text("$PMTK313,1*2E\r\n");
0x0280	0x21023A  	MOV	#lo_addr(?lstr2_TIEMPO_GPS), W10
0x0282	0x07FFE7  	RCALL	_UART1_Write_Text
;TIEMPO_GPS.c,13 :: 		UART1_Write_Text("$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n");
0x0284	0x21033A  	MOV	#lo_addr(?lstr3_TIEMPO_GPS), W10
0x0286	0x07FFE5  	RCALL	_UART1_Write_Text
;TIEMPO_GPS.c,14 :: 		UART1_Write_Text("$PMTK319,1*24\r\n");
0x0288	0x21A36A  	MOV	#lo_addr(?lstr4_TIEMPO_GPS), W10
0x028A	0x07FFE3  	RCALL	_UART1_Write_Text
;TIEMPO_GPS.c,15 :: 		UART1_Write_Text("$PMTK413*34\r\n");
0x028C	0x21A46A  	MOV	#lo_addr(?lstr5_TIEMPO_GPS), W10
0x028E	0x07FFE1  	RCALL	_UART1_Write_Text
;TIEMPO_GPS.c,16 :: 		UART1_Write_Text("$PMTK513,1*28\r\n");
0x0290	0x21013A  	MOV	#lo_addr(?lstr6_TIEMPO_GPS), W10
0x0292	0x07FFDF  	RCALL	_UART1_Write_Text
;TIEMPO_GPS.c,17 :: 		Delay_ms(1000);
0x0294	0x2007B8  	MOV	#123, W8
0x0296	0x212497  	MOV	#4681, W7
L_GPS_init0:
0x0298	0xED200E  	DEC	W7
0x029A	0x3AFFFE  	BRA NZ	L_GPS_init0
0x029C	0xED2010  	DEC	W8
0x029E	0x3AFFFC  	BRA NZ	L_GPS_init0
;TIEMPO_GPS.c,19 :: 		}
L_end_GPS_init:
0x02A0	0x78054F  	POP	W10
0x02A2	0x060000  	RETURN
; end of _GPS_init
_UART1_Write_Text:
0x0252	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,76 :: 		
;__Lib_UART_12_p24_p33.c,77 :: 		
; counter start address is: 2 (W1)
0x0254	0xEF2002  	CLR	W1
;__Lib_UART_12_p24_p33.c,79 :: 		
; data_ start address is: 0 (W0)
0x0256	0x78401A  	MOV.B	[W10], W0
; counter end address is: 2 (W1)
; data_ end address is: 0 (W0)
;__Lib_UART_12_p24_p33.c,80 :: 		
L_UART1_Write_Text2:
; data_ start address is: 0 (W0)
; counter start address is: 2 (W1)
0x0258	0xE10460  	CP.B	W0, #0
0x025A	0x32000A  	BRA Z	L_UART1_Write_Text3
L__UART1_Write_Text71:
;__Lib_UART_12_p24_p33.c,81 :: 		
0x025C	0x781F8A  	PUSH	W10
; data_ end address is: 0 (W0)
0x025E	0xFB8500  	ZE	W0, W10
0x0260	0x07FFCF  	RCALL	_UART1_Write
0x0262	0x78054F  	POP	W10
;__Lib_UART_12_p24_p33.c,82 :: 		
0x0264	0x40C061  	ADD.B	W1, #1, W0
0x0266	0x784080  	MOV.B	W0, W1
;__Lib_UART_12_p24_p33.c,83 :: 		
0x0268	0xFB8000  	ZE	W0, W0
0x026A	0x450000  	ADD	W10, W0, W0
; data_ start address is: 0 (W0)
0x026C	0x784010  	MOV.B	[W0], W0
;__Lib_UART_12_p24_p33.c,84 :: 		
; counter end address is: 2 (W1)
; data_ end address is: 0 (W0)
0x026E	0x37FFF4  	BRA	L_UART1_Write_Text2
L_UART1_Write_Text3:
;__Lib_UART_12_p24_p33.c,85 :: 		
L_end_UART1_Write_Text:
0x0270	0xFA8000  	ULNK
0x0272	0x060000  	RETURN
; end of _UART1_Write_Text
_UART1_Write:
0x0200	0xFA0000  	LNK	#0
;__Lib_UART_12_p24_p33.c,70 :: 		
;__Lib_UART_12_p24_p33.c,71 :: 		
L_UART1_Write0:
0x0202	0xAF0223  	BTSC	U1STA, #8
0x0204	0x370001  	BRA	L_UART1_Write1
0x0206	0x37FFFD  	BRA	L_UART1_Write0
L_UART1_Write1:
;__Lib_UART_12_p24_p33.c,72 :: 		
0x0208	0x88112A  	MOV	W10, U1TXREG
;__Lib_UART_12_p24_p33.c,73 :: 		
L_end_UART1_Write:
0x020A	0xFA8000  	ULNK
0x020C	0x060000  	RETURN
; end of _UART1_Write
0x17DE	0x210001  	MOV	#lo_addr(?lstr1_TIEMPO_GPS), W1
0x17E0	0x280000  	MOV	#32768, W0
0x17E2	0x090529  	REPEAT	#1321
0x17E4	0x7818B0  	MOV	[W0++], [W1++]
0x17E6	0x060000  	RETURN
_int_2:
0x10F8	0xF80034  	PUSH	DSWPAG
0x10FA	0xF80032  	PUSH	DSRPAG
0x10FC	0xF80036  	PUSH	RCOUNT
0x10FE	0x781F80  	PUSH	W0
0x1100	0x200020  	MOV	#2, W0
0x1102	0x09000C  	REPEAT	#12
0x1104	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,533 :: 		void int_2() org IVT_ADDR_INT2INTERRUPT
;Acelerografo.c,536 :: 		INT2IF_bit = 0; // Limpia la bandera de interrupcion externa INT2
0x1106	0xA9A803  	BCLR	INT2IF_bit, BitPos(INT2IF_bit+0)
;Acelerografo.c,538 :: 		if (banSyncReloj == 1)
0x1108	0x21A640  	MOV	#lo_addr(_banSyncReloj), W0
0x110A	0x784010  	MOV.B	[W0], W0
0x110C	0xE10461  	CP.B	W0, #1
0x110E	0x3A0008  	BRA NZ	L_int_2105
L__int_2291:
;Acelerografo.c,541 :: 		LedTest = ~LedTest;
0x1110	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,543 :: 		horaSistema = horaSistema + 1; // Correccion 230901: Incrementa el reloj del sistema en 1 segundo
0x1112	0x200011  	MOV	#1, W1
0x1114	0x200002  	MOV	#0, W2
0x1116	0x21A6E0  	MOV	#lo_addr(_horaSistema), W0
0x1118	0x409810  	ADD	W1, [W0], [W0++]
0x111A	0x491010  	ADDC	W2, [W0], [W0--]
;Acelerografo.c,545 :: 		T3CON.TON = 1;
0x111C	0xA8E113  	BSET	T3CON, #15
;Acelerografo.c,546 :: 		TMR3 = 0;
0x111E	0xEF210A  	CLR	TMR3
;Acelerografo.c,547 :: 		}
L_int_2105:
;Acelerografo.c,548 :: 		}
L_end_int_2:
0x1120	0x2001A0  	MOV	#26, W0
0x1122	0x09000C  	REPEAT	#12
0x1124	0x78104F  	POP	[W0--]
0x1126	0x78004F  	POP	W0
0x1128	0xF90036  	POP	RCOUNT
0x112A	0xF90032  	POP	DSRPAG
0x112C	0xF90034  	POP	DSWPAG
0x112E	0x064000  	RETFIE
; end of _int_2
_int_1:
0x1230	0xF80034  	PUSH	DSWPAG
0x1232	0xF80032  	PUSH	DSRPAG
0x1234	0xF80036  	PUSH	RCOUNT
0x1236	0x781F80  	PUSH	W0
0x1238	0x200020  	MOV	#2, W0
0x123A	0x09000C  	REPEAT	#12
0x123C	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,511 :: 		void int_1() org IVT_ADDR_INT1INTERRUPT
;Acelerografo.c,514 :: 		INT1IF_bit = 0; // Limpia la bandera de interrupcion externa INT1
0x123E	0xA98802  	BCLR	INT1IF_bit, BitPos(INT1IF_bit+0)
;Acelerografo.c,516 :: 		if (banSetReloj == 1)
0x1240	0x21B870  	MOV	#lo_addr(_banSetReloj), W0
0x1242	0x784010  	MOV.B	[W0], W0
0x1244	0xE10461  	CP.B	W0, #1
0x1246	0x3A0016  	BRA NZ	L_int_1102
L__int_1287:
;Acelerografo.c,518 :: 		LedTest = ~LedTest;
0x1248	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,519 :: 		horaSistema++; // Incrementa el reloj del sistema
0x124A	0x200011  	MOV	#1, W1
0x124C	0x200002  	MOV	#0, W2
0x124E	0x21A6E0  	MOV	#lo_addr(_horaSistema), W0
0x1250	0x409810  	ADD	W1, [W0], [W0++]
0x1252	0x491010  	ADDC	W2, [W0], [W0--]
;Acelerografo.c,521 :: 		if (horaSistema == 86400)
0x1254	0x80D372  	MOV	_horaSistema, W2
0x1256	0x80D383  	MOV	_horaSistema+2, W3
0x1258	0x251800  	MOV	#20864, W0
0x125A	0x200011  	MOV	#1, W1
0x125C	0xE11000  	CP	W2, W0
0x125E	0xE19801  	CPB	W3, W1
0x1260	0x3A0004  	BRA NZ	L_int_1103
L__int_1288:
;Acelerografo.c,523 :: 		horaSistema = 0; //(24*3600)+(0*60)+(0) = 86400
0x1262	0xEF2000  	CLR	W0
0x1264	0xEF2002  	CLR	W1
0x1266	0x88D370  	MOV	W0, _horaSistema
0x1268	0x88D381  	MOV	W1, _horaSistema+2
;Acelerografo.c,524 :: 		}
L_int_1103:
;Acelerografo.c,525 :: 		if (banInicio == 1)
0x126A	0x21A740  	MOV	#lo_addr(_banInicio), W0
0x126C	0x784010  	MOV.B	[W0], W0
0x126E	0xE10461  	CP.B	W0, #1
0x1270	0x3A0001  	BRA NZ	L_int_1104
L__int_1289:
;Acelerografo.c,527 :: 		Muestrear();
0x1272	0x07FB69  	RCALL	_Muestrear
;Acelerografo.c,528 :: 		}
L_int_1104:
;Acelerografo.c,529 :: 		}
L_int_1102:
;Acelerografo.c,530 :: 		}
L_end_int_1:
0x1274	0x2001A0  	MOV	#26, W0
0x1276	0x09000C  	REPEAT	#12
0x1278	0x78104F  	POP	[W0--]
0x127A	0x78004F  	POP	W0
0x127C	0xF90036  	POP	RCOUNT
0x127E	0xF90032  	POP	DSRPAG
0x1280	0xF90034  	POP	DSWPAG
0x1282	0x064000  	RETFIE
; end of _int_1
_Muestrear:
;Acelerografo.c,270 :: 		void Muestrear()
;Acelerografo.c,273 :: 		if (banCiclo == 1)
0x0946	0x781F8A  	PUSH	W10
0x0948	0x781F8B  	PUSH	W11
0x094A	0x781F8C  	PUSH	W12
0x094C	0x781F8D  	PUSH	W13
0x094E	0x21BE10  	MOV	#lo_addr(_banCiclo), W0
0x0950	0x784010  	MOV.B	[W0], W0
0x0952	0xE10461  	CP.B	W0, #1
0x0954	0x3A0005  	BRA NZ	L_Muestrear14
L__Muestrear234:
;Acelerografo.c,275 :: 		ADXL355_write_byte(POWER_CTL, DRDY_OFF | MEASURING); // Coloca el ADXL en modo medicion
0x0956	0xB3C04B  	MOV.B	#4, W11
0x0958	0xB3C2DA  	MOV.B	#45, W10
0x095A	0x07FCEC  	RCALL	_ADXL355_write_byte
;Acelerografo.c,276 :: 		T1CON.TON = 1;                                       // Enciende el Timer1
0x095C	0xA8E105  	BSET	T1CON, #15
;Acelerografo.c,277 :: 		}
0x095E	0x37009B  	BRA	L_Muestrear15
L_Muestrear14:
;Acelerografo.c,278 :: 		else if (banCiclo == 2)
0x0960	0x21BE10  	MOV	#lo_addr(_banCiclo), W0
0x0962	0x784010  	MOV.B	[W0], W0
0x0964	0xE10462  	CP.B	W0, #2
0x0966	0x3A0097  	BRA NZ	L_Muestrear16
L__Muestrear235:
;Acelerografo.c,281 :: 		banCiclo = 3; // Limpia la bandera de ciclo completo
0x0968	0x21BE11  	MOV	#lo_addr(_banCiclo), W1
0x096A	0xB3C030  	MOV.B	#3, W0
0x096C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,283 :: 		tramaCompleta[0] = fuenteReloj; // LLena el primer elemento de la tramaCompleta con el identificador de fuente de reloj
0x096E	0x210631  	MOV	#lo_addr(_tramaCompleta), W1
0x0970	0x21A610  	MOV	#lo_addr(_fuenteReloj), W0
0x0972	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,284 :: 		numFIFO = ADXL355_read_byte(FIFO_ENTRIES);
0x0974	0xB3C05A  	MOV.B	#5, W10
0x0976	0x07FFDA  	RCALL	_ADXL355_read_byte
0x0978	0x21A551  	MOV	#lo_addr(_numFIFO), W1
0x097A	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,285 :: 		numSetsFIFO = (numFIFO) / 3; // Lee el numero de sets disponibles en el FIFO
0x097C	0xFB8000  	ZE	W0, W0
0x097E	0x200032  	MOV	#3, W2
0x0980	0x090011  	REPEAT	#17
0x0982	0xD80002  	DIV.S	W0, W2
0x0984	0x780080  	MOV	W0, W1
0x0986	0x21A540  	MOV	#lo_addr(_numSetsFIFO), W0
0x0988	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,288 :: 		for (x = 0; x < numSetsFIFO; x++)
0x098A	0xEF2000  	CLR	W0
0x098C	0x88D360  	MOV	W0, _x
L_Muestrear17:
0x098E	0x21A540  	MOV	#lo_addr(_numSetsFIFO), W0
0x0990	0xFB8090  	ZE	[W0], W1
0x0992	0x21A6C0  	MOV	#lo_addr(_x), W0
0x0994	0xE10810  	CP	W1, [W0]
0x0996	0x36001A  	BRA LEU	L_Muestrear18
L__Muestrear236:
;Acelerografo.c,290 :: 		ADXL355_read_FIFO(datosLeidos); // Lee una sola posicion del FIFO
0x0998	0x21A2DA  	MOV	#lo_addr(_datosLeidos), W10
0x099A	0x07018A  	RCALL	_ADXL355_read_FIFO
;Acelerografo.c,291 :: 		for (y = 0; y < 9; y++)
0x099C	0xEF2000  	CLR	W0
0x099E	0x88D350  	MOV	W0, _y
L_Muestrear20:
0x09A0	0x80D350  	MOV	_y, W0
0x09A2	0xE10069  	CP	W0, #9
0x09A4	0x31000F  	BRA GEU	L_Muestrear21
L__Muestrear237:
;Acelerografo.c,293 :: 		datosFIFO[y + (x * 9)] = datosLeidos[y]; // LLena la trama datosFIFO
0x09A6	0x80D361  	MOV	_x, W1
0x09A8	0x200090  	MOV	#9, W0
0x09AA	0xB80900  	MUL.UU	W1, W0, W2
0x09AC	0x21A6A0  	MOV	#lo_addr(_y), W0
0x09AE	0x410090  	ADD	W2, [W0], W1
0x09B0	0x21A7C0  	MOV	#lo_addr(_datosFIFO), W0
0x09B2	0x400101  	ADD	W0, W1, W2
0x09B4	0x21A2D1  	MOV	#lo_addr(_datosLeidos), W1
0x09B6	0x21A6A0  	MOV	#lo_addr(_y), W0
0x09B8	0x408010  	ADD	W1, [W0], W0
0x09BA	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,291 :: 		for (y = 0; y < 9; y++)
0x09BC	0x200011  	MOV	#1, W1
0x09BE	0x21A6A0  	MOV	#lo_addr(_y), W0
0x09C0	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,295 :: 		}
0x09C2	0x37FFEE  	BRA	L_Muestrear20
L_Muestrear21:
;Acelerografo.c,288 :: 		for (x = 0; x < numSetsFIFO; x++)
0x09C4	0x200011  	MOV	#1, W1
0x09C6	0x21A6C0  	MOV	#lo_addr(_x), W0
0x09C8	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,296 :: 		}
0x09CA	0x37FFE1  	BRA	L_Muestrear17
L_Muestrear18:
;Acelerografo.c,299 :: 		for (x = 0; x < (numSetsFIFO * 9); x++)
0x09CC	0xEF2000  	CLR	W0
0x09CE	0x88D360  	MOV	W0, _x
L_Muestrear23:
0x09D0	0x21A540  	MOV	#lo_addr(_numSetsFIFO), W0
0x09D2	0xFB8090  	ZE	[W0], W1
0x09D4	0x200090  	MOV	#9, W0
0x09D6	0xB98900  	MUL.SS	W1, W0, W2
0x09D8	0x21A6C0  	MOV	#lo_addr(_x), W0
0x09DA	0xE11010  	CP	W2, [W0]
0x09DC	0x360036  	BRA LEU	L_Muestrear24
L__Muestrear238:
;Acelerografo.c,301 :: 		if ((x == 0) || (x % 9 == 0))
0x09DE	0x80D360  	MOV	_x, W0
0x09E0	0xE10060  	CP	W0, #0
0x09E2	0x320008  	BRA Z	L__Muestrear152
L__Muestrear239:
0x09E4	0x80D360  	MOV	_x, W0
0x09E6	0x200092  	MOV	#9, W2
0x09E8	0x090011  	REPEAT	#17
0x09EA	0xD88002  	DIV.U	W0, W2
0x09EC	0x780001  	MOV	W1, W0
0x09EE	0xE10060  	CP	W0, #0
0x09F0	0x320001  	BRA Z	L__Muestrear151
L__Muestrear240:
0x09F2	0x37001B  	BRA	L_Muestrear28
L__Muestrear152:
L__Muestrear151:
;Acelerografo.c,303 :: 		tramaCompleta[contFIFO + contMuestras + x] = contMuestras; // Funciona bien
0x09F4	0x21A580  	MOV	#lo_addr(_contMuestras), W0
0x09F6	0xFB8090  	ZE	[W0], W1
0x09F8	0x21A5A0  	MOV	#lo_addr(_contFIFO), W0
0x09FA	0x408090  	ADD	W1, [W0], W1
0x09FC	0x21A6C0  	MOV	#lo_addr(_x), W0
0x09FE	0x408090  	ADD	W1, [W0], W1
0x0A00	0x210630  	MOV	#lo_addr(_tramaCompleta), W0
0x0A02	0x400081  	ADD	W0, W1, W1
0x0A04	0x21A580  	MOV	#lo_addr(_contMuestras), W0
0x0A06	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,304 :: 		tramaCompleta[contFIFO + contMuestras + x + 1] = datosFIFO[x];
0x0A08	0x21A580  	MOV	#lo_addr(_contMuestras), W0
0x0A0A	0xFB8090  	ZE	[W0], W1
0x0A0C	0x21A5A0  	MOV	#lo_addr(_contFIFO), W0
0x0A0E	0x408090  	ADD	W1, [W0], W1
0x0A10	0x21A6C0  	MOV	#lo_addr(_x), W0
0x0A12	0x408010  	ADD	W1, [W0], W0
0x0A14	0x4000E1  	ADD	W0, #1, W1
0x0A16	0x210630  	MOV	#lo_addr(_tramaCompleta), W0
0x0A18	0x400101  	ADD	W0, W1, W2
0x0A1A	0x21A7C1  	MOV	#lo_addr(_datosFIFO), W1
0x0A1C	0x21A6C0  	MOV	#lo_addr(_x), W0
0x0A1E	0x408010  	ADD	W1, [W0], W0
0x0A20	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,305 :: 		contMuestras++;
0x0A22	0xB3C011  	MOV.B	#1, W1
0x0A24	0x21A580  	MOV	#lo_addr(_contMuestras), W0
0x0A26	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,306 :: 		}
0x0A28	0x37000C  	BRA	L_Muestrear29
L_Muestrear28:
;Acelerografo.c,309 :: 		tramaCompleta[contFIFO + contMuestras + x] = datosFIFO[x];
0x0A2A	0x21A580  	MOV	#lo_addr(_contMuestras), W0
0x0A2C	0xFB8090  	ZE	[W0], W1
0x0A2E	0x21A5A0  	MOV	#lo_addr(_contFIFO), W0
0x0A30	0x408090  	ADD	W1, [W0], W1
0x0A32	0x21A6C0  	MOV	#lo_addr(_x), W0
0x0A34	0x408090  	ADD	W1, [W0], W1
0x0A36	0x210630  	MOV	#lo_addr(_tramaCompleta), W0
0x0A38	0x400101  	ADD	W0, W1, W2
0x0A3A	0x21A7C1  	MOV	#lo_addr(_datosFIFO), W1
0x0A3C	0x21A6C0  	MOV	#lo_addr(_x), W0
0x0A3E	0x408010  	ADD	W1, [W0], W0
0x0A40	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,310 :: 		}
L_Muestrear29:
;Acelerografo.c,299 :: 		for (x = 0; x < (numSetsFIFO * 9); x++)
0x0A42	0x200011  	MOV	#1, W1
0x0A44	0x21A6C0  	MOV	#lo_addr(_x), W0
0x0A46	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,311 :: 		}
0x0A48	0x37FFC3  	BRA	L_Muestrear23
L_Muestrear24:
;Acelerografo.c,314 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo);
0x0A4A	0x80D3CC  	MOV	_fechaSistema, W12
0x0A4C	0x80D3DD  	MOV	_fechaSistema+2, W13
0x0A4E	0x80D37A  	MOV	_horaSistema, W10
0x0A50	0x80D38B  	MOV	_horaSistema+2, W11
0x0A52	0x21B8A0  	MOV	#lo_addr(_tiempo), W0
0x0A54	0x781F80  	PUSH	W0
0x0A56	0x070203  	RCALL	_AjustarTiempoSistema
0x0A58	0xB1002F  	SUB	#2, W15
;Acelerografo.c,315 :: 		for (x = 0; x < 6; x++)
0x0A5A	0xEF2000  	CLR	W0
0x0A5C	0x88D360  	MOV	W0, _x
L_Muestrear30:
0x0A5E	0x80D360  	MOV	_x, W0
0x0A60	0xE10066  	CP	W0, #6
0x0A62	0x31000D  	BRA GEU	L_Muestrear31
L__Muestrear241:
;Acelerografo.c,317 :: 		tramaCompleta[2500 + x] = tiempo[x];
0x0A64	0x209C41  	MOV	#2500, W1
0x0A66	0x21A6C0  	MOV	#lo_addr(_x), W0
0x0A68	0x408090  	ADD	W1, [W0], W1
0x0A6A	0x210630  	MOV	#lo_addr(_tramaCompleta), W0
0x0A6C	0x400101  	ADD	W0, W1, W2
0x0A6E	0x21B8A1  	MOV	#lo_addr(_tiempo), W1
0x0A70	0x21A6C0  	MOV	#lo_addr(_x), W0
0x0A72	0x408010  	ADD	W1, [W0], W0
0x0A74	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,315 :: 		for (x = 0; x < 6; x++)
0x0A76	0x200011  	MOV	#1, W1
0x0A78	0x21A6C0  	MOV	#lo_addr(_x), W0
0x0A7A	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,318 :: 		}
0x0A7C	0x37FFF0  	BRA	L_Muestrear30
L_Muestrear31:
;Acelerografo.c,320 :: 		contMuestras = 0; // Limpia el contador de muestras
0x0A7E	0x21A581  	MOV	#lo_addr(_contMuestras), W1
0x0A80	0xEF2000  	CLR	W0
0x0A82	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,321 :: 		contFIFO = 0;     // Limpia el contador de FIFOs
0x0A84	0xEF2000  	CLR	W0
0x0A86	0x88D2D0  	MOV	W0, _contFIFO
;Acelerografo.c,322 :: 		T1CON.TON = 1;    // Enciende el Timer1
0x0A88	0xA8E105  	BSET	T1CON, #15
;Acelerografo.c,324 :: 		banLec = 1; // Activa la bandera de lectura para enviar la trama
0x0A8A	0x21BDF1  	MOV	#lo_addr(_banLec), W1
0x0A8C	0xB3C010  	MOV.B	#1, W0
0x0A8E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,325 :: 		InterrupcionP1(0XB1);
0x0A90	0xB3CB1A  	MOV.B	#177, W10
0x0A92	0x070164  	RCALL	_InterrupcionP1
;Acelerografo.c,327 :: 		LedTest = 0;
0x0A94	0xA98E15  	BCLR	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,328 :: 		}
L_Muestrear16:
L_Muestrear15:
;Acelerografo.c,330 :: 		}
L_end_Muestrear:
0x0A96	0x7806CF  	POP	W13
0x0A98	0x78064F  	POP	W12
0x0A9A	0x7805CF  	POP	W11
0x0A9C	0x78054F  	POP	W10
0x0A9E	0x060000  	RETURN
; end of _Muestrear
_ADXL355_read_byte:
;ADXL355_SPI.c,39 :: 		unsigned char ADXL355_read_byte(unsigned char address){
;ADXL355_SPI.c,40 :: 		unsigned char value = 0x00;
0x092C	0x781F8A  	PUSH	W10
;ADXL355_SPI.c,41 :: 		address=(address<<1)|0x01;
0x092E	0xFB800A  	ZE	W10, W0
0x0930	0xDD0041  	SL	W0, #1, W0
0x0932	0x700061  	IOR	W0, #1, W0
0x0934	0x784500  	MOV.B	W0, W10
;ADXL355_SPI.c,42 :: 		CS_ADXL355=0;
0x0936	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;ADXL355_SPI.c,43 :: 		SPI2_Write(address);
0x0938	0xFB8500  	ZE	W0, W10
0x093A	0x07FE7A  	RCALL	_SPI2_Write
;ADXL355_SPI.c,44 :: 		value=SPI2_Read(0);
0x093C	0xEF2014  	CLR	W10
0x093E	0x07FC70  	RCALL	_SPI2_Read
;ADXL355_SPI.c,45 :: 		CS_ADXL355=1;
0x0940	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;ADXL355_SPI.c,46 :: 		return value;
;ADXL355_SPI.c,47 :: 		}
;ADXL355_SPI.c,46 :: 		return value;
;ADXL355_SPI.c,47 :: 		}
L_end_ADXL355_read_byte:
0x0942	0x78054F  	POP	W10
0x0944	0x060000  	RETURN
; end of _ADXL355_read_byte
_ADXL355_read_FIFO:
0x0CB0	0xFA0002  	LNK	#2
;ADXL355_SPI.c,69 :: 		unsigned int ADXL355_read_FIFO(unsigned char *vectorFIFO){
;ADXL355_SPI.c,72 :: 		CS_ADXL355 = 0;
0x0CB2	0x781F8A  	PUSH	W10
0x0CB4	0xA96E04  	BCLR	LATA3_bit, BitPos(LATA3_bit+0)
;ADXL355_SPI.c,73 :: 		SPI2_Write(add);
0x0CB6	0x781F8A  	PUSH	W10
0x0CB8	0x20023A  	MOV	#35, W10
0x0CBA	0x07FCBA  	RCALL	_SPI2_Write
0x0CBC	0x78054F  	POP	W10
;ADXL355_SPI.c,75 :: 		vectorFIFO[0] = SPI2_Read(0);
0x0CBE	0x78000A  	MOV	W10, W0
0x0CC0	0x980700  	MOV	W0, [W14+0]
0x0CC2	0x781F8A  	PUSH	W10
0x0CC4	0xEF2014  	CLR	W10
0x0CC6	0x07FAAC  	RCALL	_SPI2_Read
0x0CC8	0x78054F  	POP	W10
0x0CCA	0x90008E  	MOV	[W14+0], W1
0x0CCC	0x784880  	MOV.B	W0, [W1]
;ADXL355_SPI.c,76 :: 		vectorFIFO[1] = SPI2_Read(1);
0x0CCE	0x450061  	ADD	W10, #1, W0
0x0CD0	0x980700  	MOV	W0, [W14+0]
0x0CD2	0x781F8A  	PUSH	W10
0x0CD4	0x20001A  	MOV	#1, W10
0x0CD6	0x07FAA4  	RCALL	_SPI2_Read
0x0CD8	0x78054F  	POP	W10
0x0CDA	0x90008E  	MOV	[W14+0], W1
0x0CDC	0x784880  	MOV.B	W0, [W1]
;ADXL355_SPI.c,77 :: 		vectorFIFO[2] = SPI2_Read(2);
0x0CDE	0x450062  	ADD	W10, #2, W0
0x0CE0	0x980700  	MOV	W0, [W14+0]
0x0CE2	0x781F8A  	PUSH	W10
0x0CE4	0x20002A  	MOV	#2, W10
0x0CE6	0x07FA9C  	RCALL	_SPI2_Read
0x0CE8	0x78054F  	POP	W10
0x0CEA	0x90008E  	MOV	[W14+0], W1
0x0CEC	0x784880  	MOV.B	W0, [W1]
;ADXL355_SPI.c,79 :: 		vectorFIFO[3] = SPI2_Read(0);
0x0CEE	0x450063  	ADD	W10, #3, W0
0x0CF0	0x980700  	MOV	W0, [W14+0]
0x0CF2	0x781F8A  	PUSH	W10
0x0CF4	0xEF2014  	CLR	W10
0x0CF6	0x07FA94  	RCALL	_SPI2_Read
0x0CF8	0x78054F  	POP	W10
0x0CFA	0x90008E  	MOV	[W14+0], W1
0x0CFC	0x784880  	MOV.B	W0, [W1]
;ADXL355_SPI.c,80 :: 		vectorFIFO[4] = SPI2_Read(1);
0x0CFE	0x450064  	ADD	W10, #4, W0
0x0D00	0x980700  	MOV	W0, [W14+0]
0x0D02	0x781F8A  	PUSH	W10
0x0D04	0x20001A  	MOV	#1, W10
0x0D06	0x07FA8C  	RCALL	_SPI2_Read
0x0D08	0x78054F  	POP	W10
0x0D0A	0x90008E  	MOV	[W14+0], W1
0x0D0C	0x784880  	MOV.B	W0, [W1]
;ADXL355_SPI.c,81 :: 		vectorFIFO[5] = SPI2_Read(2);
0x0D0E	0x450065  	ADD	W10, #5, W0
0x0D10	0x980700  	MOV	W0, [W14+0]
0x0D12	0x781F8A  	PUSH	W10
0x0D14	0x20002A  	MOV	#2, W10
0x0D16	0x07FA84  	RCALL	_SPI2_Read
0x0D18	0x78054F  	POP	W10
0x0D1A	0x90008E  	MOV	[W14+0], W1
0x0D1C	0x784880  	MOV.B	W0, [W1]
;ADXL355_SPI.c,83 :: 		vectorFIFO[6] = SPI2_Read(0);
0x0D1E	0x450066  	ADD	W10, #6, W0
0x0D20	0x980700  	MOV	W0, [W14+0]
0x0D22	0x781F8A  	PUSH	W10
0x0D24	0xEF2014  	CLR	W10
0x0D26	0x07FA7C  	RCALL	_SPI2_Read
0x0D28	0x78054F  	POP	W10
0x0D2A	0x90008E  	MOV	[W14+0], W1
0x0D2C	0x784880  	MOV.B	W0, [W1]
;ADXL355_SPI.c,84 :: 		vectorFIFO[7] = SPI2_Read(1);
0x0D2E	0x450067  	ADD	W10, #7, W0
0x0D30	0x980700  	MOV	W0, [W14+0]
0x0D32	0x781F8A  	PUSH	W10
0x0D34	0x20001A  	MOV	#1, W10
0x0D36	0x07FA74  	RCALL	_SPI2_Read
0x0D38	0x78054F  	POP	W10
0x0D3A	0x90008E  	MOV	[W14+0], W1
0x0D3C	0x784880  	MOV.B	W0, [W1]
;ADXL355_SPI.c,85 :: 		vectorFIFO[8] = SPI2_Read(2);
0x0D3E	0x450068  	ADD	W10, #8, W0
0x0D40	0x980700  	MOV	W0, [W14+0]
0x0D42	0x20002A  	MOV	#2, W10
0x0D44	0x07FA6D  	RCALL	_SPI2_Read
0x0D46	0x90008E  	MOV	[W14+0], W1
0x0D48	0x784880  	MOV.B	W0, [W1]
;ADXL355_SPI.c,86 :: 		CS_ADXL355 = 1;
0x0D4A	0xA86E04  	BSET	LATA3_bit, BitPos(LATA3_bit+0)
;ADXL355_SPI.c,87 :: 		Delay_us(5);
0x0D4C	0x200287  	MOV	#40, W7
L_ADXL355_read_FIFO16:
0x0D4E	0xED200E  	DEC	W7
0x0D50	0x3AFFFE  	BRA NZ	L_ADXL355_read_FIFO16
0x0D52	0x000000  	NOP
0x0D54	0x000000  	NOP
;ADXL355_SPI.c,89 :: 		}
;ADXL355_SPI.c,88 :: 		return;
;ADXL355_SPI.c,89 :: 		}
L_end_ADXL355_read_FIFO:
0x0D56	0x78054F  	POP	W10
0x0D58	0xFA8000  	ULNK
0x0D5A	0x060000  	RETURN
; end of _ADXL355_read_FIFO
_AjustarTiempoSistema:
0x0E5E	0xFA000E  	LNK	#14
;TIEMPO_RTC.c,236 :: 		void AjustarTiempoSistema(unsigned long longHora, unsigned long longFecha, unsigned char *tramaTiempoSistema){
0x0E60	0x97B84E  	MOV	[W14-8], W0
0x0E62	0x9FBF40  	MOV	W0, [W14-8]
;TIEMPO_RTC.c,245 :: 		hora = (char)(longHora / 3600);
0x0E64	0xBE9F8C  	PUSH.D	W12
0x0E66	0xBE9F8A  	PUSH.D	W10
0x0E68	0x20E102  	MOV	#3600, W2
0x0E6A	0x200003  	MOV	#0, W3
0x0E6C	0xBE000A  	MOV.D	W10, W0
0x0E6E	0xEB0200  	CLR	W4
0x0E70	0x07FB61  	RCALL	__Divide_32x32
0x0E72	0xBE054F  	POP.D	W10
0x0E74	0x984700  	MOV.B	W0, [W14+0]
;TIEMPO_RTC.c,246 :: 		minuto = (char)((longHora%3600) / 60);
0x0E76	0x20E102  	MOV	#3600, W2
0x0E78	0x200003  	MOV	#0, W3
0x0E7A	0xBE000A  	MOV.D	W10, W0
0x0E7C	0xEB0200  	CLR	W4
0x0E7E	0x07FB83  	RCALL	__Modulus_32x32
0x0E80	0x980750  	MOV	W0, [W14+10]
0x0E82	0x980761  	MOV	W1, [W14+12]
0x0E84	0x2003C2  	MOV	#60, W2
0x0E86	0x200003  	MOV	#0, W3
0x0E88	0xEB0200  	CLR	W4
0x0E8A	0x07FB54  	RCALL	__Divide_32x32
0x0E8C	0x984710  	MOV.B	W0, [W14+1]
;TIEMPO_RTC.c,247 :: 		segundo = (char)((longHora%3600) % 60);
0x0E8E	0x90005E  	MOV	[W14+10], W0
0x0E90	0x9000EE  	MOV	[W14+12], W1
0x0E92	0x2003C2  	MOV	#60, W2
0x0E94	0x200003  	MOV	#0, W3
0x0E96	0xEB0200  	CLR	W4
0x0E98	0x07FB76  	RCALL	__Modulus_32x32
0x0E9A	0xBE064F  	POP.D	W12
0x0E9C	0x984720  	MOV.B	W0, [W14+2]
;TIEMPO_RTC.c,249 :: 		anio = (char)(longFecha / 10000);
0x0E9E	0xBE9F8C  	PUSH.D	W12
0x0EA0	0x227102  	MOV	#10000, W2
0x0EA2	0x200003  	MOV	#0, W3
0x0EA4	0xBE000C  	MOV.D	W12, W0
0x0EA6	0xEB0200  	CLR	W4
0x0EA8	0x07FB45  	RCALL	__Divide_32x32
0x0EAA	0xBE064F  	POP.D	W12
0x0EAC	0x984740  	MOV.B	W0, [W14+4]
;TIEMPO_RTC.c,250 :: 		mes = (char)((longFecha%10000) / 100);
0x0EAE	0x227102  	MOV	#10000, W2
0x0EB0	0x200003  	MOV	#0, W3
0x0EB2	0xBE000C  	MOV.D	W12, W0
0x0EB4	0xEB0200  	CLR	W4
0x0EB6	0x07FB67  	RCALL	__Modulus_32x32
0x0EB8	0x980750  	MOV	W0, [W14+10]
0x0EBA	0x980761  	MOV	W1, [W14+12]
0x0EBC	0x200642  	MOV	#100, W2
0x0EBE	0x200003  	MOV	#0, W3
0x0EC0	0xEB0200  	CLR	W4
0x0EC2	0x07FB38  	RCALL	__Divide_32x32
0x0EC4	0x984730  	MOV.B	W0, [W14+3]
;TIEMPO_RTC.c,251 :: 		dia = (char)((longFecha%10000) % 100);
0x0EC6	0x90005E  	MOV	[W14+10], W0
0x0EC8	0x9000EE  	MOV	[W14+12], W1
0x0ECA	0x200642  	MOV	#100, W2
0x0ECC	0x200003  	MOV	#0, W3
0x0ECE	0xEB0200  	CLR	W4
0x0ED0	0x07FB5A  	RCALL	__Modulus_32x32
; dia start address is: 4 (W2)
0x0ED2	0x784100  	MOV.B	W0, W2
;TIEMPO_RTC.c,253 :: 		tramaTiempoSistema[0] = anio;
0x0ED4	0x97B8CE  	MOV	[W14-8], W1
0x0ED6	0x90404E  	MOV.B	[W14+4], W0
0x0ED8	0x784880  	MOV.B	W0, [W1]
;TIEMPO_RTC.c,254 :: 		tramaTiempoSistema[1] = mes;
0x0EDA	0x97B84E  	MOV	[W14-8], W0
0x0EDC	0x4000E1  	ADD	W0, #1, W1
0x0EDE	0x90403E  	MOV.B	[W14+3], W0
0x0EE0	0x784880  	MOV.B	W0, [W1]
;TIEMPO_RTC.c,255 :: 		tramaTiempoSistema[2] = dia;
0x0EE2	0x97B84E  	MOV	[W14-8], W0
0x0EE4	0xECA000  	INC2	W0
0x0EE6	0x784802  	MOV.B	W2, [W0]
; dia end address is: 4 (W2)
;TIEMPO_RTC.c,256 :: 		tramaTiempoSistema[3] = hora;
0x0EE8	0x97B84E  	MOV	[W14-8], W0
0x0EEA	0x4000E3  	ADD	W0, #3, W1
0x0EEC	0x90400E  	MOV.B	[W14+0], W0
0x0EEE	0x784880  	MOV.B	W0, [W1]
;TIEMPO_RTC.c,257 :: 		tramaTiempoSistema[4] = minuto;
0x0EF0	0x97B84E  	MOV	[W14-8], W0
0x0EF2	0x4000E4  	ADD	W0, #4, W1
0x0EF4	0x90401E  	MOV.B	[W14+1], W0
0x0EF6	0x784880  	MOV.B	W0, [W1]
;TIEMPO_RTC.c,258 :: 		tramaTiempoSistema[5] = segundo;
0x0EF8	0x97B84E  	MOV	[W14-8], W0
0x0EFA	0x4000E5  	ADD	W0, #5, W1
0x0EFC	0x90402E  	MOV.B	[W14+2], W0
0x0EFE	0x784880  	MOV.B	W0, [W1]
;TIEMPO_RTC.c,260 :: 		}
L_end_AjustarTiempoSistema:
0x0F00	0xFA8000  	ULNK
0x0F02	0x060000  	RETURN
; end of _AjustarTiempoSistema
_InterrupcionP1:
;Acelerografo.c,257 :: 		void InterrupcionP1(unsigned char operacion)
;Acelerografo.c,259 :: 		banOperacion = 0;          // Encera la bandera para permitir una nueva peticion de operacion
0x0D5C	0x21BE51  	MOV	#lo_addr(_banOperacion), W1
0x0D5E	0xEF2000  	CLR	W0
0x0D60	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,260 :: 		tipoOperacion = operacion; // Carga en la variable el tipo de operacion requerido
0x0D62	0x21BE40  	MOV	#lo_addr(_tipoOperacion), W0
0x0D64	0x78480A  	MOV.B	W10, [W0]
;Acelerografo.c,262 :: 		RP1 = 1;
0x0D66	0xA88E04  	BSET	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,263 :: 		Delay_us(20);
0x0D68	0x200A07  	MOV	#160, W7
L_InterrupcionP112:
0x0D6A	0xED200E  	DEC	W7
0x0D6C	0x3AFFFE  	BRA NZ	L_InterrupcionP112
0x0D6E	0x000000  	NOP
0x0D70	0x000000  	NOP
;Acelerografo.c,264 :: 		RP1 = 0;
0x0D72	0xA98E04  	BCLR	LATA4_bit, BitPos(LATA4_bit+0)
;Acelerografo.c,265 :: 		}
L_end_InterrupcionP1:
0x0D74	0x060000  	RETURN
; end of _InterrupcionP1
_urx_1:
0x15C8	0xF80034  	PUSH	DSWPAG
0x15CA	0xF80032  	PUSH	DSRPAG
0x15CC	0xF80036  	PUSH	RCOUNT
0x15CE	0x781F80  	PUSH	W0
0x15D0	0x200020  	MOV	#2, W0
0x15D2	0x09000C  	REPEAT	#12
0x15D4	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,681 :: 		void urx_1() org IVT_ADDR_U1RXINTERRUPT
;Acelerografo.c,684 :: 		byteGPS = U1RXREG; // Lee el byte de la trama enviada por el GPS
0x15D6	0x781F8A  	PUSH	W10
0x15D8	0x781F8B  	PUSH	W11
0x15DA	0x781F8C  	PUSH	W12
0x15DC	0x781F8D  	PUSH	W13
0x15DE	0x21A5E1  	MOV	#lo_addr(_byteGPS), W1
0x15E0	0xBFC226  	MOV.B	U1RXREG, WREG
0x15E2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,685 :: 		U1STA.OERR = 0;    // Limpia este bit para limpiar el FIFO UART1
0x15E4	0xA92222  	BCLR	U1STA, #1
;Acelerografo.c,688 :: 		if (banGPSI == 3)
0x15E6	0x21A650  	MOV	#lo_addr(_banGPSI), W0
0x15E8	0x784010  	MOV.B	[W0], W0
0x15EA	0xE10463  	CP.B	W0, #3
0x15EC	0x3A0014  	BRA NZ	L_urx_1122
L__urx_1304:
;Acelerografo.c,690 :: 		if (byteGPS != 0x2A)
0x15EE	0x21A5E0  	MOV	#lo_addr(_byteGPS), W0
0x15F0	0x784090  	MOV.B	[W0], W1
0x15F2	0xB3C2A0  	MOV.B	#42, W0
0x15F4	0xE10C00  	CP.B	W1, W0
0x15F6	0x320009  	BRA Z	L_urx_1123
L__urx_1305:
;Acelerografo.c,692 :: 		tramaGPS[i_gps] = byteGPS; // LLena la tramaGPS hasta recibir el ultimo simbolo ("*") de la trama GPS
0x15F8	0x21B901  	MOV	#lo_addr(_tramaGPS), W1
0x15FA	0x21A720  	MOV	#lo_addr(_i_gps), W0
0x15FC	0x408090  	ADD	W1, [W0], W1
0x15FE	0x21A5E0  	MOV	#lo_addr(_byteGPS), W0
0x1600	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,693 :: 		i_gps++;
0x1602	0x200011  	MOV	#1, W1
0x1604	0x21A720  	MOV	#lo_addr(_i_gps), W0
0x1606	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,694 :: 		}
0x1608	0x370006  	BRA	L_urx_1124
L_urx_1123:
;Acelerografo.c,697 :: 		banGPSI = 0; // Limpia la bandera de inicio de trama
0x160A	0x21A651  	MOV	#lo_addr(_banGPSI), W1
0x160C	0xEF2000  	CLR	W0
0x160E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,698 :: 		banGPSC = 1; // Activa la bandera de trama completa
0x1610	0x21A671  	MOV	#lo_addr(_banGPSC), W1
0x1612	0xB3C010  	MOV.B	#1, W0
0x1614	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,699 :: 		}
L_urx_1124:
;Acelerografo.c,700 :: 		}
L_urx_1122:
;Acelerografo.c,703 :: 		if ((banGPSI == 1))
0x1616	0x21A650  	MOV	#lo_addr(_banGPSI), W0
0x1618	0x784010  	MOV.B	[W0], W0
0x161A	0xE10461  	CP.B	W0, #1
0x161C	0x3A000A  	BRA NZ	L_urx_1125
L__urx_1306:
;Acelerografo.c,705 :: 		if (byteGPS == 0x24)
0x161E	0x21A5E0  	MOV	#lo_addr(_byteGPS), W0
0x1620	0x784090  	MOV.B	[W0], W1
0x1622	0xB3C240  	MOV.B	#36, W0
0x1624	0xE10C00  	CP.B	W1, W0
0x1626	0x3A0005  	BRA NZ	L_urx_1126
L__urx_1307:
;Acelerografo.c,707 :: 		banGPSI = 2;
0x1628	0x21A651  	MOV	#lo_addr(_banGPSI), W1
0x162A	0xB3C020  	MOV.B	#2, W0
0x162C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,708 :: 		i_gps = 0;
0x162E	0xEF2000  	CLR	W0
0x1630	0x88D390  	MOV	W0, _i_gps
;Acelerografo.c,709 :: 		}
L_urx_1126:
;Acelerografo.c,710 :: 		}
L_urx_1125:
;Acelerografo.c,711 :: 		if ((banGPSI == 2) && (i_gps < 6))
0x1632	0x21A650  	MOV	#lo_addr(_banGPSI), W0
0x1634	0x784010  	MOV.B	[W0], W0
0x1636	0xE10462  	CP.B	W0, #2
0x1638	0x3A000B  	BRA NZ	L__urx_1221
L__urx_1308:
0x163A	0x80D390  	MOV	_i_gps, W0
0x163C	0xE10066  	CP	W0, #6
0x163E	0x310008  	BRA GEU	L__urx_1220
L__urx_1309:
L__urx_1219:
;Acelerografo.c,713 :: 		tramaGPS[i_gps] = byteGPS; // Recupera los datos de cabecera de la trama GPS: ["$", "G", "P", "R", "M", "C"]
0x1640	0x21B901  	MOV	#lo_addr(_tramaGPS), W1
0x1642	0x21A720  	MOV	#lo_addr(_i_gps), W0
0x1644	0x408090  	ADD	W1, [W0], W1
0x1646	0x21A5E0  	MOV	#lo_addr(_byteGPS), W0
0x1648	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,714 :: 		i_gps++;
0x164A	0x200011  	MOV	#1, W1
0x164C	0x21A720  	MOV	#lo_addr(_i_gps), W0
0x164E	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,711 :: 		if ((banGPSI == 2) && (i_gps < 6))
L__urx_1221:
L__urx_1220:
;Acelerografo.c,716 :: 		if ((banGPSI == 2) && (i_gps == 6))
0x1650	0x21A650  	MOV	#lo_addr(_banGPSI), W0
0x1652	0x784010  	MOV.B	[W0], W0
0x1654	0xE10462  	CP.B	W0, #2
0x1656	0x3A004A  	BRA NZ	L__urx_1228
L__urx_1310:
0x1658	0x80D390  	MOV	_i_gps, W0
0x165A	0xE10066  	CP	W0, #6
0x165C	0x3A0047  	BRA NZ	L__urx_1227
L__urx_1311:
L__urx_1218:
;Acelerografo.c,719 :: 		T2CON.TON = 0;
0x165E	0xA9E111  	BCLR	T2CON, #15
;Acelerografo.c,720 :: 		TMR2 = 0;
0x1660	0xEF2106  	CLR	TMR2
;Acelerografo.c,722 :: 		if (tramaGPS[1] == 'G' && tramaGPS[2] == 'P' && tramaGPS[3] == 'R' && tramaGPS[4] == 'M' && tramaGPS[5] == 'C')
0x1662	0x21B910  	MOV	#lo_addr(_tramaGPS+1), W0
0x1664	0x784090  	MOV.B	[W0], W1
0x1666	0xB3C470  	MOV.B	#71, W0
0x1668	0xE10C00  	CP.B	W1, W0
0x166A	0x3A001A  	BRA NZ	L__urx_1226
L__urx_1312:
0x166C	0x21B920  	MOV	#lo_addr(_tramaGPS+2), W0
0x166E	0x784090  	MOV.B	[W0], W1
0x1670	0xB3C500  	MOV.B	#80, W0
0x1672	0xE10C00  	CP.B	W1, W0
0x1674	0x3A0015  	BRA NZ	L__urx_1225
L__urx_1313:
0x1676	0x21B930  	MOV	#lo_addr(_tramaGPS+3), W0
0x1678	0x784090  	MOV.B	[W0], W1
0x167A	0xB3C520  	MOV.B	#82, W0
0x167C	0xE10C00  	CP.B	W1, W0
0x167E	0x3A0010  	BRA NZ	L__urx_1224
L__urx_1314:
0x1680	0x21B940  	MOV	#lo_addr(_tramaGPS+4), W0
0x1682	0x784090  	MOV.B	[W0], W1
0x1684	0xB3C4D0  	MOV.B	#77, W0
0x1686	0xE10C00  	CP.B	W1, W0
0x1688	0x3A000B  	BRA NZ	L__urx_1223
L__urx_1315:
0x168A	0x21B950  	MOV	#lo_addr(_tramaGPS+5), W0
0x168C	0x784090  	MOV.B	[W0], W1
0x168E	0xB3C430  	MOV.B	#67, W0
0x1690	0xE10C00  	CP.B	W1, W0
0x1692	0x3A0006  	BRA NZ	L__urx_1222
L__urx_1316:
L__urx_1217:
;Acelerografo.c,724 :: 		banGPSI = 3;
0x1694	0x21A651  	MOV	#lo_addr(_banGPSI), W1
0x1696	0xB3C030  	MOV.B	#3, W0
0x1698	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,725 :: 		i_gps = 0;
0x169A	0xEF2000  	CLR	W0
0x169C	0x88D390  	MOV	W0, _i_gps
;Acelerografo.c,726 :: 		}
0x169E	0x370026  	BRA	L_urx_1136
;Acelerografo.c,722 :: 		if (tramaGPS[1] == 'G' && tramaGPS[2] == 'P' && tramaGPS[3] == 'R' && tramaGPS[4] == 'M' && tramaGPS[5] == 'C')
L__urx_1226:
L__urx_1225:
L__urx_1224:
L__urx_1223:
L__urx_1222:
;Acelerografo.c,729 :: 		banGPSI = 0;
0x16A0	0x21A651  	MOV	#lo_addr(_banGPSI), W1
0x16A2	0xEF2000  	CLR	W0
0x16A4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,730 :: 		banGPSC = 0;
0x16A6	0x21A671  	MOV	#lo_addr(_banGPSC), W1
0x16A8	0xEF2000  	CLR	W0
0x16AA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,731 :: 		i_gps = 0;
0x16AC	0xEF2000  	CLR	W0
0x16AE	0x88D390  	MOV	W0, _i_gps
;Acelerografo.c,733 :: 		horaSistema = RecuperarHoraRTC();                        // Recupera la hora del RTC
0x16B0	0x07F901  	RCALL	_RecuperarHoraRTC
0x16B2	0x88D370  	MOV	W0, _horaSistema
0x16B4	0x88D381  	MOV	W1, _horaSistema+2
;Acelerografo.c,734 :: 		fechaSistema = RecuperarFechaRTC();                      // Recupera la fecha del RTC
0x16B6	0x07F811  	RCALL	_RecuperarFechaRTC
0x16B8	0x88D3C0  	MOV	W0, _fechaSistema
0x16BA	0x88D3D1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,735 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo); // Actualiza los datos de la trama tiempo con la hora y fecha recuperadas del RTC
0x16BC	0xBE0600  	MOV.D	W0, W12
0x16BE	0x80D37A  	MOV	_horaSistema, W10
0x16C0	0x80D38B  	MOV	_horaSistema+2, W11
0x16C2	0x21B8A0  	MOV	#lo_addr(_tiempo), W0
0x16C4	0x781F80  	PUSH	W0
0x16C6	0x07FBCB  	RCALL	_AjustarTiempoSistema
0x16C8	0xB1002F  	SUB	#2, W15
;Acelerografo.c,736 :: 		fuenteReloj = 4;                                         // Fuente reloj: RTC/E4
0x16CA	0x21A611  	MOV	#lo_addr(_fuenteReloj), W1
0x16CC	0xB3C040  	MOV.B	#4, W0
0x16CE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,737 :: 		banSetReloj = 1;
0x16D0	0x21B871  	MOV	#lo_addr(_banSetReloj), W1
0x16D2	0xB3C010  	MOV.B	#1, W0
0x16D4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,738 :: 		InterrupcionP1(0xB2); // Envia la hora local a la RPi y a los nodos                                                   //Envia la hora local a la RPi
0x16D6	0xB3CB2A  	MOV.B	#178, W10
0x16D8	0x07FB41  	RCALL	_InterrupcionP1
;Acelerografo.c,739 :: 		banGPSI = 0;
0x16DA	0x21A651  	MOV	#lo_addr(_banGPSI), W1
0x16DC	0xEF2000  	CLR	W0
0x16DE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,740 :: 		banGPSC = 0;
0x16E0	0x21A671  	MOV	#lo_addr(_banGPSC), W1
0x16E2	0xEF2000  	CLR	W0
0x16E4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,741 :: 		i_gps = 0;
0x16E6	0xEF2000  	CLR	W0
0x16E8	0x88D390  	MOV	W0, _i_gps
;Acelerografo.c,742 :: 		U1MODE.UARTEN = 0; // Desactiva el UART1
0x16EA	0xA9E221  	BCLR	U1MODE, #15
;Acelerografo.c,743 :: 		}
L_urx_1136:
;Acelerografo.c,716 :: 		if ((banGPSI == 2) && (i_gps == 6))
L__urx_1228:
L__urx_1227:
;Acelerografo.c,747 :: 		if (banGPSC == 1)
0x16EC	0x21A670  	MOV	#lo_addr(_banGPSC), W0
0x16EE	0x784010  	MOV.B	[W0], W0
0x16F0	0xE10461  	CP.B	W0, #1
0x16F2	0x3A0068  	BRA NZ	L_urx_1137
L__urx_1317:
;Acelerografo.c,750 :: 		for (x = 0; x < 6; x++)
0x16F4	0xEF2000  	CLR	W0
0x16F6	0x88D360  	MOV	W0, _x
L_urx_1138:
0x16F8	0x80D360  	MOV	_x, W0
0x16FA	0xE10066  	CP	W0, #6
0x16FC	0x31000C  	BRA GEU	L_urx_1139
L__urx_1318:
;Acelerografo.c,752 :: 		datosGPS[x] = tramaGPS[x + 1]; // Guarda los datos de hhmmss
0x16FE	0x21B741  	MOV	#lo_addr(_datosGPS), W1
0x1700	0x21A6C0  	MOV	#lo_addr(_x), W0
0x1702	0x408110  	ADD	W1, [W0], W2
0x1704	0x80D360  	MOV	_x, W0
0x1706	0x4000E1  	ADD	W0, #1, W1
0x1708	0x21B900  	MOV	#lo_addr(_tramaGPS), W0
0x170A	0x400001  	ADD	W0, W1, W0
0x170C	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,750 :: 		for (x = 0; x < 6; x++)
0x170E	0x200011  	MOV	#1, W1
0x1710	0x21A6C0  	MOV	#lo_addr(_x), W0
0x1712	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,753 :: 		}
0x1714	0x37FFF1  	BRA	L_urx_1138
L_urx_1139:
;Acelerografo.c,755 :: 		for (x = 44; x < 54; x++)
0x1716	0x2002C0  	MOV	#44, W0
0x1718	0x88D360  	MOV	W0, _x
L_urx_1141:
0x171A	0x200361  	MOV	#54, W1
0x171C	0x21A6C0  	MOV	#lo_addr(_x), W0
0x171E	0xE10810  	CP	W1, [W0]
0x1720	0x36001F  	BRA LEU	L_urx_1142
L__urx_1319:
;Acelerografo.c,757 :: 		if (tramaGPS[x] == 0x2C)
0x1722	0x21B901  	MOV	#lo_addr(_tramaGPS), W1
0x1724	0x21A6C0  	MOV	#lo_addr(_x), W0
0x1726	0x408010  	ADD	W1, [W0], W0
0x1728	0x784090  	MOV.B	[W0], W1
0x172A	0xB3C2C0  	MOV.B	#44, W0
0x172C	0xE10C00  	CP.B	W1, W0
0x172E	0x3A0014  	BRA NZ	L_urx_1144
L__urx_1320:
;Acelerografo.c,759 :: 		for (y = 0; y < 6; y++)
0x1730	0xEF2000  	CLR	W0
0x1732	0x88D350  	MOV	W0, _y
L_urx_1145:
0x1734	0x80D350  	MOV	_y, W0
0x1736	0xE10066  	CP	W0, #6
0x1738	0x31000F  	BRA GEU	L_urx_1146
L__urx_1321:
;Acelerografo.c,761 :: 		datosGPS[6 + y] = tramaGPS[x + y + 1]; // Guarda los datos de DDMMAA en la trama datosGPS
0x173A	0x80D350  	MOV	_y, W0
0x173C	0x4000E6  	ADD	W0, #6, W1
0x173E	0x21B740  	MOV	#lo_addr(_datosGPS), W0
0x1740	0x400101  	ADD	W0, W1, W2
0x1742	0x80D361  	MOV	_x, W1
0x1744	0x21A6A0  	MOV	#lo_addr(_y), W0
0x1746	0x408010  	ADD	W1, [W0], W0
0x1748	0x4000E1  	ADD	W0, #1, W1
0x174A	0x21B900  	MOV	#lo_addr(_tramaGPS), W0
0x174C	0x400001  	ADD	W0, W1, W0
0x174E	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,759 :: 		for (y = 0; y < 6; y++)
0x1750	0x200011  	MOV	#1, W1
0x1752	0x21A6A0  	MOV	#lo_addr(_y), W0
0x1754	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,762 :: 		}
0x1756	0x37FFEE  	BRA	L_urx_1145
L_urx_1146:
;Acelerografo.c,763 :: 		}
L_urx_1144:
;Acelerografo.c,755 :: 		for (x = 44; x < 54; x++)
0x1758	0x200011  	MOV	#1, W1
0x175A	0x21A6C0  	MOV	#lo_addr(_x), W0
0x175C	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,764 :: 		}
0x175E	0x37FFDD  	BRA	L_urx_1141
L_urx_1142:
;Acelerografo.c,765 :: 		horaSistema = RecuperarHoraGPS(datosGPS);                // Recupera la hora del GPS
0x1760	0x21B74A  	MOV	#lo_addr(_datosGPS), W10
0x1762	0x07F851  	RCALL	_RecuperarHoraGPS
0x1764	0x88D370  	MOV	W0, _horaSistema
0x1766	0x88D381  	MOV	W1, _horaSistema+2
;Acelerografo.c,766 :: 		fechaSistema = RecuperarFechaGPS(datosGPS);              // Recupera la fecha del GPS
0x1768	0x21B74A  	MOV	#lo_addr(_datosGPS), W10
0x176A	0x07F7F5  	RCALL	_RecuperarFechaGPS
0x176C	0x88D3C0  	MOV	W0, _fechaSistema
0x176E	0x88D3D1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,767 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo); // Actualiza los datos de la trama tiempo con la hora y fecha recuperadas del gps
0x1770	0xBE0600  	MOV.D	W0, W12
0x1772	0x80D37A  	MOV	_horaSistema, W10
0x1774	0x80D38B  	MOV	_horaSistema+2, W11
0x1776	0x21B8A0  	MOV	#lo_addr(_tiempo), W0
0x1778	0x781F80  	PUSH	W0
0x177A	0x07FB71  	RCALL	_AjustarTiempoSistema
0x177C	0xB1002F  	SUB	#2, W15
;Acelerografo.c,770 :: 		if (tramaGPS[12] == 0x41)
0x177E	0x21B9C0  	MOV	#lo_addr(_tramaGPS+12), W0
0x1780	0x784090  	MOV.B	[W0], W1
0x1782	0xB3C410  	MOV.B	#65, W0
0x1784	0xE10C00  	CP.B	W1, W0
0x1786	0x3A000A  	BRA NZ	L_urx_1148
L__urx_1322:
;Acelerografo.c,772 :: 		fuenteReloj = 1; // Fuente reloj: GPS
0x1788	0x21A611  	MOV	#lo_addr(_fuenteReloj), W1
0x178A	0xB3C010  	MOV.B	#1, W0
0x178C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,773 :: 		banSyncReloj = 1;
0x178E	0x21A641  	MOV	#lo_addr(_banSyncReloj), W1
0x1790	0xB3C010  	MOV.B	#1, W0
0x1792	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,774 :: 		banSetReloj = 0;
0x1794	0x21B871  	MOV	#lo_addr(_banSetReloj), W1
0x1796	0xEF2000  	CLR	W0
0x1798	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,775 :: 		}
0x179A	0x37000B  	BRA	L_urx_1149
L_urx_1148:
;Acelerografo.c,778 :: 		fuenteReloj = 3; // Fuente reloj: GPS/E3
0x179C	0x21A611  	MOV	#lo_addr(_fuenteReloj), W1
0x179E	0xB3C030  	MOV.B	#3, W0
0x17A0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,779 :: 		banSyncReloj = 0;
0x17A2	0x21A641  	MOV	#lo_addr(_banSyncReloj), W1
0x17A4	0xEF2000  	CLR	W0
0x17A6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,780 :: 		banSetReloj = 1;
0x17A8	0x21B871  	MOV	#lo_addr(_banSetReloj), W1
0x17AA	0xB3C010  	MOV.B	#1, W0
0x17AC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,781 :: 		InterrupcionP1(0xB2); // Envia la hora local a la RPi
0x17AE	0xB3CB2A  	MOV.B	#178, W10
0x17B0	0x07FAD5  	RCALL	_InterrupcionP1
;Acelerografo.c,782 :: 		}
L_urx_1149:
;Acelerografo.c,783 :: 		banGPSI = 0;
0x17B2	0x21A651  	MOV	#lo_addr(_banGPSI), W1
0x17B4	0xEF2000  	CLR	W0
0x17B6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,784 :: 		banGPSC = 0;
0x17B8	0x21A671  	MOV	#lo_addr(_banGPSC), W1
0x17BA	0xEF2000  	CLR	W0
0x17BC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,785 :: 		i_gps = 0;
0x17BE	0xEF2000  	CLR	W0
0x17C0	0x88D390  	MOV	W0, _i_gps
;Acelerografo.c,786 :: 		U1MODE.UARTEN = 0; // Desactiva el UART1
0x17C2	0xA9E221  	BCLR	U1MODE, #15
;Acelerografo.c,787 :: 		}
L_urx_1137:
;Acelerografo.c,790 :: 		U1RXIF_bit = 0;
0x17C4	0xA96801  	BCLR	U1RXIF_bit, BitPos(U1RXIF_bit+0)
;Acelerografo.c,791 :: 		}
L_end_urx_1:
0x17C6	0x7806CF  	POP	W13
0x17C8	0x78064F  	POP	W12
0x17CA	0x7805CF  	POP	W11
0x17CC	0x78054F  	POP	W10
0x17CE	0x2001A0  	MOV	#26, W0
0x17D0	0x09000C  	REPEAT	#12
0x17D2	0x78104F  	POP	[W0--]
0x17D4	0x78004F  	POP	W0
0x17D6	0xF90036  	POP	RCOUNT
0x17D8	0xF90032  	POP	DSRPAG
0x17DA	0xF90034  	POP	DSWPAG
0x17DC	0x064000  	RETFIE
; end of _urx_1
_RecuperarHoraRTC:
0x08B4	0xFA0004  	LNK	#4
;TIEMPO_RTC.c,111 :: 		unsigned long RecuperarHoraRTC(){
;TIEMPO_RTC.c,119 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x08B6	0x781F8A  	PUSH	W10
0x08B8	0x781F8B  	PUSH	W11
0x08BA	0x781F8C  	PUSH	W12
0x08BC	0x781F8D  	PUSH	W13
0x08BE	0xEF201A  	CLR	W13
0x08C0	0x2001CC  	MOV	#28, W12
0x08C2	0xEF2016  	CLR	W11
0x08C4	0x20020A  	MOV	#32, W10
0x08C6	0xEF2000  	CLR	W0
0x08C8	0x781F80  	PUSH	W0
0x08CA	0xEF2000  	CLR	W0
0x08CC	0x781F80  	PUSH	W0
0x08CE	0xEF2000  	CLR	W0
0x08D0	0x781F80  	PUSH	W0
0x08D2	0xEF2000  	CLR	W0
0x08D4	0x781F80  	PUSH	W0
0x08D6	0x07FE8C  	RCALL	_SPI2_Init_Advanced
0x08D8	0xB1008F  	SUB	#8, W15
;TIEMPO_RTC.c,121 :: 		valueRead = DS3234_read_byte(Segundos_Lec);
0x08DA	0xEF2014  	CLR	W10
0x08DC	0x07FD8D  	RCALL	_DS3234_read_byte
;TIEMPO_RTC.c,122 :: 		valueRead = Bcd2Dec(valueRead);
0x08DE	0x784500  	MOV.B	W0, W10
0x08E0	0x07FD37  	RCALL	_Bcd2Dec
;TIEMPO_RTC.c,123 :: 		segundo = (long)valueRead;
; segundo start address is: 12 (W6)
0x08E2	0xFB8300  	ZE	W0, W6
0x08E4	0xEB0380  	CLR	W7
;TIEMPO_RTC.c,124 :: 		valueRead = DS3234_read_byte(Minutos_Lec);
0x08E6	0xB3C01A  	MOV.B	#1, W10
0x08E8	0x07FD87  	RCALL	_DS3234_read_byte
;TIEMPO_RTC.c,125 :: 		valueRead = Bcd2Dec(valueRead);
0x08EA	0x784500  	MOV.B	W0, W10
0x08EC	0x07FD31  	RCALL	_Bcd2Dec
;TIEMPO_RTC.c,126 :: 		minuto = (long)valueRead;
; minuto start address is: 16 (W8)
0x08EE	0xFB8400  	ZE	W0, W8
0x08F0	0xEB0480  	CLR	W9
;TIEMPO_RTC.c,127 :: 		valueRead = DS3234_read_byte(Horas_Lec);
0x08F2	0xB3C02A  	MOV.B	#2, W10
0x08F4	0x07FD81  	RCALL	_DS3234_read_byte
;TIEMPO_RTC.c,128 :: 		valueRead = Bcd2Dec(valueRead);
0x08F6	0x784500  	MOV.B	W0, W10
0x08F8	0x07FD2B  	RCALL	_Bcd2Dec
;TIEMPO_RTC.c,129 :: 		hora = (long)valueRead;
0x08FA	0xFB8000  	ZE	W0, W0
0x08FC	0xEB0080  	CLR	W1
;TIEMPO_RTC.c,131 :: 		horaRTC = (hora*3600)+(minuto*60)+(segundo);                               //Calcula el segundo actual = hh*3600 + mm*60 + ss
0x08FE	0x20E102  	MOV	#3600, W2
0x0900	0x200003  	MOV	#0, W3
0x0902	0x07FE6D  	RCALL	__Multiply_32x32
0x0904	0x980700  	MOV	W0, [W14+0]
0x0906	0x980711  	MOV	W1, [W14+2]
0x0908	0xBE0008  	MOV.D	W8, W0
0x090A	0x2003C2  	MOV	#60, W2
0x090C	0x200003  	MOV	#0, W3
0x090E	0x07FE67  	RCALL	__Multiply_32x32
; minuto end address is: 16 (W8)
0x0910	0x90010E  	MOV	[W14+0], W2
0x0912	0x90019E  	MOV	[W14+2], W3
0x0914	0x410000  	ADD	W2, W0, W0
0x0916	0x498081  	ADDC	W3, W1, W1
; horaRTC start address is: 4 (W2)
0x0918	0x400106  	ADD	W0, W6, W2
0x091A	0x488187  	ADDC	W1, W7, W3
; segundo end address is: 12 (W6)
;TIEMPO_RTC.c,133 :: 		SPI2_Init();
0x091C	0x07FD76  	RCALL	_SPI2_Init
;TIEMPO_RTC.c,135 :: 		return horaRTC;
0x091E	0xBE0002  	MOV.D	W2, W0
; horaRTC end address is: 4 (W2)
;TIEMPO_RTC.c,137 :: 		}
;TIEMPO_RTC.c,135 :: 		return horaRTC;
;TIEMPO_RTC.c,137 :: 		}
L_end_RecuperarHoraRTC:
0x0920	0x7806CF  	POP	W13
0x0922	0x78064F  	POP	W12
0x0924	0x7805CF  	POP	W11
0x0926	0x78054F  	POP	W10
0x0928	0xFA8000  	ULNK
0x092A	0x060000  	RETURN
; end of _RecuperarHoraRTC
_DS3234_read_byte:
;TIEMPO_RTC.c,58 :: 		unsigned char DS3234_read_byte(unsigned char address){
;TIEMPO_RTC.c,60 :: 		unsigned char value = 0x00;
0x03F8	0x781F8A  	PUSH	W10
;TIEMPO_RTC.c,61 :: 		CS_DS3234 = 0;
0x03FA	0xA94E04  	BCLR	LATA2_bit, BitPos(LATA2_bit+0)
;TIEMPO_RTC.c,62 :: 		SPI2_Write(address);
0x03FC	0xFB850A  	ZE	W10, W10
0x03FE	0x070118  	RCALL	_SPI2_Write
;TIEMPO_RTC.c,63 :: 		value = SPI2_Read(0);
0x0400	0xEF2014  	CLR	W10
0x0402	0x07FF0E  	RCALL	_SPI2_Read
;TIEMPO_RTC.c,64 :: 		CS_DS3234 = 1;
0x0404	0xA84E04  	BSET	LATA2_bit, BitPos(LATA2_bit+0)
;TIEMPO_RTC.c,65 :: 		return value;
;TIEMPO_RTC.c,67 :: 		}
;TIEMPO_RTC.c,65 :: 		return value;
;TIEMPO_RTC.c,67 :: 		}
L_end_DS3234_read_byte:
0x0406	0x78054F  	POP	W10
0x0408	0x060000  	RETURN
; end of _DS3234_read_byte
_Bcd2Dec:
0x0350	0xFA0000  	LNK	#0
;__Lib_Conversions.c,319 :: 		
;__Lib_Conversions.c,320 :: 		
;__Lib_Conversions.c,322 :: 		
0x0352	0xFB800A  	ZE	W10, W0
0x0354	0xDE0044  	LSR	W0, #4, W0
0x0356	0xFB8080  	ZE	W0, W1
0x0358	0x2000A0  	MOV	#10, W0
0x035A	0xB80A00  	MUL.UU	W1, W0, W4
;__Lib_Conversions.c,323 :: 		
0x035C	0xFB800A  	ZE	W10, W0
0x035E	0x60016F  	AND	W0, #15, W2
0x0360	0xFB8004  	ZE	W4, W0
0x0362	0x400002  	ADD	W0, W2, W0
;__Lib_Conversions.c,324 :: 		
;__Lib_Conversions.c,325 :: 		
L_end_Bcd2Dec:
0x0364	0xFA8000  	ULNK
0x0366	0x060000  	RETURN
; end of _Bcd2Dec
_RecuperarFechaRTC:
0x06DA	0xFA0004  	LNK	#4
;TIEMPO_RTC.c,140 :: 		unsigned long RecuperarFechaRTC(){
;TIEMPO_RTC.c,148 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x06DC	0x781F8A  	PUSH	W10
0x06DE	0x781F8B  	PUSH	W11
0x06E0	0x781F8C  	PUSH	W12
0x06E2	0x781F8D  	PUSH	W13
0x06E4	0xEF201A  	CLR	W13
0x06E6	0x2001CC  	MOV	#28, W12
0x06E8	0xEF2016  	CLR	W11
0x06EA	0x20020A  	MOV	#32, W10
0x06EC	0xEF2000  	CLR	W0
0x06EE	0x781F80  	PUSH	W0
0x06F0	0xEF2000  	CLR	W0
0x06F2	0x781F80  	PUSH	W0
0x06F4	0xEF2000  	CLR	W0
0x06F6	0x781F80  	PUSH	W0
0x06F8	0xEF2000  	CLR	W0
0x06FA	0x781F80  	PUSH	W0
0x06FC	0x07FF79  	RCALL	_SPI2_Init_Advanced
0x06FE	0xB1008F  	SUB	#8, W15
;TIEMPO_RTC.c,150 :: 		valueRead = DS3234_read_byte(DiaMes_Lec);
0x0700	0xB3C04A  	MOV.B	#4, W10
0x0702	0x07FE7A  	RCALL	_DS3234_read_byte
;TIEMPO_RTC.c,151 :: 		valueRead = Bcd2Dec(valueRead);
0x0704	0x784500  	MOV.B	W0, W10
0x0706	0x07FE24  	RCALL	_Bcd2Dec
;TIEMPO_RTC.c,152 :: 		dia = (long)valueRead;
; dia start address is: 12 (W6)
0x0708	0xFB8300  	ZE	W0, W6
0x070A	0xEB0380  	CLR	W7
;TIEMPO_RTC.c,153 :: 		valueRead = 0x1F & DS3234_read_byte(Mes_Lec);
0x070C	0xB3C05A  	MOV.B	#5, W10
0x070E	0x07FE74  	RCALL	_DS3234_read_byte
0x0710	0xFB8000  	ZE	W0, W0
0x0712	0x60007F  	AND	W0, #31, W0
;TIEMPO_RTC.c,154 :: 		valueRead = Bcd2Dec(valueRead);
0x0714	0x784500  	MOV.B	W0, W10
0x0716	0x07FE1C  	RCALL	_Bcd2Dec
;TIEMPO_RTC.c,155 :: 		mes = (long)valueRead;
; mes start address is: 16 (W8)
0x0718	0xFB8400  	ZE	W0, W8
0x071A	0xEB0480  	CLR	W9
;TIEMPO_RTC.c,156 :: 		valueRead = DS3234_read_byte(Anio_Lec);
0x071C	0xB3C06A  	MOV.B	#6, W10
0x071E	0x07FE6C  	RCALL	_DS3234_read_byte
;TIEMPO_RTC.c,157 :: 		valueRead = Bcd2Dec(valueRead);
0x0720	0x784500  	MOV.B	W0, W10
0x0722	0x07FE16  	RCALL	_Bcd2Dec
;TIEMPO_RTC.c,158 :: 		anio = (long)valueRead;
0x0724	0xFB8000  	ZE	W0, W0
0x0726	0xEB0080  	CLR	W1
;TIEMPO_RTC.c,160 :: 		fechaRTC = (anio*10000)+(mes*100)+(dia);                                   //10000*aa + 100*mm + dd
0x0728	0x227102  	MOV	#10000, W2
0x072A	0x200003  	MOV	#0, W3
0x072C	0x07FF58  	RCALL	__Multiply_32x32
0x072E	0x980700  	MOV	W0, [W14+0]
0x0730	0x980711  	MOV	W1, [W14+2]
0x0732	0xBE0008  	MOV.D	W8, W0
0x0734	0x200642  	MOV	#100, W2
0x0736	0x200003  	MOV	#0, W3
0x0738	0x07FF52  	RCALL	__Multiply_32x32
; mes end address is: 16 (W8)
0x073A	0x90010E  	MOV	[W14+0], W2
0x073C	0x90019E  	MOV	[W14+2], W3
0x073E	0x410000  	ADD	W2, W0, W0
0x0740	0x498081  	ADDC	W3, W1, W1
; fechaRTC start address is: 4 (W2)
0x0742	0x400106  	ADD	W0, W6, W2
0x0744	0x488187  	ADDC	W1, W7, W3
; dia end address is: 12 (W6)
;TIEMPO_RTC.c,162 :: 		SPI2_Init();
0x0746	0x07FE61  	RCALL	_SPI2_Init
;TIEMPO_RTC.c,164 :: 		return fechaRTC;
0x0748	0xBE0002  	MOV.D	W2, W0
; fechaRTC end address is: 4 (W2)
;TIEMPO_RTC.c,166 :: 		}
;TIEMPO_RTC.c,164 :: 		return fechaRTC;
;TIEMPO_RTC.c,166 :: 		}
L_end_RecuperarFechaRTC:
0x074A	0x7806CF  	POP	W13
0x074C	0x78064F  	POP	W12
0x074E	0x7805CF  	POP	W11
0x0750	0x78054F  	POP	W10
0x0752	0xFA8000  	ULNK
0x0754	0x060000  	RETURN
; end of _RecuperarFechaRTC
_RecuperarHoraGPS:
0x0806	0xFA001C  	LNK	#28
;TIEMPO_GPS.c,55 :: 		unsigned long RecuperarHoraGPS(unsigned char *tramaDatosGPS)
;TIEMPO_GPS.c,61 :: 		char *ptrDatoString = &datoString;
0x0808	0x781F8A  	PUSH	W10
0x080A	0x470270  	ADD	W14, #16, W4
0x080C	0x980F54  	MOV	W4, [W14+26]
; ptrDatoString start address is: 12 (W6)
0x080E	0x780304  	MOV	W4, W6
;TIEMPO_GPS.c,62 :: 		datoString[2] = '\0';
0x0810	0x4200E2  	ADD	W4, #2, W1
0x0812	0xEF2000  	CLR	W0
0x0814	0x784880  	MOV.B	W0, [W1]
;TIEMPO_GPS.c,63 :: 		tramaTiempo[3] = '\0';
0x0816	0x4701E0  	ADD	W14, #0, W3
0x0818	0x980F43  	MOV	W3, [W14+24]
0x081A	0x41816C  	ADD	W3, #12, W2
0x081C	0xEF2000  	CLR	W0
0x081E	0xEF2002  	CLR	W1
0x0820	0xBE8900  	MOV.D	W0, [W2]
;TIEMPO_GPS.c,66 :: 		datoString[0] = tramaDatosGPS[0];
0x0822	0x784A1A  	MOV.B	[W10], [W4]
;TIEMPO_GPS.c,67 :: 		datoString[1] = tramaDatosGPS[1];
0x0824	0x4200E1  	ADD	W4, #1, W1
0x0826	0x450061  	ADD	W10, #1, W0
0x0828	0x784890  	MOV.B	[W0], [W1]
;TIEMPO_GPS.c,68 :: 		tramaTiempo[0] = atoi(ptrDatoString);
0x082A	0x780003  	MOV	W3, W0
0x082C	0x980F20  	MOV	W0, [W14+20]
0x082E	0x781F8A  	PUSH	W10
0x0830	0x780506  	MOV	W6, W10
0x0832	0x07FD9A  	RCALL	_atoi
0x0834	0x78054F  	POP	W10
0x0836	0x780080  	MOV	W0, W1
0x0838	0xDE894F  	ASR	W1, #15, W2
0x083A	0x90082E  	MOV	[W14+20], W0
0x083C	0x781801  	MOV	W1, [W0++]
0x083E	0x781002  	MOV	W2, [W0--]
;TIEMPO_GPS.c,71 :: 		datoString[0] = tramaDatosGPS[2];
0x0840	0x4500E2  	ADD	W10, #2, W1
0x0842	0x90085E  	MOV	[W14+26], W0
0x0844	0x784811  	MOV.B	[W1], [W0]
;TIEMPO_GPS.c,72 :: 		datoString[1] = tramaDatosGPS[3];
0x0846	0x4000E1  	ADD	W0, #1, W1
0x0848	0x450063  	ADD	W10, #3, W0
0x084A	0x784890  	MOV.B	[W0], [W1]
;TIEMPO_GPS.c,73 :: 		tramaTiempo[1] = atoi(ptrDatoString);
0x084C	0x90084E  	MOV	[W14+24], W0
0x084E	0x400064  	ADD	W0, #4, W0
0x0850	0x980F20  	MOV	W0, [W14+20]
0x0852	0x781F8A  	PUSH	W10
0x0854	0x780506  	MOV	W6, W10
0x0856	0x07FD88  	RCALL	_atoi
0x0858	0x78054F  	POP	W10
0x085A	0x780080  	MOV	W0, W1
0x085C	0xDE894F  	ASR	W1, #15, W2
0x085E	0x90082E  	MOV	[W14+20], W0
0x0860	0x781801  	MOV	W1, [W0++]
0x0862	0x781002  	MOV	W2, [W0--]
;TIEMPO_GPS.c,76 :: 		datoString[0] = tramaDatosGPS[4];
0x0864	0x4500E4  	ADD	W10, #4, W1
0x0866	0x90085E  	MOV	[W14+26], W0
0x0868	0x784811  	MOV.B	[W1], [W0]
;TIEMPO_GPS.c,77 :: 		datoString[1] = tramaDatosGPS[5];
0x086A	0x4000E1  	ADD	W0, #1, W1
0x086C	0x450065  	ADD	W10, #5, W0
0x086E	0x784890  	MOV.B	[W0], [W1]
;TIEMPO_GPS.c,78 :: 		tramaTiempo[2] = atoi(ptrDatoString);
0x0870	0x90084E  	MOV	[W14+24], W0
0x0872	0x400068  	ADD	W0, #8, W0
0x0874	0x980F20  	MOV	W0, [W14+20]
0x0876	0x780506  	MOV	W6, W10
; ptrDatoString end address is: 12 (W6)
0x0878	0x07FD77  	RCALL	_atoi
0x087A	0x780080  	MOV	W0, W1
0x087C	0xDE894F  	ASR	W1, #15, W2
0x087E	0x90082E  	MOV	[W14+20], W0
0x0880	0x781801  	MOV	W1, [W0++]
0x0882	0x781002  	MOV	W2, [W0--]
;TIEMPO_GPS.c,80 :: 		horaGPS = (tramaTiempo[0] * 3600) + (tramaTiempo[1] * 60) + (tramaTiempo[2]); // Calcula el segundo actual = hh*3600 + mm*60 + ss
0x0884	0x90094E  	MOV	[W14+24], W2
0x0886	0xBE0012  	MOV.D	[W2], W0
0x0888	0x20E102  	MOV	#3600, W2
0x088A	0x200003  	MOV	#0, W3
0x088C	0x07FEA8  	RCALL	__Multiply_32x32
0x088E	0x90094E  	MOV	[W14+24], W2
0x0890	0x980F20  	MOV	W0, [W14+20]
0x0892	0x980F31  	MOV	W1, [W14+22]
0x0894	0x410164  	ADD	W2, #4, W2
0x0896	0xBE0012  	MOV.D	[W2], W0
0x0898	0x2003C2  	MOV	#60, W2
0x089A	0x200003  	MOV	#0, W3
0x089C	0x07FEA0  	RCALL	__Multiply_32x32
0x089E	0x90092E  	MOV	[W14+20], W2
0x08A0	0x9009BE  	MOV	[W14+22], W3
0x08A2	0x410200  	ADD	W2, W0, W4
0x08A4	0x498281  	ADDC	W3, W1, W5
0x08A6	0x90084E  	MOV	[W14+24], W0
0x08A8	0x400168  	ADD	W0, #8, W2
0x08AA	0x420032  	ADD	W4, [W2++], W0
0x08AC	0x4A80A2  	ADDC	W5, [W2--], W1
;TIEMPO_GPS.c,81 :: 		return horaGPS;
;TIEMPO_GPS.c,82 :: 		}
;TIEMPO_GPS.c,81 :: 		return horaGPS;
;TIEMPO_GPS.c,82 :: 		}
L_end_RecuperarHoraGPS:
0x08AE	0x78054F  	POP	W10
0x08B0	0xFA8000  	ULNK
0x08B2	0x060000  	RETURN
; end of _RecuperarHoraGPS
_atoi:
0x0368	0xFA0000  	LNK	#0
;__Lib_CStdlib.c,181 :: 		
;__Lib_CStdlib.c,186 :: 		
___atoi_skipws_atoi:
;__Lib_CStdlib.c,187 :: 		
; c start address is: 4 (W2)
0x036A	0xFB811A  	ZE	[W10], W2
;__Lib_CStdlib.c,188 :: 		
0x036C	0x200200  	MOV	#32, W0
0x036E	0xE11000  	CP	W2, W0
0x0370	0x320003  	BRA Z	L__atoi99
L__atoi136:
0x0372	0xE11069  	CP	W2, #9
0x0374	0x320001  	BRA Z	L__atoi98
L__atoi137:
0x0376	0x370003  	BRA	L_atoi55
L__atoi99:
L__atoi98:
;__Lib_CStdlib.c,189 :: 		
0x0378	0x450061  	ADD	W10, #1, W0
0x037A	0x780500  	MOV	W0, W10
;__Lib_CStdlib.c,190 :: 		
0x037C	0x37FFF6  	BRA	___atoi_skipws_atoi
;__Lib_CStdlib.c,191 :: 		
L_atoi55:
;__Lib_CStdlib.c,192 :: 		
; a start address is: 2 (W1)
0x037E	0xEF2002  	CLR	W1
;__Lib_CStdlib.c,193 :: 		
; sign start address is: 6 (W3)
0x0380	0xEF2006  	CLR	W3
;__Lib_CStdlib.c,194 :: 		
0x0382	0x2002D0  	MOV	#45, W0
0x0384	0xE11000  	CP	W2, W0
0x0386	0x3A0005  	BRA NZ	L_atoi56
L__atoi138:
; c end address is: 4 (W2)
;__Lib_CStdlib.c,195 :: 		
; sign start address is: 4 (W2)
0x0388	0x418161  	ADD	W3, #1, W2
; sign end address is: 6 (W3)
;__Lib_CStdlib.c,196 :: 		
0x038A	0x450061  	ADD	W10, #1, W0
0x038C	0x780500  	MOV	W0, W10
;__Lib_CStdlib.c,197 :: 		
0x038E	0x780002  	MOV	W2, W0
; sign end address is: 4 (W2)
0x0390	0x370006  	BRA	L_atoi57
L_atoi56:
;__Lib_CStdlib.c,199 :: 		
; sign start address is: 6 (W3)
; c start address is: 4 (W2)
0x0392	0x2002B0  	MOV	#43, W0
0x0394	0xE11000  	CP	W2, W0
0x0396	0x3A0002  	BRA NZ	L_atoi58
L__atoi139:
; c end address is: 4 (W2)
;__Lib_CStdlib.c,200 :: 		
0x0398	0x450061  	ADD	W10, #1, W0
0x039A	0x780500  	MOV	W0, W10
L_atoi58:
0x039C	0x780003  	MOV	W3, W0
L_atoi57:
; sign end address is: 6 (W3)
;__Lib_CStdlib.c,201 :: 		
; sign start address is: 0 (W0)
0x039E	0x780281  	MOV	W1, W5
; a end address is: 2 (W1)
; sign end address is: 0 (W0)
0x03A0	0x780080  	MOV	W0, W1
___atoi_conv_atoi:
;__Lib_CStdlib.c,202 :: 		
; sign start address is: 2 (W1)
; a start address is: 10 (W5)
; c start address is: 8 (W4)
0x03A2	0xFB821A  	ZE	[W10], W4
;__Lib_CStdlib.c,203 :: 		
0x03A4	0x781F8A  	PUSH	W10
0x03A6	0x784504  	MOV.B	W4, W10
0x03A8	0x07FF47  	RCALL	_isdigit
0x03AA	0x78054F  	POP	W10
0x03AC	0xE20000  	CP0	W0
0x03AE	0x320008  	BRA Z	L_atoi59
L__atoi140:
;__Lib_CStdlib.c,204 :: 		
0x03B0	0x2000A0  	MOV	#10, W0
0x03B2	0xB9A900  	MUL.SS	W5, W0, W2
; a end address is: 10 (W5)
0x03B4	0x200300  	MOV	#48, W0
0x03B6	0x520000  	SUB	W4, W0, W0
; a start address is: 10 (W5)
0x03B8	0x410280  	ADD	W2, W0, W5
;__Lib_CStdlib.c,205 :: 		
0x03BA	0x450061  	ADD	W10, #1, W0
0x03BC	0x780500  	MOV	W0, W10
;__Lib_CStdlib.c,206 :: 		
; c end address is: 8 (W4)
0x03BE	0x37FFF1  	BRA	___atoi_conv_atoi
;__Lib_CStdlib.c,207 :: 		
L_atoi59:
;__Lib_CStdlib.c,208 :: 		
0x03C0	0xE20002  	CP0	W1
0x03C2	0x320002  	BRA Z	L_atoi60
L__atoi141:
; sign end address is: 2 (W1)
;__Lib_CStdlib.c,209 :: 		
0x03C4	0x128060  	SUBR	W5, #0, W0
; a end address is: 10 (W5)
0x03C6	0x370001  	BRA	L_end_atoi
L_atoi60:
;__Lib_CStdlib.c,210 :: 		
; a start address is: 10 (W5)
0x03C8	0x780005  	MOV	W5, W0
; a end address is: 10 (W5)
;__Lib_CStdlib.c,211 :: 		
L_end_atoi:
0x03CA	0xFA8000  	ULNK
0x03CC	0x060000  	RETURN
; end of _atoi
_isdigit:
0x0238	0xFA0000  	LNK	#0
;__Lib_CType.c,23 :: 		
;__Lib_CType.c,24 :: 		
0x023A	0xB3C390  	MOV.B	#57, W0
0x023C	0xE15400  	CP.B	W10, W0
0x023E	0x3E0005  	BRA GTU	L_isdigit9
L__isdigit58:
0x0240	0xB3C300  	MOV.B	#48, W0
0x0242	0xE15400  	CP.B	W10, W0
0x0244	0x390002  	BRA LTU	L_isdigit9
L__isdigit59:
0x0246	0xB3C010  	MOV.B	#1, W0
0x0248	0x370001  	BRA	L_isdigit8
L_isdigit9:
0x024A	0xEF2000  	CLR	W0
L_isdigit8:
0x024C	0xFB8000  	ZE	W0, W0
;__Lib_CType.c,25 :: 		
L_end_isdigit:
0x024E	0xFA8000  	ULNK
0x0250	0x060000  	RETURN
; end of _isdigit
_RecuperarFechaGPS:
0x0756	0xFA001C  	LNK	#28
;TIEMPO_GPS.c,23 :: 		unsigned long RecuperarFechaGPS(unsigned char *tramaDatosGPS)
;TIEMPO_GPS.c,29 :: 		char *ptrDatoStringF = &datoStringF;
0x0758	0x781F8A  	PUSH	W10
0x075A	0x470270  	ADD	W14, #16, W4
0x075C	0x980F54  	MOV	W4, [W14+26]
; ptrDatoStringF start address is: 12 (W6)
0x075E	0x780304  	MOV	W4, W6
;TIEMPO_GPS.c,30 :: 		datoStringF[2] = '\0';
0x0760	0x4200E2  	ADD	W4, #2, W1
0x0762	0xEF2000  	CLR	W0
0x0764	0x784880  	MOV.B	W0, [W1]
;TIEMPO_GPS.c,31 :: 		tramaFecha[3] = '\0';
0x0766	0x4701E0  	ADD	W14, #0, W3
0x0768	0x980F43  	MOV	W3, [W14+24]
0x076A	0x41816C  	ADD	W3, #12, W2
0x076C	0xEF2000  	CLR	W0
0x076E	0xEF2002  	CLR	W1
0x0770	0xBE8900  	MOV.D	W0, [W2]
;TIEMPO_GPS.c,34 :: 		datoStringF[0] = tramaDatosGPS[10];
0x0772	0x45006A  	ADD	W10, #10, W0
0x0774	0x784A10  	MOV.B	[W0], [W4]
;TIEMPO_GPS.c,35 :: 		datoStringF[1] = tramaDatosGPS[11];
0x0776	0x4200E1  	ADD	W4, #1, W1
0x0778	0x45006B  	ADD	W10, #11, W0
0x077A	0x784890  	MOV.B	[W0], [W1]
;TIEMPO_GPS.c,36 :: 		tramaFecha[0] = atoi(ptrDatoStringF);
0x077C	0x780003  	MOV	W3, W0
0x077E	0x980F20  	MOV	W0, [W14+20]
0x0780	0x781F8A  	PUSH	W10
0x0782	0x780506  	MOV	W6, W10
0x0784	0x07FDF1  	RCALL	_atoi
0x0786	0x78054F  	POP	W10
0x0788	0x780080  	MOV	W0, W1
0x078A	0xDE894F  	ASR	W1, #15, W2
0x078C	0x90082E  	MOV	[W14+20], W0
0x078E	0x781801  	MOV	W1, [W0++]
0x0790	0x781002  	MOV	W2, [W0--]
;TIEMPO_GPS.c,39 :: 		datoStringF[0] = tramaDatosGPS[8];
0x0792	0x4500E8  	ADD	W10, #8, W1
0x0794	0x90085E  	MOV	[W14+26], W0
0x0796	0x784811  	MOV.B	[W1], [W0]
;TIEMPO_GPS.c,40 :: 		datoStringF[1] = tramaDatosGPS[9];
0x0798	0x4000E1  	ADD	W0, #1, W1
0x079A	0x450069  	ADD	W10, #9, W0
0x079C	0x784890  	MOV.B	[W0], [W1]
;TIEMPO_GPS.c,41 :: 		tramaFecha[1] = atoi(ptrDatoStringF);
0x079E	0x90084E  	MOV	[W14+24], W0
0x07A0	0x400064  	ADD	W0, #4, W0
0x07A2	0x980F20  	MOV	W0, [W14+20]
0x07A4	0x781F8A  	PUSH	W10
0x07A6	0x780506  	MOV	W6, W10
0x07A8	0x07FDDF  	RCALL	_atoi
0x07AA	0x78054F  	POP	W10
0x07AC	0x780080  	MOV	W0, W1
0x07AE	0xDE894F  	ASR	W1, #15, W2
0x07B0	0x90082E  	MOV	[W14+20], W0
0x07B2	0x781801  	MOV	W1, [W0++]
0x07B4	0x781002  	MOV	W2, [W0--]
;TIEMPO_GPS.c,44 :: 		datoStringF[0] = tramaDatosGPS[6];
0x07B6	0x4500E6  	ADD	W10, #6, W1
0x07B8	0x90085E  	MOV	[W14+26], W0
0x07BA	0x784811  	MOV.B	[W1], [W0]
;TIEMPO_GPS.c,45 :: 		datoStringF[1] = tramaDatosGPS[7];
0x07BC	0x4000E1  	ADD	W0, #1, W1
0x07BE	0x450067  	ADD	W10, #7, W0
0x07C0	0x784890  	MOV.B	[W0], [W1]
;TIEMPO_GPS.c,46 :: 		tramaFecha[2] = atoi(ptrDatoStringF);
0x07C2	0x90084E  	MOV	[W14+24], W0
0x07C4	0x400068  	ADD	W0, #8, W0
0x07C6	0x980F20  	MOV	W0, [W14+20]
0x07C8	0x780506  	MOV	W6, W10
; ptrDatoStringF end address is: 12 (W6)
0x07CA	0x07FDCE  	RCALL	_atoi
0x07CC	0x780080  	MOV	W0, W1
0x07CE	0xDE894F  	ASR	W1, #15, W2
0x07D0	0x90082E  	MOV	[W14+20], W0
0x07D2	0x781801  	MOV	W1, [W0++]
0x07D4	0x781002  	MOV	W2, [W0--]
;TIEMPO_GPS.c,49 :: 		fechaGPS = (tramaFecha[0] * 10000) + (tramaFecha[1] * 100) + (tramaFecha[2]); // 10000*aa + 100*mm + dd
0x07D6	0x90094E  	MOV	[W14+24], W2
0x07D8	0xBE0012  	MOV.D	[W2], W0
0x07DA	0x227102  	MOV	#10000, W2
0x07DC	0x200003  	MOV	#0, W3
0x07DE	0x07FEFF  	RCALL	__Multiply_32x32
0x07E0	0x90094E  	MOV	[W14+24], W2
0x07E2	0x980F20  	MOV	W0, [W14+20]
0x07E4	0x980F31  	MOV	W1, [W14+22]
0x07E6	0x410164  	ADD	W2, #4, W2
0x07E8	0xBE0012  	MOV.D	[W2], W0
0x07EA	0x200642  	MOV	#100, W2
0x07EC	0x200003  	MOV	#0, W3
0x07EE	0x07FEF7  	RCALL	__Multiply_32x32
0x07F0	0x90092E  	MOV	[W14+20], W2
0x07F2	0x9009BE  	MOV	[W14+22], W3
0x07F4	0x410200  	ADD	W2, W0, W4
0x07F6	0x498281  	ADDC	W3, W1, W5
0x07F8	0x90084E  	MOV	[W14+24], W0
0x07FA	0x400168  	ADD	W0, #8, W2
0x07FC	0x420032  	ADD	W4, [W2++], W0
0x07FE	0x4A80A2  	ADDC	W5, [W2--], W1
;TIEMPO_GPS.c,51 :: 		return fechaGPS;
;TIEMPO_GPS.c,52 :: 		}
;TIEMPO_GPS.c,51 :: 		return fechaGPS;
;TIEMPO_GPS.c,52 :: 		}
L_end_RecuperarFechaGPS:
0x0800	0x78054F  	POP	W10
0x0802	0xFA8000  	ULNK
0x0804	0x060000  	RETURN
; end of _RecuperarFechaGPS
_spi_1:
0x1284	0xF80034  	PUSH	DSWPAG
0x1286	0xF80032  	PUSH	DSRPAG
0x1288	0xF80036  	PUSH	RCOUNT
0x128A	0x781F80  	PUSH	W0
0x128C	0x200020  	MOV	#2, W0
0x128E	0x09000C  	REPEAT	#12
0x1290	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,338 :: 		void spi_1() org IVT_ADDR_SPI1INTERRUPT
;Acelerografo.c,341 :: 		SPI1IF_bit = 0;   // Limpia la bandera de interrupcion por SPI
0x1292	0x781F8A  	PUSH	W10
0x1294	0x781F8B  	PUSH	W11
0x1296	0x781F8C  	PUSH	W12
0x1298	0x781F8D  	PUSH	W13
0x129A	0xA94801  	BCLR	SPI1IF_bit, BitPos(SPI1IF_bit+0)
;Acelerografo.c,342 :: 		buffer = SPI1BUF; // Guarda el contenido del bufeer (lectura)
0x129C	0x21B6F1  	MOV	#lo_addr(_buffer), W1
0x129E	0xBFC248  	MOV.B	SPI1BUF, WREG
0x12A0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,346 :: 		if ((banOperacion == 0) && (buffer == 0xA0))
0x12A2	0x21BE50  	MOV	#lo_addr(_banOperacion), W0
0x12A4	0x784010  	MOV.B	[W0], W0
0x12A6	0xE10460  	CP.B	W0, #0
0x12A8	0x3A000B  	BRA NZ	L__spi_1173
L__spi_1243:
0x12AA	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x12AC	0x784090  	MOV.B	[W0], W1
0x12AE	0xB3CA00  	MOV.B	#160, W0
0x12B0	0xE10C00  	CP.B	W1, W0
0x12B2	0x3A0006  	BRA NZ	L__spi_1172
L__spi_1244:
L__spi_1171:
;Acelerografo.c,348 :: 		banOperacion = 1;        // Activa la bandera para enviar el tipo de operacion requerido a la RPi
0x12B4	0x21BE51  	MOV	#lo_addr(_banOperacion), W1
0x12B6	0xB3C010  	MOV.B	#1, W0
0x12B8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,349 :: 		SPI1BUF = tipoOperacion; // Carga en el buffer el tipo de operacion requerido
0x12BA	0x21BE40  	MOV	#lo_addr(_tipoOperacion), W0
0x12BC	0xFB8010  	ZE	[W0], W0
0x12BE	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,346 :: 		if ((banOperacion == 0) && (buffer == 0xA0))
L__spi_1173:
L__spi_1172:
;Acelerografo.c,351 :: 		if ((banOperacion == 1) && (buffer == 0xF0))
0x12C0	0x21BE50  	MOV	#lo_addr(_banOperacion), W0
0x12C2	0x784010  	MOV.B	[W0], W0
0x12C4	0xE10461  	CP.B	W0, #1
0x12C6	0x3A000B  	BRA NZ	L__spi_1175
L__spi_1245:
0x12C8	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x12CA	0x784090  	MOV.B	[W0], W1
0x12CC	0xB3CF00  	MOV.B	#240, W0
0x12CE	0xE10C00  	CP.B	W1, W0
0x12D0	0x3A0006  	BRA NZ	L__spi_1174
L__spi_1246:
L__spi_1170:
;Acelerografo.c,353 :: 		banOperacion = 0;  // Limpia la bandera
0x12D2	0x21BE51  	MOV	#lo_addr(_banOperacion), W1
0x12D4	0xEF2000  	CLR	W0
0x12D6	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,354 :: 		tipoOperacion = 0; // Limpia la variable de tipo de operacion
0x12D8	0x21BE41  	MOV	#lo_addr(_tipoOperacion), W1
0x12DA	0xEF2000  	CLR	W0
0x12DC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,351 :: 		if ((banOperacion == 1) && (buffer == 0xF0))
L__spi_1175:
L__spi_1174:
;Acelerografo.c,360 :: 		if ((banMuestrear == 0) && (buffer == 0xA1))
0x12DE	0x21A630  	MOV	#lo_addr(_banMuestrear), W0
0x12E0	0x784010  	MOV.B	[W0], W0
0x12E2	0xE10460  	CP.B	W0, #0
0x12E4	0x3A000B  	BRA NZ	L__spi_1177
L__spi_1247:
0x12E6	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x12E8	0x784090  	MOV.B	[W0], W1
0x12EA	0xB3CA10  	MOV.B	#161, W0
0x12EC	0xE10C00  	CP.B	W1, W0
0x12EE	0x3A0006  	BRA NZ	L__spi_1176
L__spi_1248:
L__spi_1169:
;Acelerografo.c,362 :: 		banMuestrear = 1;
0x12F0	0x21A631  	MOV	#lo_addr(_banMuestrear), W1
0x12F2	0xB3C010  	MOV.B	#1, W0
0x12F4	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,363 :: 		banCiclo = 1;
0x12F6	0x21BE11  	MOV	#lo_addr(_banCiclo), W1
0x12F8	0xB3C010  	MOV.B	#1, W0
0x12FA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,360 :: 		if ((banMuestrear == 0) && (buffer == 0xA1))
L__spi_1177:
L__spi_1176:
;Acelerografo.c,365 :: 		if ((banMuestrear == 1) && (buffer != 0xA1) && (buffer != 0xF1))
0x12FC	0x21A630  	MOV	#lo_addr(_banMuestrear), W0
0x12FE	0x784010  	MOV.B	[W0], W0
0x1300	0xE10461  	CP.B	W0, #1
0x1302	0x3A000D  	BRA NZ	L__spi_1180
L__spi_1249:
0x1304	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1306	0x784090  	MOV.B	[W0], W1
0x1308	0xB3CA10  	MOV.B	#161, W0
0x130A	0xE10C00  	CP.B	W1, W0
0x130C	0x320008  	BRA Z	L__spi_1179
L__spi_1250:
0x130E	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1310	0x784090  	MOV.B	[W0], W1
0x1312	0xB3CF10  	MOV.B	#241, W0
0x1314	0xE10C00  	CP.B	W1, W0
0x1316	0x320003  	BRA Z	L__spi_1178
L__spi_1251:
L__spi_1168:
;Acelerografo.c,367 :: 		banInicio = 1;  // Bandera que permite el inicio del muestreo dentro de la interrupcion INT1
0x1318	0x21A741  	MOV	#lo_addr(_banInicio), W1
0x131A	0xB3C010  	MOV.B	#1, W0
0x131C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,365 :: 		if ((banMuestrear == 1) && (buffer != 0xA1) && (buffer != 0xF1))
L__spi_1180:
L__spi_1179:
L__spi_1178:
;Acelerografo.c,378 :: 		if ((banMuestrear == 1) && (buffer == 0xF1))
0x131E	0x21A630  	MOV	#lo_addr(_banMuestrear), W0
0x1320	0x784010  	MOV.B	[W0], W0
0x1322	0xE10461  	CP.B	W0, #1
0x1324	0x3A0008  	BRA NZ	L__spi_1182
L__spi_1252:
0x1326	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1328	0x784090  	MOV.B	[W0], W1
0x132A	0xB3CF10  	MOV.B	#241, W0
0x132C	0xE10C00  	CP.B	W1, W0
0x132E	0x3A0003  	BRA NZ	L__spi_1181
L__spi_1253:
L__spi_1167:
;Acelerografo.c,380 :: 		banMuestrear = 0;
0x1330	0x21A631  	MOV	#lo_addr(_banMuestrear), W1
0x1332	0xEF2000  	CLR	W0
0x1334	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,378 :: 		if ((banMuestrear == 1) && (buffer == 0xF1))
L__spi_1182:
L__spi_1181:
;Acelerografo.c,384 :: 		if ((banInitGPS == 0) && (buffer == 0xA2))
0x1336	0x21A5D0  	MOV	#lo_addr(_banInitGPS), W0
0x1338	0x784010  	MOV.B	[W0], W0
0x133A	0xE10460  	CP.B	W0, #0
0x133C	0x3A000A  	BRA NZ	L__spi_1184
L__spi_1254:
0x133E	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1340	0x784090  	MOV.B	[W0], W1
0x1342	0xB3CA20  	MOV.B	#162, W0
0x1344	0xE10C00  	CP.B	W1, W0
0x1346	0x3A0005  	BRA NZ	L__spi_1183
L__spi_1255:
L__spi_1166:
;Acelerografo.c,387 :: 		banInitGPS = 1;
0x1348	0x21A5D1  	MOV	#lo_addr(_banInitGPS), W1
0x134A	0xB3C010  	MOV.B	#1, W0
0x134C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,388 :: 		SPI1BUF = 0x47; // Ascii: G
0x134E	0x200470  	MOV	#71, W0
0x1350	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,384 :: 		if ((banInitGPS == 0) && (buffer == 0xA2))
L__spi_1184:
L__spi_1183:
;Acelerografo.c,390 :: 		if ((banInitGPS == 1) && (buffer == 0xF2))
0x1352	0x21A5D0  	MOV	#lo_addr(_banInitGPS), W0
0x1354	0x784010  	MOV.B	[W0], W0
0x1356	0xE10461  	CP.B	W0, #1
0x1358	0x3A0038  	BRA NZ	L__spi_1186
L__spi_1256:
0x135A	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x135C	0x784090  	MOV.B	[W0], W1
0x135E	0xB3CF20  	MOV.B	#242, W0
0x1360	0xE10C00  	CP.B	W1, W0
0x1362	0x3A0033  	BRA NZ	L__spi_1185
L__spi_1257:
L__spi_1165:
;Acelerografo.c,394 :: 		LedTest = 0;
0x1364	0xA98E15  	BCLR	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,395 :: 		Delay_ms(150);
0x1366	0x200138  	MOV	#19, W8
0x1368	0x24F8A7  	MOV	#20362, W7
L_spi_154:
0x136A	0xED200E  	DEC	W7
0x136C	0x3AFFFE  	BRA NZ	L_spi_154
0x136E	0xED2010  	DEC	W8
0x1370	0x3AFFFC  	BRA NZ	L_spi_154
0x1372	0x000000  	NOP
0x1374	0x000000  	NOP
0x1376	0x000000  	NOP
;Acelerografo.c,396 :: 		LedTest = ~LedTest;
0x1378	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,397 :: 		Delay_ms(150);
0x137A	0x200138  	MOV	#19, W8
0x137C	0x24F8A7  	MOV	#20362, W7
L_spi_156:
0x137E	0xED200E  	DEC	W7
0x1380	0x3AFFFE  	BRA NZ	L_spi_156
0x1382	0xED2010  	DEC	W8
0x1384	0x3AFFFC  	BRA NZ	L_spi_156
0x1386	0x000000  	NOP
0x1388	0x000000  	NOP
0x138A	0x000000  	NOP
;Acelerografo.c,398 :: 		LedTest = ~LedTest;
0x138C	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,399 :: 		Delay_ms(150);
0x138E	0x200138  	MOV	#19, W8
0x1390	0x24F8A7  	MOV	#20362, W7
L_spi_158:
0x1392	0xED200E  	DEC	W7
0x1394	0x3AFFFE  	BRA NZ	L_spi_158
0x1396	0xED2010  	DEC	W8
0x1398	0x3AFFFC  	BRA NZ	L_spi_158
0x139A	0x000000  	NOP
0x139C	0x000000  	NOP
0x139E	0x000000  	NOP
;Acelerografo.c,400 :: 		LedTest = ~LedTest;
0x13A0	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,401 :: 		Delay_ms(150);
0x13A2	0x200138  	MOV	#19, W8
0x13A4	0x24F8A7  	MOV	#20362, W7
L_spi_160:
0x13A6	0xED200E  	DEC	W7
0x13A8	0x3AFFFE  	BRA NZ	L_spi_160
0x13AA	0xED2010  	DEC	W8
0x13AC	0x3AFFFC  	BRA NZ	L_spi_160
0x13AE	0x000000  	NOP
0x13B0	0x000000  	NOP
0x13B2	0x000000  	NOP
;Acelerografo.c,402 :: 		LedTest = ~LedTest;
0x13B4	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,403 :: 		Delay_ms(150);
0x13B6	0x200138  	MOV	#19, W8
0x13B8	0x24F8A7  	MOV	#20362, W7
L_spi_162:
0x13BA	0xED200E  	DEC	W7
0x13BC	0x3AFFFE  	BRA NZ	L_spi_162
0x13BE	0xED2010  	DEC	W8
0x13C0	0x3AFFFC  	BRA NZ	L_spi_162
0x13C2	0x000000  	NOP
0x13C4	0x000000  	NOP
0x13C6	0x000000  	NOP
;Acelerografo.c,404 :: 		LedTest = ~LedTest;
0x13C8	0xAA8E15  	BTG	LATB12_bit, BitPos(LATB12_bit+0)
;Acelerografo.c,390 :: 		if ((banInitGPS == 1) && (buffer == 0xF2))
L__spi_1186:
L__spi_1185:
;Acelerografo.c,408 :: 		if ((banLec == 1) && (buffer == 0xA3))
0x13CA	0x21BDF0  	MOV	#lo_addr(_banLec), W0
0x13CC	0x784010  	MOV.B	[W0], W0
0x13CE	0xE10461  	CP.B	W0, #1
0x13D0	0x3A0010  	BRA NZ	L__spi_1188
L__spi_1258:
0x13D2	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x13D4	0x784090  	MOV.B	[W0], W1
0x13D6	0xB3CA30  	MOV.B	#163, W0
0x13D8	0xE10C00  	CP.B	W1, W0
0x13DA	0x3A000B  	BRA NZ	L__spi_1187
L__spi_1259:
L__spi_1164:
;Acelerografo.c,410 :: 		banLec = 2; // Activa la bandera de lectura
0x13DC	0x21BDF1  	MOV	#lo_addr(_banLec), W1
0x13DE	0xB3C020  	MOV.B	#2, W0
0x13E0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,411 :: 		i = 0;
0x13E2	0xEF2000  	CLR	W0
0x13E4	0x88D3B0  	MOV	W0, _i
;Acelerografo.c,412 :: 		SPI1BUF = tramaCompleta[i];
0x13E6	0x210631  	MOV	#lo_addr(_tramaCompleta), W1
0x13E8	0x21A760  	MOV	#lo_addr(_i), W0
0x13EA	0x408010  	ADD	W1, [W0], W0
0x13EC	0x784010  	MOV.B	[W0], W0
0x13EE	0xFB8000  	ZE	W0, W0
0x13F0	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,408 :: 		if ((banLec == 1) && (buffer == 0xA3))
L__spi_1188:
L__spi_1187:
;Acelerografo.c,414 :: 		if ((banLec == 2) && (buffer != 0xF3))
0x13F2	0x21BDF0  	MOV	#lo_addr(_banLec), W0
0x13F4	0x784010  	MOV.B	[W0], W0
0x13F6	0xE10462  	CP.B	W0, #2
0x13F8	0x3A000E  	BRA NZ	L__spi_1190
L__spi_1260:
0x13FA	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x13FC	0x784090  	MOV.B	[W0], W1
0x13FE	0xB3CF30  	MOV.B	#243, W0
0x1400	0xE10C00  	CP.B	W1, W0
0x1402	0x320009  	BRA Z	L__spi_1189
L__spi_1261:
L__spi_1163:
;Acelerografo.c,416 :: 		SPI1BUF = tramaCompleta[i];
0x1404	0x210631  	MOV	#lo_addr(_tramaCompleta), W1
0x1406	0x21A760  	MOV	#lo_addr(_i), W0
0x1408	0x408010  	ADD	W1, [W0], W0
0x140A	0x784010  	MOV.B	[W0], W0
0x140C	0xFB8000  	ZE	W0, W0
0x140E	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,417 :: 		i++;
0x1410	0x200011  	MOV	#1, W1
0x1412	0x21A760  	MOV	#lo_addr(_i), W0
0x1414	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,414 :: 		if ((banLec == 2) && (buffer != 0xF3))
L__spi_1190:
L__spi_1189:
;Acelerografo.c,419 :: 		if ((banLec == 2) && (buffer == 0xF3))
0x1416	0x21BDF0  	MOV	#lo_addr(_banLec), W0
0x1418	0x784010  	MOV.B	[W0], W0
0x141A	0xE10462  	CP.B	W0, #2
0x141C	0x3A000A  	BRA NZ	L__spi_1192
L__spi_1262:
0x141E	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1420	0x784090  	MOV.B	[W0], W1
0x1422	0xB3CF30  	MOV.B	#243, W0
0x1424	0xE10C00  	CP.B	W1, W0
0x1426	0x3A0005  	BRA NZ	L__spi_1191
L__spi_1263:
L__spi_1162:
;Acelerografo.c,421 :: 		banLec = 0; // Limpia la bandera de lectura                        ****AQUI Me QUEDE
0x1428	0x21BDF1  	MOV	#lo_addr(_banLec), W1
0x142A	0xEF2000  	CLR	W0
0x142C	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,422 :: 		SPI1BUF = 0xFF;
0x142E	0x200FF0  	MOV	#255, W0
0x1430	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,419 :: 		if ((banLec == 2) && (buffer == 0xF3))
L__spi_1192:
L__spi_1191:
;Acelerografo.c,428 :: 		if ((banEsc == 0) && (buffer == 0xA4))
0x1432	0x21BE20  	MOV	#lo_addr(_banEsc), W0
0x1434	0x784010  	MOV.B	[W0], W0
0x1436	0xE10460  	CP.B	W0, #0
0x1438	0x3A000A  	BRA NZ	L__spi_1194
L__spi_1264:
0x143A	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x143C	0x784090  	MOV.B	[W0], W1
0x143E	0xB3CA40  	MOV.B	#164, W0
0x1440	0xE10C00  	CP.B	W1, W0
0x1442	0x3A0005  	BRA NZ	L__spi_1193
L__spi_1265:
L__spi_1161:
;Acelerografo.c,430 :: 		banEsc = 1;
0x1444	0x21BE21  	MOV	#lo_addr(_banEsc), W1
0x1446	0xB3C010  	MOV.B	#1, W0
0x1448	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,431 :: 		j = 0;
0x144A	0xEF2000  	CLR	W0
0x144C	0x88DC40  	MOV	W0, _j
;Acelerografo.c,428 :: 		if ((banEsc == 0) && (buffer == 0xA4))
L__spi_1194:
L__spi_1193:
;Acelerografo.c,433 :: 		if ((banEsc == 1) && (buffer != 0xA4) && (buffer != 0xF4))
0x144E	0x21BE20  	MOV	#lo_addr(_banEsc), W0
0x1450	0x784010  	MOV.B	[W0], W0
0x1452	0xE10461  	CP.B	W0, #1
0x1454	0x3A0012  	BRA NZ	L__spi_1197
L__spi_1266:
0x1456	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1458	0x784090  	MOV.B	[W0], W1
0x145A	0xB3CA40  	MOV.B	#164, W0
0x145C	0xE10C00  	CP.B	W1, W0
0x145E	0x32000D  	BRA Z	L__spi_1196
L__spi_1267:
0x1460	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1462	0x784090  	MOV.B	[W0], W1
0x1464	0xB3CF40  	MOV.B	#244, W0
0x1466	0xE10C00  	CP.B	W1, W0
0x1468	0x320008  	BRA Z	L__spi_1195
L__spi_1268:
L__spi_1160:
;Acelerografo.c,435 :: 		tiempoRPI[j] = buffer;
0x146A	0x21B811  	MOV	#lo_addr(_tiempoRPI), W1
0x146C	0x21B880  	MOV	#lo_addr(_j), W0
0x146E	0x408090  	ADD	W1, [W0], W1
0x1470	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1472	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,436 :: 		j++;
0x1474	0x200011  	MOV	#1, W1
0x1476	0x21B880  	MOV	#lo_addr(_j), W0
0x1478	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,433 :: 		if ((banEsc == 1) && (buffer != 0xA4) && (buffer != 0xF4))
L__spi_1197:
L__spi_1196:
L__spi_1195:
;Acelerografo.c,438 :: 		if ((banEsc == 1) && (buffer == 0xF4))
0x147A	0x21BE20  	MOV	#lo_addr(_banEsc), W0
0x147C	0x784010  	MOV.B	[W0], W0
0x147E	0xE10461  	CP.B	W0, #1
0x1480	0x3A0015  	BRA NZ	L__spi_1199
L__spi_1269:
0x1482	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1484	0x784090  	MOV.B	[W0], W1
0x1486	0xB3CF40  	MOV.B	#244, W0
0x1488	0xE10C00  	CP.B	W1, W0
0x148A	0x3A0010  	BRA NZ	L__spi_1198
L__spi_1270:
L__spi_1159:
;Acelerografo.c,440 :: 		horaSistema = RecuperarHoraRPI(tiempoRPI);               // Recupera la hora de la RPi
0x148C	0x21B81A  	MOV	#lo_addr(_tiempoRPI), W10
0x148E	0x07F8F2  	RCALL	_RecuperarHoraRPI
0x1490	0x88D370  	MOV	W0, _horaSistema
0x1492	0x88D381  	MOV	W1, _horaSistema+2
;Acelerografo.c,441 :: 		fechaSistema = RecuperarFechaRPI(tiempoRPI);             // Recupera la fecha de la RPi
0x1494	0x21B81A  	MOV	#lo_addr(_tiempoRPI), W10
0x1496	0x07F908  	RCALL	_RecuperarFechaRPI
0x1498	0x88D3C0  	MOV	W0, _fechaSistema
0x149A	0x88D3D1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,442 :: 		fuenteReloj = 0;                                         // Fuente de reloj = RPi
0x149C	0x21A611  	MOV	#lo_addr(_fuenteReloj), W1
0x149E	0xEF2000  	CLR	W0
0x14A0	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,445 :: 		T3CON.TON = 1;
0x14A2	0xA8E113  	BSET	T3CON, #15
;Acelerografo.c,446 :: 		TMR3 = 0;
0x14A4	0xEF210A  	CLR	TMR3
;Acelerografo.c,448 :: 		banEsc = 0;
0x14A6	0x21BE21  	MOV	#lo_addr(_banEsc), W1
0x14A8	0xEF2000  	CLR	W0
0x14AA	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,438 :: 		if ((banEsc == 1) && (buffer == 0xF4))
L__spi_1199:
L__spi_1198:
;Acelerografo.c,453 :: 		if ((banSetReloj == 1) && (buffer == 0xA5))
0x14AC	0x21B870  	MOV	#lo_addr(_banSetReloj), W0
0x14AE	0x784010  	MOV.B	[W0], W0
0x14B0	0xE10461  	CP.B	W0, #1
0x14B2	0x3A000D  	BRA NZ	L__spi_1201
L__spi_1271:
0x14B4	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x14B6	0x784090  	MOV.B	[W0], W1
0x14B8	0xB3CA50  	MOV.B	#165, W0
0x14BA	0xE10C00  	CP.B	W1, W0
0x14BC	0x3A0008  	BRA NZ	L__spi_1200
L__spi_1272:
L__spi_1158:
;Acelerografo.c,455 :: 		banSetReloj = 2;
0x14BE	0x21B871  	MOV	#lo_addr(_banSetReloj), W1
0x14C0	0xB3C020  	MOV.B	#2, W0
0x14C2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,456 :: 		j = 0;
0x14C4	0xEF2000  	CLR	W0
0x14C6	0x88DC40  	MOV	W0, _j
;Acelerografo.c,457 :: 		SPI1BUF = fuenteReloj; // Envia el indicador de fuente de reloj (0:RTC, 1:GPS)
0x14C8	0x21A610  	MOV	#lo_addr(_fuenteReloj), W0
0x14CA	0xFB8010  	ZE	[W0], W0
0x14CC	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,453 :: 		if ((banSetReloj == 1) && (buffer == 0xA5))
L__spi_1201:
L__spi_1200:
;Acelerografo.c,459 :: 		if ((banSetReloj == 2) && (buffer != 0xA5) && (buffer != 0xF5))
0x14CE	0x21B870  	MOV	#lo_addr(_banSetReloj), W0
0x14D0	0x784010  	MOV.B	[W0], W0
0x14D2	0xE10462  	CP.B	W0, #2
0x14D4	0x3A0013  	BRA NZ	L__spi_1204
L__spi_1273:
0x14D6	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x14D8	0x784090  	MOV.B	[W0], W1
0x14DA	0xB3CA50  	MOV.B	#165, W0
0x14DC	0xE10C00  	CP.B	W1, W0
0x14DE	0x32000E  	BRA Z	L__spi_1203
L__spi_1274:
0x14E0	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x14E2	0x784090  	MOV.B	[W0], W1
0x14E4	0xB3CF50  	MOV.B	#245, W0
0x14E6	0xE10C00  	CP.B	W1, W0
0x14E8	0x320009  	BRA Z	L__spi_1202
L__spi_1275:
L__spi_1157:
;Acelerografo.c,461 :: 		SPI1BUF = tiempo[j];
0x14EA	0x21B8A1  	MOV	#lo_addr(_tiempo), W1
0x14EC	0x21B880  	MOV	#lo_addr(_j), W0
0x14EE	0x408010  	ADD	W1, [W0], W0
0x14F0	0x784010  	MOV.B	[W0], W0
0x14F2	0xFB8000  	ZE	W0, W0
0x14F4	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,462 :: 		j++;
0x14F6	0x200011  	MOV	#1, W1
0x14F8	0x21B880  	MOV	#lo_addr(_j), W0
0x14FA	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,459 :: 		if ((banSetReloj == 2) && (buffer != 0xA5) && (buffer != 0xF5))
L__spi_1204:
L__spi_1203:
L__spi_1202:
;Acelerografo.c,464 :: 		if ((banSetReloj == 2) && (buffer == 0xF5))
0x14FC	0x21B870  	MOV	#lo_addr(_banSetReloj), W0
0x14FE	0x784010  	MOV.B	[W0], W0
0x1500	0xE10462  	CP.B	W0, #2
0x1502	0x3A000A  	BRA NZ	L__spi_1206
L__spi_1276:
0x1504	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1506	0x784090  	MOV.B	[W0], W1
0x1508	0xB3CF50  	MOV.B	#245, W0
0x150A	0xE10C00  	CP.B	W1, W0
0x150C	0x3A0005  	BRA NZ	L__spi_1205
L__spi_1277:
L__spi_1156:
;Acelerografo.c,466 :: 		banSetReloj = 1; // Reactiva la bandera de lectura
0x150E	0x21B871  	MOV	#lo_addr(_banSetReloj), W1
0x1510	0xB3C010  	MOV.B	#1, W0
0x1512	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,467 :: 		SPI1BUF = 0xFF;
0x1514	0x200FF0  	MOV	#255, W0
0x1516	0xB7A248  	MOV	WREG, SPI1BUF
;Acelerografo.c,464 :: 		if ((banSetReloj == 2) && (buffer == 0xF5))
L__spi_1206:
L__spi_1205:
;Acelerografo.c,471 :: 		if ((banEsc == 0) && (buffer == 0xA6))
0x1518	0x21BE20  	MOV	#lo_addr(_banEsc), W0
0x151A	0x784010  	MOV.B	[W0], W0
0x151C	0xE10460  	CP.B	W0, #0
0x151E	0x3A0008  	BRA NZ	L__spi_1208
L__spi_1278:
0x1520	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1522	0x784090  	MOV.B	[W0], W1
0x1524	0xB3CA60  	MOV.B	#166, W0
0x1526	0xE10C00  	CP.B	W1, W0
0x1528	0x3A0003  	BRA NZ	L__spi_1207
L__spi_1279:
L__spi_1155:
;Acelerografo.c,473 :: 		banEsc = 1;
0x152A	0x21BE21  	MOV	#lo_addr(_banEsc), W1
0x152C	0xB3C010  	MOV.B	#1, W0
0x152E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,471 :: 		if ((banEsc == 0) && (buffer == 0xA6))
L__spi_1208:
L__spi_1207:
;Acelerografo.c,475 :: 		if ((banEsc == 1) && (buffer != 0xA6) && (buffer != 0xF6))
0x1530	0x21BE20  	MOV	#lo_addr(_banEsc), W0
0x1532	0x784010  	MOV.B	[W0], W0
0x1534	0xE10461  	CP.B	W0, #1
0x1536	0x3A000D  	BRA NZ	L__spi_1211
L__spi_1280:
0x1538	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x153A	0x784090  	MOV.B	[W0], W1
0x153C	0xB3CA60  	MOV.B	#166, W0
0x153E	0xE10C00  	CP.B	W1, W0
0x1540	0x320008  	BRA Z	L__spi_1210
L__spi_1281:
0x1542	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1544	0x784090  	MOV.B	[W0], W1
0x1546	0xB3CF60  	MOV.B	#246, W0
0x1548	0xE10C00  	CP.B	W1, W0
0x154A	0x320003  	BRA Z	L__spi_1209
L__spi_1282:
L__spi_1154:
;Acelerografo.c,477 :: 		referenciaTiempo = buffer; // Recupera la opcion de referencia de tiempo solicitada
0x154C	0x21A601  	MOV	#lo_addr(_referenciaTiempo), W1
0x154E	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x1550	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,475 :: 		if ((banEsc == 1) && (buffer != 0xA6) && (buffer != 0xF6))
L__spi_1211:
L__spi_1210:
L__spi_1209:
;Acelerografo.c,479 :: 		if ((banEsc == 1) && (buffer == 0xF6))
0x1552	0x21BE20  	MOV	#lo_addr(_banEsc), W0
0x1554	0x784010  	MOV.B	[W0], W0
0x1556	0xE10461  	CP.B	W0, #1
0x1558	0x3A002B  	BRA NZ	L__spi_1213
L__spi_1283:
0x155A	0x21B6F0  	MOV	#lo_addr(_buffer), W0
0x155C	0x784090  	MOV.B	[W0], W1
0x155E	0xB3CF60  	MOV.B	#246, W0
0x1560	0xE10C00  	CP.B	W1, W0
0x1562	0x3A0026  	BRA NZ	L__spi_1212
L__spi_1284:
L__spi_1153:
;Acelerografo.c,481 :: 		if (referenciaTiempo == 1)
0x1564	0x21A600  	MOV	#lo_addr(_referenciaTiempo), W0
0x1566	0x784010  	MOV.B	[W0], W0
0x1568	0xE10461  	CP.B	W0, #1
0x156A	0x3A000A  	BRA NZ	L_spi_1100
L__spi_1285:
;Acelerografo.c,484 :: 		banGPSI = 1;       // Activa la bandera de inicio de trama  del GPS
0x156C	0x21A651  	MOV	#lo_addr(_banGPSI), W1
0x156E	0xB3C010  	MOV.B	#1, W0
0x1570	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,485 :: 		banGPSC = 0;       // Limpia la bandera de trama completa
0x1572	0x21A671  	MOV	#lo_addr(_banGPSC), W1
0x1574	0xEF2000  	CLR	W0
0x1576	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,486 :: 		U1MODE.UARTEN = 1; // Inicializa el UART1
0x1578	0xA8E221  	BSET	U1MODE, #15
;Acelerografo.c,488 :: 		T2CON.TON = 1;
0x157A	0xA8E111  	BSET	T2CON, #15
;Acelerografo.c,489 :: 		TMR2 = 0;
0x157C	0xEF2106  	CLR	TMR2
;Acelerografo.c,490 :: 		}
0x157E	0x370012  	BRA	L_spi_1101
L_spi_1100:
;Acelerografo.c,494 :: 		horaSistema = RecuperarHoraRTC();                        // Recupera la hora del RTC
0x1580	0x07F999  	RCALL	_RecuperarHoraRTC
0x1582	0x88D370  	MOV	W0, _horaSistema
0x1584	0x88D381  	MOV	W1, _horaSistema+2
;Acelerografo.c,495 :: 		fechaSistema = RecuperarFechaRTC();                      // Recupera la fecha del RTC
0x1586	0x07F8A9  	RCALL	_RecuperarFechaRTC
0x1588	0x88D3C0  	MOV	W0, _fechaSistema
0x158A	0x88D3D1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,496 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo); // Actualiza los datos de la trama tiempo con la hora y fecha recuperadas
0x158C	0xBE0600  	MOV.D	W0, W12
0x158E	0x80D37A  	MOV	_horaSistema, W10
0x1590	0x80D38B  	MOV	_horaSistema+2, W11
0x1592	0x21B8A0  	MOV	#lo_addr(_tiempo), W0
0x1594	0x781F80  	PUSH	W0
0x1596	0x07FC63  	RCALL	_AjustarTiempoSistema
0x1598	0xB1002F  	SUB	#2, W15
;Acelerografo.c,497 :: 		fuenteReloj = 2;                                         // Fuente de reloj = RTC
0x159A	0x21A611  	MOV	#lo_addr(_fuenteReloj), W1
0x159C	0xB3C020  	MOV.B	#2, W0
0x159E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,498 :: 		InterrupcionP1(0xB2);                                    // Envia la hora local a la RPi
0x15A0	0xB3CB2A  	MOV.B	#178, W10
0x15A2	0x07FBDC  	RCALL	_InterrupcionP1
;Acelerografo.c,499 :: 		}
L_spi_1101:
;Acelerografo.c,500 :: 		banEsc = 0;
0x15A4	0x21BE21  	MOV	#lo_addr(_banEsc), W1
0x15A6	0xEF2000  	CLR	W0
0x15A8	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,501 :: 		banSetReloj = 1; // Activa esta bandera para usar la hora/fecha recuperada
0x15AA	0x21B871  	MOV	#lo_addr(_banSetReloj), W1
0x15AC	0xB3C010  	MOV.B	#1, W0
0x15AE	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,479 :: 		if ((banEsc == 1) && (buffer == 0xF6))
L__spi_1213:
L__spi_1212:
;Acelerografo.c,504 :: 		}
L_end_spi_1:
0x15B0	0x7806CF  	POP	W13
0x15B2	0x78064F  	POP	W12
0x15B4	0x7805CF  	POP	W11
0x15B6	0x78054F  	POP	W10
0x15B8	0x2001A0  	MOV	#26, W0
0x15BA	0x09000C  	REPEAT	#12
0x15BC	0x78104F  	POP	[W0--]
0x15BE	0x78004F  	POP	W0
0x15C0	0xF90036  	POP	RCOUNT
0x15C2	0xF90032  	POP	DSRPAG
0x15C4	0xF90034  	POP	DSWPAG
0x15C6	0x064000  	RETFIE
; end of _spi_1
_RecuperarHoraRPI:
0x0674	0xFA0004  	LNK	#4
;TIEMPO_RPI.c,19 :: 		unsigned long RecuperarHoraRPI(unsigned char *tramaTiempoRpi){
;TIEMPO_RPI.c,23 :: 		horaRPi = ((unsigned long)tramaTiempoRpi[3]*3600)+((unsigned long)tramaTiempoRpi[4]*60)+((unsigned long)tramaTiempoRpi[5]);      //Calcula el segundo actual = hh*3600 + mm*60 + ss
0x0676	0x450063  	ADD	W10, #3, W0
0x0678	0xFB8010  	ZE	[W0], W0
0x067A	0xEB0080  	CLR	W1
0x067C	0x20E102  	MOV	#3600, W2
0x067E	0x200003  	MOV	#0, W3
0x0680	0x07FFAE  	RCALL	__Multiply_32x32
0x0682	0x980700  	MOV	W0, [W14+0]
0x0684	0x980711  	MOV	W1, [W14+2]
0x0686	0x450064  	ADD	W10, #4, W0
0x0688	0xFB8010  	ZE	[W0], W0
0x068A	0xEB0080  	CLR	W1
0x068C	0x2003C2  	MOV	#60, W2
0x068E	0x200003  	MOV	#0, W3
0x0690	0x07FFA6  	RCALL	__Multiply_32x32
0x0692	0x90010E  	MOV	[W14+0], W2
0x0694	0x90019E  	MOV	[W14+2], W3
0x0696	0x410100  	ADD	W2, W0, W2
0x0698	0x498181  	ADDC	W3, W1, W3
0x069A	0x450065  	ADD	W10, #5, W0
0x069C	0xFB8010  	ZE	[W0], W0
0x069E	0xEB0080  	CLR	W1
0x06A0	0x410000  	ADD	W2, W0, W0
0x06A2	0x498081  	ADDC	W3, W1, W1
;TIEMPO_RPI.c,25 :: 		return horaRPi;
;TIEMPO_RPI.c,27 :: 		}
L_end_RecuperarHoraRPI:
0x06A4	0xFA8000  	ULNK
0x06A6	0x060000  	RETURN
; end of _RecuperarHoraRPI
_RecuperarFechaRPI:
0x06A8	0xFA0004  	LNK	#4
;TIEMPO_RPI.c,8 :: 		unsigned long RecuperarFechaRPI(unsigned char *tramaTiempoRpi){
;TIEMPO_RPI.c,12 :: 		fechaRPi = ((unsigned long)tramaTiempoRpi[0]*10000)+((unsigned long)tramaTiempoRpi[1]*100)+((unsigned long)tramaTiempoRpi[2]);      //10000*aa + 100*mm + dd
0x06AA	0xFB801A  	ZE	[W10], W0
0x06AC	0xEB0080  	CLR	W1
0x06AE	0x227102  	MOV	#10000, W2
0x06B0	0x200003  	MOV	#0, W3
0x06B2	0x07FF95  	RCALL	__Multiply_32x32
0x06B4	0x980700  	MOV	W0, [W14+0]
0x06B6	0x980711  	MOV	W1, [W14+2]
0x06B8	0x450061  	ADD	W10, #1, W0
0x06BA	0xFB8010  	ZE	[W0], W0
0x06BC	0xEB0080  	CLR	W1
0x06BE	0x200642  	MOV	#100, W2
0x06C0	0x200003  	MOV	#0, W3
0x06C2	0x07FF8D  	RCALL	__Multiply_32x32
0x06C4	0x90010E  	MOV	[W14+0], W2
0x06C6	0x90019E  	MOV	[W14+2], W3
0x06C8	0x410100  	ADD	W2, W0, W2
0x06CA	0x498181  	ADDC	W3, W1, W3
0x06CC	0x450062  	ADD	W10, #2, W0
0x06CE	0xFB8010  	ZE	[W0], W0
0x06D0	0xEB0080  	CLR	W1
0x06D2	0x410000  	ADD	W2, W0, W0
0x06D4	0x498081  	ADDC	W3, W1, W1
;TIEMPO_RPI.c,14 :: 		return fechaRPi;
;TIEMPO_RPI.c,16 :: 		}
L_end_RecuperarFechaRPI:
0x06D6	0xFA8000  	ULNK
0x06D8	0x060000  	RETURN
; end of _RecuperarFechaRPI
_Timer3Int:
0x1098	0xF80034  	PUSH	DSWPAG
0x109A	0xF80032  	PUSH	DSRPAG
0x109C	0xF80036  	PUSH	RCOUNT
0x109E	0x781F80  	PUSH	W0
0x10A0	0x200020  	MOV	#2, W0
0x10A2	0x09000C  	REPEAT	#12
0x10A4	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,658 :: 		void Timer3Int() org IVT_ADDR_T3INTERRUPT
;Acelerografo.c,660 :: 		T3IF_bit = 0;
0x10A6	0x781F8A  	PUSH	W10
0x10A8	0x781F8B  	PUSH	W11
0x10AA	0x781F8C  	PUSH	W12
0x10AC	0x781F8D  	PUSH	W13
0x10AE	0xA90801  	BCLR	T3IF_bit, BitPos(T3IF_bit+0)
;Acelerografo.c,662 :: 		contTimer3++; // Incrementa una unidad cada vez que entra a la interrupcion por Timer3
0x10B0	0xB3C011  	MOV.B	#1, W1
0x10B2	0x21A560  	MOV	#lo_addr(_contTimer3), W0
0x10B4	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,665 :: 		if (contTimer3 == 5)
0x10B6	0x21A560  	MOV	#lo_addr(_contTimer3), W0
0x10B8	0x784010  	MOV.B	[W0], W0
0x10BA	0xE10465  	CP.B	W0, #5
0x10BC	0x3A0011  	BRA NZ	L_Timer3Int121
L__Timer3Int302:
;Acelerografo.c,667 :: 		DS3234_setDate(horaSistema, fechaSistema); // Configura la hora en el RTC con la hora recuperada de la RPi
0x10BE	0x80D3CC  	MOV	_fechaSistema, W12
0x10C0	0x80D3DD  	MOV	_fechaSistema+2, W13
0x10C2	0x80D37A  	MOV	_horaSistema, W10
0x10C4	0x80D38B  	MOV	_horaSistema+2, W11
0x10C6	0x07FE57  	RCALL	_DS3234_setDate
;Acelerografo.c,669 :: 		banSyncReloj = 0;
0x10C8	0x21A641  	MOV	#lo_addr(_banSyncReloj), W1
0x10CA	0xEF2000  	CLR	W0
0x10CC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,670 :: 		banSetReloj = 1; // Activa esta bandera para continuar trabajando con el pulso SQW
0x10CE	0x21B871  	MOV	#lo_addr(_banSetReloj), W1
0x10D0	0xB3C010  	MOV.B	#1, W0
0x10D2	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,673 :: 		InterrupcionP1(0xB2);
0x10D4	0xB3CB2A  	MOV.B	#178, W10
0x10D6	0x07FE42  	RCALL	_InterrupcionP1
;Acelerografo.c,674 :: 		contTimer3 = 0; // Encera el contador
0x10D8	0x21A561  	MOV	#lo_addr(_contTimer3), W1
0x10DA	0xEF2000  	CLR	W0
0x10DC	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,675 :: 		T3CON.TON = 0;  // Apaga el Timer3
0x10DE	0xA9E113  	BCLR	T3CON, #15
;Acelerografo.c,676 :: 		}
L_Timer3Int121:
;Acelerografo.c,677 :: 		}
L_end_Timer3Int:
0x10E0	0x7806CF  	POP	W13
0x10E2	0x78064F  	POP	W12
0x10E4	0x7805CF  	POP	W11
0x10E6	0x78054F  	POP	W10
0x10E8	0x2001A0  	MOV	#26, W0
0x10EA	0x09000C  	REPEAT	#12
0x10EC	0x78104F  	POP	[W0--]
0x10EE	0x78004F  	POP	W0
0x10F0	0xF90036  	POP	RCOUNT
0x10F2	0xF90032  	POP	DSRPAG
0x10F4	0xF90034  	POP	DSWPAG
0x10F6	0x064000  	RETFIE
; end of _Timer3Int
_DS3234_setDate:
0x0D76	0xFA000E  	LNK	#14
;TIEMPO_RTC.c,70 :: 		void DS3234_setDate(unsigned long longHora, unsigned long longFecha){
;TIEMPO_RTC.c,80 :: 		SPI2_Init_Advanced(_SPI_MASTER, _SPI_8_BIT, _SPI_PRESCALE_SEC_1, _SPI_PRESCALE_PRI_64, _SPI_SS_DISABLE, _SPI_DATA_SAMPLE_MIDDLE, _SPI_CLK_IDLE_LOW, _SPI_ACTIVE_2_IDLE);
0x0D78	0x781F8A  	PUSH	W10
0x0D7A	0x781F8B  	PUSH	W11
0x0D7C	0xBE9F8C  	PUSH.D	W12
0x0D7E	0xBE9F8A  	PUSH.D	W10
0x0D80	0xEF201A  	CLR	W13
0x0D82	0x2001CC  	MOV	#28, W12
0x0D84	0xEF2016  	CLR	W11
0x0D86	0x20020A  	MOV	#32, W10
0x0D88	0xEF2000  	CLR	W0
0x0D8A	0x781F80  	PUSH	W0
0x0D8C	0xEF2000  	CLR	W0
0x0D8E	0x781F80  	PUSH	W0
0x0D90	0xEF2000  	CLR	W0
0x0D92	0x781F80  	PUSH	W0
0x0D94	0xEF2000  	CLR	W0
0x0D96	0x781F80  	PUSH	W0
0x0D98	0x07FC2B  	RCALL	_SPI2_Init_Advanced
0x0D9A	0xB1008F  	SUB	#8, W15
0x0D9C	0xBE054F  	POP.D	W10
;TIEMPO_RTC.c,82 :: 		hora = (char)(longHora / 3600);
0x0D9E	0xBE9F8A  	PUSH.D	W10
0x0DA0	0x20E102  	MOV	#3600, W2
0x0DA2	0x200003  	MOV	#0, W3
0x0DA4	0xBE000A  	MOV.D	W10, W0
0x0DA6	0xEB0200  	CLR	W4
0x0DA8	0x07FBC5  	RCALL	__Divide_32x32
0x0DAA	0xBE054F  	POP.D	W10
0x0DAC	0x984700  	MOV.B	W0, [W14+0]
;TIEMPO_RTC.c,83 :: 		minuto = (char)((longHora%3600) / 60);
0x0DAE	0x20E102  	MOV	#3600, W2
0x0DB0	0x200003  	MOV	#0, W3
0x0DB2	0xBE000A  	MOV.D	W10, W0
0x0DB4	0xEB0200  	CLR	W4
0x0DB6	0x07FBE7  	RCALL	__Modulus_32x32
0x0DB8	0x980750  	MOV	W0, [W14+10]
0x0DBA	0x980761  	MOV	W1, [W14+12]
0x0DBC	0x2003C2  	MOV	#60, W2
0x0DBE	0x200003  	MOV	#0, W3
0x0DC0	0xEB0200  	CLR	W4
0x0DC2	0x07FBB8  	RCALL	__Divide_32x32
0x0DC4	0x984710  	MOV.B	W0, [W14+1]
;TIEMPO_RTC.c,84 :: 		segundo = (char)((longHora%3600) % 60);
0x0DC6	0x90005E  	MOV	[W14+10], W0
0x0DC8	0x9000EE  	MOV	[W14+12], W1
0x0DCA	0x2003C2  	MOV	#60, W2
0x0DCC	0x200003  	MOV	#0, W3
0x0DCE	0xEB0200  	CLR	W4
0x0DD0	0x07FBDA  	RCALL	__Modulus_32x32
0x0DD2	0xBE064F  	POP.D	W12
0x0DD4	0x984720  	MOV.B	W0, [W14+2]
;TIEMPO_RTC.c,86 :: 		anio = (char)(longFecha / 10000);
0x0DD6	0xBE9F8C  	PUSH.D	W12
0x0DD8	0x227102  	MOV	#10000, W2
0x0DDA	0x200003  	MOV	#0, W3
0x0DDC	0xBE000C  	MOV.D	W12, W0
0x0DDE	0xEB0200  	CLR	W4
0x0DE0	0x07FBA9  	RCALL	__Divide_32x32
0x0DE2	0xBE064F  	POP.D	W12
0x0DE4	0x984740  	MOV.B	W0, [W14+4]
;TIEMPO_RTC.c,87 :: 		mes = (char)((longFecha%10000) / 100);
0x0DE6	0x227102  	MOV	#10000, W2
0x0DE8	0x200003  	MOV	#0, W3
0x0DEA	0xBE000C  	MOV.D	W12, W0
0x0DEC	0xEB0200  	CLR	W4
0x0DEE	0x07FBCB  	RCALL	__Modulus_32x32
0x0DF0	0x980750  	MOV	W0, [W14+10]
0x0DF2	0x980761  	MOV	W1, [W14+12]
0x0DF4	0x200642  	MOV	#100, W2
0x0DF6	0x200003  	MOV	#0, W3
0x0DF8	0xEB0200  	CLR	W4
0x0DFA	0x07FB9C  	RCALL	__Divide_32x32
0x0DFC	0x984730  	MOV.B	W0, [W14+3]
;TIEMPO_RTC.c,88 :: 		dia = (char)((longFecha%10000) % 100);
0x0DFE	0x90005E  	MOV	[W14+10], W0
0x0E00	0x9000EE  	MOV	[W14+12], W1
0x0E02	0x200642  	MOV	#100, W2
0x0E04	0x200003  	MOV	#0, W3
0x0E06	0xEB0200  	CLR	W4
0x0E08	0x07FBBE  	RCALL	__Modulus_32x32
; dia start address is: 8 (W4)
0x0E0A	0x784200  	MOV.B	W0, W4
;TIEMPO_RTC.c,90 :: 		segundo = Dec2Bcd(segundo);
0x0E0C	0x90452E  	MOV.B	[W14+2], W10
0x0E0E	0x07FADF  	RCALL	_Dec2Bcd
0x0E10	0x984720  	MOV.B	W0, [W14+2]
;TIEMPO_RTC.c,91 :: 		minuto = Dec2Bcd(minuto);
0x0E12	0x90451E  	MOV.B	[W14+1], W10
0x0E14	0x07FADC  	RCALL	_Dec2Bcd
0x0E16	0x984710  	MOV.B	W0, [W14+1]
;TIEMPO_RTC.c,92 :: 		hora = Dec2Bcd(hora);
0x0E18	0x90450E  	MOV.B	[W14+0], W10
0x0E1A	0x07FAD9  	RCALL	_Dec2Bcd
0x0E1C	0x984700  	MOV.B	W0, [W14+0]
;TIEMPO_RTC.c,93 :: 		dia = Dec2Bcd(dia);
0x0E1E	0x784504  	MOV.B	W4, W10
; dia end address is: 8 (W4)
0x0E20	0x07FAD6  	RCALL	_Dec2Bcd
; dia start address is: 8 (W4)
0x0E22	0x784200  	MOV.B	W0, W4
;TIEMPO_RTC.c,94 :: 		mes = Dec2Bcd(mes);
0x0E24	0x90453E  	MOV.B	[W14+3], W10
0x0E26	0x07FAD3  	RCALL	_Dec2Bcd
0x0E28	0x984730  	MOV.B	W0, [W14+3]
;TIEMPO_RTC.c,95 :: 		anio = Dec2Bcd(anio);
0x0E2A	0x90454E  	MOV.B	[W14+4], W10
0x0E2C	0x07FAD0  	RCALL	_Dec2Bcd
0x0E2E	0x984740  	MOV.B	W0, [W14+4]
;TIEMPO_RTC.c,97 :: 		DS3234_write_byte(Segundos_Esc, segundo);
0x0E30	0x9045AE  	MOV.B	[W14+2], W11
0x0E32	0xB3C80A  	MOV.B	#128, W10
0x0E34	0x07FBF4  	RCALL	_DS3234_write_byte
;TIEMPO_RTC.c,98 :: 		DS3234_write_byte(Minutos_Esc, minuto);
0x0E36	0x90459E  	MOV.B	[W14+1], W11
0x0E38	0xB3C81A  	MOV.B	#129, W10
0x0E3A	0x07FBF1  	RCALL	_DS3234_write_byte
;TIEMPO_RTC.c,99 :: 		DS3234_write_byte(Horas_Esc, hora);
0x0E3C	0x90458E  	MOV.B	[W14+0], W11
0x0E3E	0xB3C82A  	MOV.B	#130, W10
0x0E40	0x07FBEE  	RCALL	_DS3234_write_byte
;TIEMPO_RTC.c,100 :: 		DS3234_write_byte(DiaMes_Esc, dia);
0x0E42	0x784584  	MOV.B	W4, W11
; dia end address is: 8 (W4)
0x0E44	0xB3C84A  	MOV.B	#132, W10
0x0E46	0x07FBEB  	RCALL	_DS3234_write_byte
;TIEMPO_RTC.c,101 :: 		DS3234_write_byte(Mes_Esc, mes);
0x0E48	0x9045BE  	MOV.B	[W14+3], W11
0x0E4A	0xB3C85A  	MOV.B	#133, W10
0x0E4C	0x07FBE8  	RCALL	_DS3234_write_byte
;TIEMPO_RTC.c,102 :: 		DS3234_write_byte(Anio_Esc, anio);
0x0E4E	0x9045CE  	MOV.B	[W14+4], W11
0x0E50	0xB3C86A  	MOV.B	#134, W10
0x0E52	0x07FBE5  	RCALL	_DS3234_write_byte
;TIEMPO_RTC.c,104 :: 		SPI2_Init();
0x0E54	0x07FADA  	RCALL	_SPI2_Init
;TIEMPO_RTC.c,108 :: 		}
;TIEMPO_RTC.c,106 :: 		return;
;TIEMPO_RTC.c,108 :: 		}
L_end_DS3234_setDate:
0x0E56	0x7805CF  	POP	W11
0x0E58	0x78054F  	POP	W10
0x0E5A	0xFA8000  	ULNK
0x0E5C	0x060000  	RETURN
; end of _DS3234_setDate
_Dec2Bcd:
0x03CE	0xFA0000  	LNK	#0
;__Lib_Conversions.c,304 :: 		
;__Lib_Conversions.c,305 :: 		
;__Lib_Conversions.c,307 :: 		
0x03D0	0xE15469  	CP.B	W10, #9
0x03D2	0x36000E  	BRA LEU	L_Dec2Bcd64
L__Dec2Bcd161:
;__Lib_Conversions.c,308 :: 		
0x03D4	0xFB800A  	ZE	W10, W0
0x03D6	0x2000A2  	MOV	#10, W2
0x03D8	0x090011  	REPEAT	#17
0x03DA	0xD80002  	DIV.S	W0, W2
;__Lib_Conversions.c,309 :: 		
0x03DC	0xFB8000  	ZE	W0, W0
0x03DE	0xDD0044  	SL	W0, #4, W0
; tmp start address is: 6 (W3)
0x03E0	0x784180  	MOV.B	W0, W3
;__Lib_Conversions.c,310 :: 		
0x03E2	0xFB800A  	ZE	W10, W0
0x03E4	0x2000A2  	MOV	#10, W2
0x03E6	0x090011  	REPEAT	#17
0x03E8	0xD80002  	DIV.S	W0, W2
0x03EA	0x780001  	MOV	W1, W0
; tmp start address is: 2 (W1)
0x03EC	0x71C080  	IOR.B	W3, W0, W1
; tmp end address is: 6 (W3)
;__Lib_Conversions.c,311 :: 		
; tmp end address is: 2 (W1)
0x03EE	0x370001  	BRA	L_Dec2Bcd65
L_Dec2Bcd64:
;__Lib_Conversions.c,312 :: 		
; tmp start address is: 2 (W1)
0x03F0	0x78408A  	MOV.B	W10, W1
; tmp end address is: 2 (W1)
L_Dec2Bcd65:
;__Lib_Conversions.c,313 :: 		
; tmp start address is: 2 (W1)
0x03F2	0x784001  	MOV.B	W1, W0
; tmp end address is: 2 (W1)
;__Lib_Conversions.c,314 :: 		
L_end_Dec2Bcd:
0x03F4	0xFA8000  	ULNK
0x03F6	0x060000  	RETURN
; end of _Dec2Bcd
_Timer2Int:
0x0F04	0xF80034  	PUSH	DSWPAG
0x0F06	0xF80032  	PUSH	DSRPAG
0x0F08	0xF80036  	PUSH	RCOUNT
0x0F0A	0x781F80  	PUSH	W0
0x0F0C	0x200020  	MOV	#2, W0
0x0F0E	0x09000C  	REPEAT	#12
0x0F10	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,634 :: 		void Timer2Int() org IVT_ADDR_T2INTERRUPT
;Acelerografo.c,637 :: 		T2IF_bit = 0;   // Limpia la bandera de interrupcion por desbordamiento del Timer2
0x0F12	0x781F8A  	PUSH	W10
0x0F14	0x781F8B  	PUSH	W11
0x0F16	0x781F8C  	PUSH	W12
0x0F18	0x781F8D  	PUSH	W13
0x0F1A	0xA9E800  	BCLR	T2IF_bit, BitPos(T2IF_bit+0)
;Acelerografo.c,638 :: 		contTimeout1++; // Incrementa el contador de Timeout
0x0F1C	0xB3C011  	MOV.B	#1, W1
0x0F1E	0x21A590  	MOV	#lo_addr(_contTimeout1), W0
0x0F20	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,641 :: 		if (contTimeout1 == 4)
0x0F22	0x21A590  	MOV	#lo_addr(_contTimeout1), W0
0x0F24	0x784010  	MOV.B	[W0], W0
0x0F26	0xE10464  	CP.B	W0, #4
0x0F28	0x3A001A  	BRA NZ	L_Timer2Int120
L__Timer2Int300:
;Acelerografo.c,643 :: 		T2CON.TON = 0;
0x0F2A	0xA9E111  	BCLR	T2CON, #15
;Acelerografo.c,644 :: 		TMR2 = 0;
0x0F2C	0xEF2106  	CLR	TMR2
;Acelerografo.c,645 :: 		contTimeout1 = 0;
0x0F2E	0x21A591  	MOV	#lo_addr(_contTimeout1), W1
0x0F30	0xEF2000  	CLR	W0
0x0F32	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,647 :: 		horaSistema = RecuperarHoraRTC();                        // Recupera la hora del RTC
0x0F34	0x07FCBF  	RCALL	_RecuperarHoraRTC
0x0F36	0x88D370  	MOV	W0, _horaSistema
0x0F38	0x88D381  	MOV	W1, _horaSistema+2
;Acelerografo.c,648 :: 		fechaSistema = RecuperarFechaRTC();                      // Recupera la fecha del RTC
0x0F3A	0x07FBCF  	RCALL	_RecuperarFechaRTC
0x0F3C	0x88D3C0  	MOV	W0, _fechaSistema
0x0F3E	0x88D3D1  	MOV	W1, _fechaSistema+2
;Acelerografo.c,649 :: 		AjustarTiempoSistema(horaSistema, fechaSistema, tiempo); // Actualiza los datos de la trama tiempo con la hora y fecha recuperadas del RTC
0x0F40	0xBE0600  	MOV.D	W0, W12
0x0F42	0x80D37A  	MOV	_horaSistema, W10
0x0F44	0x80D38B  	MOV	_horaSistema+2, W11
0x0F46	0x21B8A0  	MOV	#lo_addr(_tiempo), W0
0x0F48	0x781F80  	PUSH	W0
0x0F4A	0x07FF89  	RCALL	_AjustarTiempoSistema
0x0F4C	0xB1002F  	SUB	#2, W15
;Acelerografo.c,650 :: 		fuenteReloj = 5;                                         //**Indica que se obtuvo la hora del RTC
0x0F4E	0x21A611  	MOV	#lo_addr(_fuenteReloj), W1
0x0F50	0xB3C050  	MOV.B	#5, W0
0x0F52	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,651 :: 		banSetReloj = 1;
0x0F54	0x21B871  	MOV	#lo_addr(_banSetReloj), W1
0x0F56	0xB3C010  	MOV.B	#1, W0
0x0F58	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,652 :: 		InterrupcionP1(0xB2); // Envia la hora local a la RPi
0x0F5A	0xB3CB2A  	MOV.B	#178, W10
0x0F5C	0x07FEFF  	RCALL	_InterrupcionP1
;Acelerografo.c,653 :: 		}
L_Timer2Int120:
;Acelerografo.c,654 :: 		}
L_end_Timer2Int:
0x0F5E	0x7806CF  	POP	W13
0x0F60	0x78064F  	POP	W12
0x0F62	0x7805CF  	POP	W11
0x0F64	0x78054F  	POP	W10
0x0F66	0x2001A0  	MOV	#26, W0
0x0F68	0x09000C  	REPEAT	#12
0x0F6A	0x78104F  	POP	[W0--]
0x0F6C	0x78004F  	POP	W0
0x0F6E	0xF90036  	POP	RCOUNT
0x0F70	0xF90032  	POP	DSRPAG
0x0F72	0xF90034  	POP	DSWPAG
0x0F74	0x064000  	RETFIE
; end of _Timer2Int
_Timer1Int:
0x0F76	0xF80034  	PUSH	DSWPAG
0x0F78	0xF80032  	PUSH	DSRPAG
0x0F7A	0xF80036  	PUSH	RCOUNT
0x0F7C	0x781F80  	PUSH	W0
0x0F7E	0x200020  	MOV	#2, W0
0x0F80	0x09000C  	REPEAT	#12
0x0F82	0x781FB0  	PUSH	[W0++]
;Acelerografo.c,587 :: 		void Timer1Int() org IVT_ADDR_T1INTERRUPT
;Acelerografo.c,590 :: 		T1IF_bit = 0; // Limpia la bandera de interrupcion por desbordamiento del Timer1
0x0F84	0x781F8A  	PUSH	W10
0x0F86	0xA96800  	BCLR	T1IF_bit, BitPos(T1IF_bit+0)
;Acelerografo.c,592 :: 		numFIFO = ADXL355_read_byte(FIFO_ENTRIES); // 75                            //Lee el numero de muestras disponibles en el FIFO
0x0F88	0xB3C05A  	MOV.B	#5, W10
0x0F8A	0x07FCD0  	RCALL	_ADXL355_read_byte
0x0F8C	0x21A551  	MOV	#lo_addr(_numFIFO), W1
0x0F8E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,593 :: 		numSetsFIFO = (numFIFO) / 3;               // 25                            //Lee el numero de sets disponibles en el FIFO
0x0F90	0xFB8000  	ZE	W0, W0
0x0F92	0x200032  	MOV	#3, W2
0x0F94	0x090011  	REPEAT	#17
0x0F96	0xD80002  	DIV.S	W0, W2
0x0F98	0x780080  	MOV	W0, W1
0x0F9A	0x21A540  	MOV	#lo_addr(_numSetsFIFO), W0
0x0F9C	0x784801  	MOV.B	W1, [W0]
;Acelerografo.c,596 :: 		for (x = 0; x < numSetsFIFO; x++)
0x0F9E	0xEF2000  	CLR	W0
0x0FA0	0x88D360  	MOV	W0, _x
L_Timer1Int106:
0x0FA2	0x21A540  	MOV	#lo_addr(_numSetsFIFO), W0
0x0FA4	0xFB8090  	ZE	[W0], W1
0x0FA6	0x21A6C0  	MOV	#lo_addr(_x), W0
0x0FA8	0xE10810  	CP	W1, [W0]
0x0FAA	0x36001A  	BRA LEU	L_Timer1Int107
L__Timer1Int293:
;Acelerografo.c,598 :: 		ADXL355_read_FIFO(datosLeidos); // Lee una sola posicion del FIFO
0x0FAC	0x21A2DA  	MOV	#lo_addr(_datosLeidos), W10
0x0FAE	0x07FE80  	RCALL	_ADXL355_read_FIFO
;Acelerografo.c,599 :: 		for (y = 0; y < 9; y++)
0x0FB0	0xEF2000  	CLR	W0
0x0FB2	0x88D350  	MOV	W0, _y
L_Timer1Int109:
0x0FB4	0x80D350  	MOV	_y, W0
0x0FB6	0xE10069  	CP	W0, #9
0x0FB8	0x31000F  	BRA GEU	L_Timer1Int110
L__Timer1Int294:
;Acelerografo.c,601 :: 		datosFIFO[y + (x * 9)] = datosLeidos[y]; // LLena la trama datosFIFO
0x0FBA	0x80D361  	MOV	_x, W1
0x0FBC	0x200090  	MOV	#9, W0
0x0FBE	0xB80900  	MUL.UU	W1, W0, W2
0x0FC0	0x21A6A0  	MOV	#lo_addr(_y), W0
0x0FC2	0x410090  	ADD	W2, [W0], W1
0x0FC4	0x21A7C0  	MOV	#lo_addr(_datosFIFO), W0
0x0FC6	0x400101  	ADD	W0, W1, W2
0x0FC8	0x21A2D1  	MOV	#lo_addr(_datosLeidos), W1
0x0FCA	0x21A6A0  	MOV	#lo_addr(_y), W0
0x0FCC	0x408010  	ADD	W1, [W0], W0
0x0FCE	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,599 :: 		for (y = 0; y < 9; y++)
0x0FD0	0x200011  	MOV	#1, W1
0x0FD2	0x21A6A0  	MOV	#lo_addr(_y), W0
0x0FD4	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,602 :: 		}
0x0FD6	0x37FFEE  	BRA	L_Timer1Int109
L_Timer1Int110:
;Acelerografo.c,596 :: 		for (x = 0; x < numSetsFIFO; x++)
0x0FD8	0x200011  	MOV	#1, W1
0x0FDA	0x21A6C0  	MOV	#lo_addr(_x), W0
0x0FDC	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,603 :: 		}
0x0FDE	0x37FFE1  	BRA	L_Timer1Int106
L_Timer1Int107:
;Acelerografo.c,606 :: 		for (x = 0; x < (numSetsFIFO * 9); x++)
0x0FE0	0xEF2000  	CLR	W0
0x0FE2	0x88D360  	MOV	W0, _x
L_Timer1Int112:
0x0FE4	0x21A540  	MOV	#lo_addr(_numSetsFIFO), W0
0x0FE6	0xFB8090  	ZE	[W0], W1
0x0FE8	0x200090  	MOV	#9, W0
0x0FEA	0xB98900  	MUL.SS	W1, W0, W2
0x0FEC	0x21A6C0  	MOV	#lo_addr(_x), W0
0x0FEE	0xE11010  	CP	W2, [W0]
0x0FF0	0x360036  	BRA LEU	L_Timer1Int113
L__Timer1Int295:
;Acelerografo.c,608 :: 		if ((x == 0) || (x % 9 == 0))
0x0FF2	0x80D360  	MOV	_x, W0
0x0FF4	0xE10060  	CP	W0, #0
0x0FF6	0x320008  	BRA Z	L__Timer1Int216
L__Timer1Int296:
0x0FF8	0x80D360  	MOV	_x, W0
0x0FFA	0x200092  	MOV	#9, W2
0x0FFC	0x090011  	REPEAT	#17
0x0FFE	0xD88002  	DIV.U	W0, W2
0x1000	0x780001  	MOV	W1, W0
0x1002	0xE10060  	CP	W0, #0
0x1004	0x320001  	BRA Z	L__Timer1Int215
L__Timer1Int297:
0x1006	0x37001B  	BRA	L_Timer1Int117
L__Timer1Int216:
L__Timer1Int215:
;Acelerografo.c,610 :: 		tramaCompleta[contFIFO + contMuestras + x] = contMuestras;
0x1008	0x21A580  	MOV	#lo_addr(_contMuestras), W0
0x100A	0xFB8090  	ZE	[W0], W1
0x100C	0x21A5A0  	MOV	#lo_addr(_contFIFO), W0
0x100E	0x408090  	ADD	W1, [W0], W1
0x1010	0x21A6C0  	MOV	#lo_addr(_x), W0
0x1012	0x408090  	ADD	W1, [W0], W1
0x1014	0x210630  	MOV	#lo_addr(_tramaCompleta), W0
0x1016	0x400081  	ADD	W0, W1, W1
0x1018	0x21A580  	MOV	#lo_addr(_contMuestras), W0
0x101A	0x784890  	MOV.B	[W0], [W1]
;Acelerografo.c,611 :: 		tramaCompleta[contFIFO + contMuestras + x + 1] = datosFIFO[x];
0x101C	0x21A580  	MOV	#lo_addr(_contMuestras), W0
0x101E	0xFB8090  	ZE	[W0], W1
0x1020	0x21A5A0  	MOV	#lo_addr(_contFIFO), W0
0x1022	0x408090  	ADD	W1, [W0], W1
0x1024	0x21A6C0  	MOV	#lo_addr(_x), W0
0x1026	0x408010  	ADD	W1, [W0], W0
0x1028	0x4000E1  	ADD	W0, #1, W1
0x102A	0x210630  	MOV	#lo_addr(_tramaCompleta), W0
0x102C	0x400101  	ADD	W0, W1, W2
0x102E	0x21A7C1  	MOV	#lo_addr(_datosFIFO), W1
0x1030	0x21A6C0  	MOV	#lo_addr(_x), W0
0x1032	0x408010  	ADD	W1, [W0], W0
0x1034	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,612 :: 		contMuestras++;
0x1036	0xB3C011  	MOV.B	#1, W1
0x1038	0x21A580  	MOV	#lo_addr(_contMuestras), W0
0x103A	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,613 :: 		}
0x103C	0x37000C  	BRA	L_Timer1Int118
L_Timer1Int117:
;Acelerografo.c,616 :: 		tramaCompleta[contFIFO + contMuestras + x] = datosFIFO[x];
0x103E	0x21A580  	MOV	#lo_addr(_contMuestras), W0
0x1040	0xFB8090  	ZE	[W0], W1
0x1042	0x21A5A0  	MOV	#lo_addr(_contFIFO), W0
0x1044	0x408090  	ADD	W1, [W0], W1
0x1046	0x21A6C0  	MOV	#lo_addr(_x), W0
0x1048	0x408090  	ADD	W1, [W0], W1
0x104A	0x210630  	MOV	#lo_addr(_tramaCompleta), W0
0x104C	0x400101  	ADD	W0, W1, W2
0x104E	0x21A7C1  	MOV	#lo_addr(_datosFIFO), W1
0x1050	0x21A6C0  	MOV	#lo_addr(_x), W0
0x1052	0x408010  	ADD	W1, [W0], W0
0x1054	0x784910  	MOV.B	[W0], [W2]
;Acelerografo.c,617 :: 		}
L_Timer1Int118:
;Acelerografo.c,606 :: 		for (x = 0; x < (numSetsFIFO * 9); x++)
0x1056	0x200011  	MOV	#1, W1
0x1058	0x21A6C0  	MOV	#lo_addr(_x), W0
0x105A	0x408810  	ADD	W1, [W0], [W0]
;Acelerografo.c,618 :: 		}
0x105C	0x37FFC3  	BRA	L_Timer1Int112
L_Timer1Int113:
;Acelerografo.c,620 :: 		contFIFO = (contMuestras * 9); // Incrementa el contador de FIFOs
0x105E	0x21A580  	MOV	#lo_addr(_contMuestras), W0
0x1060	0xFB8090  	ZE	[W0], W1
0x1062	0x200090  	MOV	#9, W0
0x1064	0xB98800  	MUL.SS	W1, W0, W0
0x1066	0x88D2D0  	MOV	W0, _contFIFO
;Acelerografo.c,622 :: 		contTimer1++; // Incrementa una unidad cada vez que entra a la interrupcion por Timer1
0x1068	0xB3C011  	MOV.B	#1, W1
0x106A	0x21A570  	MOV	#lo_addr(_contTimer1), W0
0x106C	0x40C810  	ADD.B	W1, [W0], [W0]
;Acelerografo.c,624 :: 		if (contTimer1 == numTMR1)
0x106E	0x21A570  	MOV	#lo_addr(_contTimer1), W0
0x1070	0x784090  	MOV.B	[W0], W1
0x1072	0x21BE30  	MOV	#lo_addr(_numTMR1), W0
0x1074	0xE10C10  	CP.B	W1, [W0]
0x1076	0x3A0007  	BRA NZ	L_Timer1Int119
L__Timer1Int298:
;Acelerografo.c,626 :: 		T1CON.TON = 0;  // Apaga el Timer1
0x1078	0xA9E105  	BCLR	T1CON, #15
;Acelerografo.c,627 :: 		banCiclo = 2;   // Activa la bandera que indica que se completo un ciclo de medicion
0x107A	0x21BE11  	MOV	#lo_addr(_banCiclo), W1
0x107C	0xB3C020  	MOV.B	#2, W0
0x107E	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,628 :: 		contTimer1 = 0; // Limpia el contador de interrupciones por Timer1
0x1080	0x21A571  	MOV	#lo_addr(_contTimer1), W1
0x1082	0xEF2000  	CLR	W0
0x1084	0x784880  	MOV.B	W0, [W1]
;Acelerografo.c,629 :: 		}
L_Timer1Int119:
;Acelerografo.c,630 :: 		}
L_end_Timer1Int:
0x1086	0x78054F  	POP	W10
0x1088	0x2001A0  	MOV	#26, W0
0x108A	0x09000C  	REPEAT	#12
0x108C	0x78104F  	POP	[W0--]
0x108E	0x78004F  	POP	W0
0x1090	0xF90036  	POP	RCOUNT
0x1092	0xF90032  	POP	DSRPAG
0x1094	0xF90034  	POP	DSWPAG
0x1096	0x064000  	RETFIE
; end of _Timer1Int
;,0 :: _initBlock_0 [2614]
; Containing: ?ICS?lstr1_TIEMPO_GPS [19]
;             ?ICS?lstr6_TIEMPO_GPS [16]
;             ?ICS?lstr2_TIEMPO_GPS [16]
;             ?ICS?lstr3_TIEMPO_GPS [48]
;             ?ICS_tramaCompleta [2506]
;             ?ICS_datosLeidos [9]
0x8000	0x5024 ;_initBlock_0+0 : ?ICS?lstr1_TIEMPO_GPS at 0x8000
0x8002	0x544D ;_initBlock_0+2
0x8004	0x324B ;_initBlock_0+4
0x8006	0x3032 ;_initBlock_0+6
0x8008	0x312C ;_initBlock_0+8
0x800A	0x3030 ;_initBlock_0+10
0x800C	0x2A30 ;_initBlock_0+12
0x800E	0x4631 ;_initBlock_0+14
0x8010	0x0A0D ;_initBlock_0+16
0x8012	0x2400 ;_initBlock_0+18 : ?ICS?lstr6_TIEMPO_GPS at 0x8013
0x8014	0x4D50 ;_initBlock_0+20
0x8016	0x4B54 ;_initBlock_0+22
0x8018	0x3135 ;_initBlock_0+24
0x801A	0x2C33 ;_initBlock_0+26
0x801C	0x2A31 ;_initBlock_0+28
0x801E	0x3832 ;_initBlock_0+30
0x8020	0x0A0D ;_initBlock_0+32
0x8022	0x2400 ;_initBlock_0+34 : ?ICS?lstr2_TIEMPO_GPS at 0x8023
0x8024	0x4D50 ;_initBlock_0+36
0x8026	0x4B54 ;_initBlock_0+38
0x8028	0x3133 ;_initBlock_0+40
0x802A	0x2C33 ;_initBlock_0+42
0x802C	0x2A31 ;_initBlock_0+44
0x802E	0x4532 ;_initBlock_0+46
0x8030	0x0A0D ;_initBlock_0+48
0x8032	0x2400 ;_initBlock_0+50 : ?ICS?lstr3_TIEMPO_GPS at 0x8033
0x8034	0x4D50 ;_initBlock_0+52
0x8036	0x4B54 ;_initBlock_0+54
0x8038	0x3133 ;_initBlock_0+56
0x803A	0x2C34 ;_initBlock_0+58
0x803C	0x2C30 ;_initBlock_0+60
0x803E	0x2C31 ;_initBlock_0+62
0x8040	0x2C30 ;_initBlock_0+64
0x8042	0x2C30 ;_initBlock_0+66
0x8044	0x2C30 ;_initBlock_0+68
0x8046	0x2C30 ;_initBlock_0+70
0x8048	0x2C30 ;_initBlock_0+72
0x804A	0x2C30 ;_initBlock_0+74
0x804C	0x2C30 ;_initBlock_0+76
0x804E	0x2C30 ;_initBlock_0+78
0x8050	0x2C30 ;_initBlock_0+80
0x8052	0x2C30 ;_initBlock_0+82
0x8054	0x2C30 ;_initBlock_0+84
0x8056	0x2C30 ;_initBlock_0+86
0x8058	0x2C30 ;_initBlock_0+88
0x805A	0x2C30 ;_initBlock_0+90
0x805C	0x2A30 ;_initBlock_0+92
0x805E	0x3932 ;_initBlock_0+94
0x8060	0x0A0D ;_initBlock_0+96
0x8062	0x0000 ;_initBlock_0+98 : ?ICS_tramaCompleta at 0x8063
0x8064	0x0000 ;_initBlock_0+100
0x8066	0x0000 ;_initBlock_0+102
0x8068	0x0000 ;_initBlock_0+104
0x806A	0x0000 ;_initBlock_0+106
0x806C	0x0000 ;_initBlock_0+108
0x806E	0x0000 ;_initBlock_0+110
0x8070	0x0000 ;_initBlock_0+112
0x8072	0x0000 ;_initBlock_0+114
0x8074	0x0000 ;_initBlock_0+116
0x8076	0x0000 ;_initBlock_0+118
0x8078	0x0000 ;_initBlock_0+120
0x807A	0x0000 ;_initBlock_0+122
0x807C	0x0000 ;_initBlock_0+124
0x807E	0x0000 ;_initBlock_0+126
0x8080	0x0000 ;_initBlock_0+128
0x8082	0x0000 ;_initBlock_0+130
0x8084	0x0000 ;_initBlock_0+132
0x8086	0x0000 ;_initBlock_0+134
0x8088	0x0000 ;_initBlock_0+136
0x808A	0x0000 ;_initBlock_0+138
0x808C	0x0000 ;_initBlock_0+140
0x808E	0x0000 ;_initBlock_0+142
0x8090	0x0000 ;_initBlock_0+144
0x8092	0x0000 ;_initBlock_0+146
0x8094	0x0000 ;_initBlock_0+148
0x8096	0x0000 ;_initBlock_0+150
0x8098	0x0000 ;_initBlock_0+152
0x809A	0x0000 ;_initBlock_0+154
0x809C	0x0000 ;_initBlock_0+156
0x809E	0x0000 ;_initBlock_0+158
0x80A0	0x0000 ;_initBlock_0+160
0x80A2	0x0000 ;_initBlock_0+162
0x80A4	0x0000 ;_initBlock_0+164
0x80A6	0x0000 ;_initBlock_0+166
0x80A8	0x0000 ;_initBlock_0+168
0x80AA	0x0000 ;_initBlock_0+170
0x80AC	0x0000 ;_initBlock_0+172
0x80AE	0x0000 ;_initBlock_0+174
0x80B0	0x0000 ;_initBlock_0+176
0x80B2	0x0000 ;_initBlock_0+178
0x80B4	0x0000 ;_initBlock_0+180
0x80B6	0x0000 ;_initBlock_0+182
0x80B8	0x0000 ;_initBlock_0+184
0x80BA	0x0000 ;_initBlock_0+186
0x80BC	0x0000 ;_initBlock_0+188
0x80BE	0x0000 ;_initBlock_0+190
0x80C0	0x0000 ;_initBlock_0+192
0x80C2	0x0000 ;_initBlock_0+194
0x80C4	0x0000 ;_initBlock_0+196
0x80C6	0x0000 ;_initBlock_0+198
0x80C8	0x0000 ;_initBlock_0+200
0x80CA	0x0000 ;_initBlock_0+202
0x80CC	0x0000 ;_initBlock_0+204
0x80CE	0x0000 ;_initBlock_0+206
0x80D0	0x0000 ;_initBlock_0+208
0x80D2	0x0000 ;_initBlock_0+210
0x80D4	0x0000 ;_initBlock_0+212
0x80D6	0x0000 ;_initBlock_0+214
0x80D8	0x0000 ;_initBlock_0+216
0x80DA	0x0000 ;_initBlock_0+218
0x80DC	0x0000 ;_initBlock_0+220
0x80DE	0x0000 ;_initBlock_0+222
0x80E0	0x0000 ;_initBlock_0+224
0x80E2	0x0000 ;_initBlock_0+226
0x80E4	0x0000 ;_initBlock_0+228
0x80E6	0x0000 ;_initBlock_0+230
0x80E8	0x0000 ;_initBlock_0+232
0x80EA	0x0000 ;_initBlock_0+234
0x80EC	0x0000 ;_initBlock_0+236
0x80EE	0x0000 ;_initBlock_0+238
0x80F0	0x0000 ;_initBlock_0+240
0x80F2	0x0000 ;_initBlock_0+242
0x80F4	0x0000 ;_initBlock_0+244
0x80F6	0x0000 ;_initBlock_0+246
0x80F8	0x0000 ;_initBlock_0+248
0x80FA	0x0000 ;_initBlock_0+250
0x80FC	0x0000 ;_initBlock_0+252
0x80FE	0x0000 ;_initBlock_0+254
0x8100	0x0000 ;_initBlock_0+256
0x8102	0x0000 ;_initBlock_0+258
0x8104	0x0000 ;_initBlock_0+260
0x8106	0x0000 ;_initBlock_0+262
0x8108	0x0000 ;_initBlock_0+264
0x810A	0x0000 ;_initBlock_0+266
0x810C	0x0000 ;_initBlock_0+268
0x810E	0x0000 ;_initBlock_0+270
0x8110	0x0000 ;_initBlock_0+272
0x8112	0x0000 ;_initBlock_0+274
0x8114	0x0000 ;_initBlock_0+276
0x8116	0x0000 ;_initBlock_0+278
0x8118	0x0000 ;_initBlock_0+280
0x811A	0x0000 ;_initBlock_0+282
0x811C	0x0000 ;_initBlock_0+284
0x811E	0x0000 ;_initBlock_0+286
0x8120	0x0000 ;_initBlock_0+288
0x8122	0x0000 ;_initBlock_0+290
0x8124	0x0000 ;_initBlock_0+292
0x8126	0x0000 ;_initBlock_0+294
0x8128	0x0000 ;_initBlock_0+296
0x812A	0x0000 ;_initBlock_0+298
0x812C	0x0000 ;_initBlock_0+300
0x812E	0x0000 ;_initBlock_0+302
0x8130	0x0000 ;_initBlock_0+304
0x8132	0x0000 ;_initBlock_0+306
0x8134	0x0000 ;_initBlock_0+308
0x8136	0x0000 ;_initBlock_0+310
0x8138	0x0000 ;_initBlock_0+312
0x813A	0x0000 ;_initBlock_0+314
0x813C	0x0000 ;_initBlock_0+316
0x813E	0x0000 ;_initBlock_0+318
0x8140	0x0000 ;_initBlock_0+320
0x8142	0x0000 ;_initBlock_0+322
0x8144	0x0000 ;_initBlock_0+324
0x8146	0x0000 ;_initBlock_0+326
0x8148	0x0000 ;_initBlock_0+328
0x814A	0x0000 ;_initBlock_0+330
0x814C	0x0000 ;_initBlock_0+332
0x814E	0x0000 ;_initBlock_0+334
0x8150	0x0000 ;_initBlock_0+336
0x8152	0x0000 ;_initBlock_0+338
0x8154	0x0000 ;_initBlock_0+340
0x8156	0x0000 ;_initBlock_0+342
0x8158	0x0000 ;_initBlock_0+344
0x815A	0x0000 ;_initBlock_0+346
0x815C	0x0000 ;_initBlock_0+348
0x815E	0x0000 ;_initBlock_0+350
0x8160	0x0000 ;_initBlock_0+352
0x8162	0x0000 ;_initBlock_0+354
0x8164	0x0000 ;_initBlock_0+356
0x8166	0x0000 ;_initBlock_0+358
0x8168	0x0000 ;_initBlock_0+360
0x816A	0x0000 ;_initBlock_0+362
0x816C	0x0000 ;_initBlock_0+364
0x816E	0x0000 ;_initBlock_0+366
0x8170	0x0000 ;_initBlock_0+368
0x8172	0x0000 ;_initBlock_0+370
0x8174	0x0000 ;_initBlock_0+372
0x8176	0x0000 ;_initBlock_0+374
0x8178	0x0000 ;_initBlock_0+376
0x817A	0x0000 ;_initBlock_0+378
0x817C	0x0000 ;_initBlock_0+380
0x817E	0x0000 ;_initBlock_0+382
0x8180	0x0000 ;_initBlock_0+384
0x8182	0x0000 ;_initBlock_0+386
0x8184	0x0000 ;_initBlock_0+388
0x8186	0x0000 ;_initBlock_0+390
0x8188	0x0000 ;_initBlock_0+392
0x818A	0x0000 ;_initBlock_0+394
0x818C	0x0000 ;_initBlock_0+396
0x818E	0x0000 ;_initBlock_0+398
0x8190	0x0000 ;_initBlock_0+400
0x8192	0x0000 ;_initBlock_0+402
0x8194	0x0000 ;_initBlock_0+404
0x8196	0x0000 ;_initBlock_0+406
0x8198	0x0000 ;_initBlock_0+408
0x819A	0x0000 ;_initBlock_0+410
0x819C	0x0000 ;_initBlock_0+412
0x819E	0x0000 ;_initBlock_0+414
0x81A0	0x0000 ;_initBlock_0+416
0x81A2	0x0000 ;_initBlock_0+418
0x81A4	0x0000 ;_initBlock_0+420
0x81A6	0x0000 ;_initBlock_0+422
0x81A8	0x0000 ;_initBlock_0+424
0x81AA	0x0000 ;_initBlock_0+426
0x81AC	0x0000 ;_initBlock_0+428
0x81AE	0x0000 ;_initBlock_0+430
0x81B0	0x0000 ;_initBlock_0+432
0x81B2	0x0000 ;_initBlock_0+434
0x81B4	0x0000 ;_initBlock_0+436
0x81B6	0x0000 ;_initBlock_0+438
0x81B8	0x0000 ;_initBlock_0+440
0x81BA	0x0000 ;_initBlock_0+442
0x81BC	0x0000 ;_initBlock_0+444
0x81BE	0x0000 ;_initBlock_0+446
0x81C0	0x0000 ;_initBlock_0+448
0x81C2	0x0000 ;_initBlock_0+450
0x81C4	0x0000 ;_initBlock_0+452
0x81C6	0x0000 ;_initBlock_0+454
0x81C8	0x0000 ;_initBlock_0+456
0x81CA	0x0000 ;_initBlock_0+458
0x81CC	0x0000 ;_initBlock_0+460
0x81CE	0x0000 ;_initBlock_0+462
0x81D0	0x0000 ;_initBlock_0+464
0x81D2	0x0000 ;_initBlock_0+466
0x81D4	0x0000 ;_initBlock_0+468
0x81D6	0x0000 ;_initBlock_0+470
0x81D8	0x0000 ;_initBlock_0+472
0x81DA	0x0000 ;_initBlock_0+474
0x81DC	0x0000 ;_initBlock_0+476
0x81DE	0x0000 ;_initBlock_0+478
0x81E0	0x0000 ;_initBlock_0+480
0x81E2	0x0000 ;_initBlock_0+482
0x81E4	0x0000 ;_initBlock_0+484
0x81E6	0x0000 ;_initBlock_0+486
0x81E8	0x0000 ;_initBlock_0+488
0x81EA	0x0000 ;_initBlock_0+490
0x81EC	0x0000 ;_initBlock_0+492
0x81EE	0x0000 ;_initBlock_0+494
0x81F0	0x0000 ;_initBlock_0+496
0x81F2	0x0000 ;_initBlock_0+498
0x81F4	0x0000 ;_initBlock_0+500
0x81F6	0x0000 ;_initBlock_0+502
0x81F8	0x0000 ;_initBlock_0+504
0x81FA	0x0000 ;_initBlock_0+506
0x81FC	0x0000 ;_initBlock_0+508
0x81FE	0x0000 ;_initBlock_0+510
0x8200	0x0000 ;_initBlock_0+512
0x8202	0x0000 ;_initBlock_0+514
0x8204	0x0000 ;_initBlock_0+516
0x8206	0x0000 ;_initBlock_0+518
0x8208	0x0000 ;_initBlock_0+520
0x820A	0x0000 ;_initBlock_0+522
0x820C	0x0000 ;_initBlock_0+524
0x820E	0x0000 ;_initBlock_0+526
0x8210	0x0000 ;_initBlock_0+528
0x8212	0x0000 ;_initBlock_0+530
0x8214	0x0000 ;_initBlock_0+532
0x8216	0x0000 ;_initBlock_0+534
0x8218	0x0000 ;_initBlock_0+536
0x821A	0x0000 ;_initBlock_0+538
0x821C	0x0000 ;_initBlock_0+540
0x821E	0x0000 ;_initBlock_0+542
0x8220	0x0000 ;_initBlock_0+544
0x8222	0x0000 ;_initBlock_0+546
0x8224	0x0000 ;_initBlock_0+548
0x8226	0x0000 ;_initBlock_0+550
0x8228	0x0000 ;_initBlock_0+552
0x822A	0x0000 ;_initBlock_0+554
0x822C	0x0000 ;_initBlock_0+556
0x822E	0x0000 ;_initBlock_0+558
0x8230	0x0000 ;_initBlock_0+560
0x8232	0x0000 ;_initBlock_0+562
0x8234	0x0000 ;_initBlock_0+564
0x8236	0x0000 ;_initBlock_0+566
0x8238	0x0000 ;_initBlock_0+568
0x823A	0x0000 ;_initBlock_0+570
0x823C	0x0000 ;_initBlock_0+572
0x823E	0x0000 ;_initBlock_0+574
0x8240	0x0000 ;_initBlock_0+576
0x8242	0x0000 ;_initBlock_0+578
0x8244	0x0000 ;_initBlock_0+580
0x8246	0x0000 ;_initBlock_0+582
0x8248	0x0000 ;_initBlock_0+584
0x824A	0x0000 ;_initBlock_0+586
0x824C	0x0000 ;_initBlock_0+588
0x824E	0x0000 ;_initBlock_0+590
0x8250	0x0000 ;_initBlock_0+592
0x8252	0x0000 ;_initBlock_0+594
0x8254	0x0000 ;_initBlock_0+596
0x8256	0x0000 ;_initBlock_0+598
0x8258	0x0000 ;_initBlock_0+600
0x825A	0x0000 ;_initBlock_0+602
0x825C	0x0000 ;_initBlock_0+604
0x825E	0x0000 ;_initBlock_0+606
0x8260	0x0000 ;_initBlock_0+608
0x8262	0x0000 ;_initBlock_0+610
0x8264	0x0000 ;_initBlock_0+612
0x8266	0x0000 ;_initBlock_0+614
0x8268	0x0000 ;_initBlock_0+616
0x826A	0x0000 ;_initBlock_0+618
0x826C	0x0000 ;_initBlock_0+620
0x826E	0x0000 ;_initBlock_0+622
0x8270	0x0000 ;_initBlock_0+624
0x8272	0x0000 ;_initBlock_0+626
0x8274	0x0000 ;_initBlock_0+628
0x8276	0x0000 ;_initBlock_0+630
0x8278	0x0000 ;_initBlock_0+632
0x827A	0x0000 ;_initBlock_0+634
0x827C	0x0000 ;_initBlock_0+636
0x827E	0x0000 ;_initBlock_0+638
0x8280	0x0000 ;_initBlock_0+640
0x8282	0x0000 ;_initBlock_0+642
0x8284	0x0000 ;_initBlock_0+644
0x8286	0x0000 ;_initBlock_0+646
0x8288	0x0000 ;_initBlock_0+648
0x828A	0x0000 ;_initBlock_0+650
0x828C	0x0000 ;_initBlock_0+652
0x828E	0x0000 ;_initBlock_0+654
0x8290	0x0000 ;_initBlock_0+656
0x8292	0x0000 ;_initBlock_0+658
0x8294	0x0000 ;_initBlock_0+660
0x8296	0x0000 ;_initBlock_0+662
0x8298	0x0000 ;_initBlock_0+664
0x829A	0x0000 ;_initBlock_0+666
0x829C	0x0000 ;_initBlock_0+668
0x829E	0x0000 ;_initBlock_0+670
0x82A0	0x0000 ;_initBlock_0+672
0x82A2	0x0000 ;_initBlock_0+674
0x82A4	0x0000 ;_initBlock_0+676
0x82A6	0x0000 ;_initBlock_0+678
0x82A8	0x0000 ;_initBlock_0+680
0x82AA	0x0000 ;_initBlock_0+682
0x82AC	0x0000 ;_initBlock_0+684
0x82AE	0x0000 ;_initBlock_0+686
0x82B0	0x0000 ;_initBlock_0+688
0x82B2	0x0000 ;_initBlock_0+690
0x82B4	0x0000 ;_initBlock_0+692
0x82B6	0x0000 ;_initBlock_0+694
0x82B8	0x0000 ;_initBlock_0+696
0x82BA	0x0000 ;_initBlock_0+698
0x82BC	0x0000 ;_initBlock_0+700
0x82BE	0x0000 ;_initBlock_0+702
0x82C0	0x0000 ;_initBlock_0+704
0x82C2	0x0000 ;_initBlock_0+706
0x82C4	0x0000 ;_initBlock_0+708
0x82C6	0x0000 ;_initBlock_0+710
0x82C8	0x0000 ;_initBlock_0+712
0x82CA	0x0000 ;_initBlock_0+714
0x82CC	0x0000 ;_initBlock_0+716
0x82CE	0x0000 ;_initBlock_0+718
0x82D0	0x0000 ;_initBlock_0+720
0x82D2	0x0000 ;_initBlock_0+722
0x82D4	0x0000 ;_initBlock_0+724
0x82D6	0x0000 ;_initBlock_0+726
0x82D8	0x0000 ;_initBlock_0+728
0x82DA	0x0000 ;_initBlock_0+730
0x82DC	0x0000 ;_initBlock_0+732
0x82DE	0x0000 ;_initBlock_0+734
0x82E0	0x0000 ;_initBlock_0+736
0x82E2	0x0000 ;_initBlock_0+738
0x82E4	0x0000 ;_initBlock_0+740
0x82E6	0x0000 ;_initBlock_0+742
0x82E8	0x0000 ;_initBlock_0+744
0x82EA	0x0000 ;_initBlock_0+746
0x82EC	0x0000 ;_initBlock_0+748
0x82EE	0x0000 ;_initBlock_0+750
0x82F0	0x0000 ;_initBlock_0+752
0x82F2	0x0000 ;_initBlock_0+754
0x82F4	0x0000 ;_initBlock_0+756
0x82F6	0x0000 ;_initBlock_0+758
0x82F8	0x0000 ;_initBlock_0+760
0x82FA	0x0000 ;_initBlock_0+762
0x82FC	0x0000 ;_initBlock_0+764
0x82FE	0x0000 ;_initBlock_0+766
0x8300	0x0000 ;_initBlock_0+768
0x8302	0x0000 ;_initBlock_0+770
0x8304	0x0000 ;_initBlock_0+772
0x8306	0x0000 ;_initBlock_0+774
0x8308	0x0000 ;_initBlock_0+776
0x830A	0x0000 ;_initBlock_0+778
0x830C	0x0000 ;_initBlock_0+780
0x830E	0x0000 ;_initBlock_0+782
0x8310	0x0000 ;_initBlock_0+784
0x8312	0x0000 ;_initBlock_0+786
0x8314	0x0000 ;_initBlock_0+788
0x8316	0x0000 ;_initBlock_0+790
0x8318	0x0000 ;_initBlock_0+792
0x831A	0x0000 ;_initBlock_0+794
0x831C	0x0000 ;_initBlock_0+796
0x831E	0x0000 ;_initBlock_0+798
0x8320	0x0000 ;_initBlock_0+800
0x8322	0x0000 ;_initBlock_0+802
0x8324	0x0000 ;_initBlock_0+804
0x8326	0x0000 ;_initBlock_0+806
0x8328	0x0000 ;_initBlock_0+808
0x832A	0x0000 ;_initBlock_0+810
0x832C	0x0000 ;_initBlock_0+812
0x832E	0x0000 ;_initBlock_0+814
0x8330	0x0000 ;_initBlock_0+816
0x8332	0x0000 ;_initBlock_0+818
0x8334	0x0000 ;_initBlock_0+820
0x8336	0x0000 ;_initBlock_0+822
0x8338	0x0000 ;_initBlock_0+824
0x833A	0x0000 ;_initBlock_0+826
0x833C	0x0000 ;_initBlock_0+828
0x833E	0x0000 ;_initBlock_0+830
0x8340	0x0000 ;_initBlock_0+832
0x8342	0x0000 ;_initBlock_0+834
0x8344	0x0000 ;_initBlock_0+836
0x8346	0x0000 ;_initBlock_0+838
0x8348	0x0000 ;_initBlock_0+840
0x834A	0x0000 ;_initBlock_0+842
0x834C	0x0000 ;_initBlock_0+844
0x834E	0x0000 ;_initBlock_0+846
0x8350	0x0000 ;_initBlock_0+848
0x8352	0x0000 ;_initBlock_0+850
0x8354	0x0000 ;_initBlock_0+852
0x8356	0x0000 ;_initBlock_0+854
0x8358	0x0000 ;_initBlock_0+856
0x835A	0x0000 ;_initBlock_0+858
0x835C	0x0000 ;_initBlock_0+860
0x835E	0x0000 ;_initBlock_0+862
0x8360	0x0000 ;_initBlock_0+864
0x8362	0x0000 ;_initBlock_0+866
0x8364	0x0000 ;_initBlock_0+868
0x8366	0x0000 ;_initBlock_0+870
0x8368	0x0000 ;_initBlock_0+872
0x836A	0x0000 ;_initBlock_0+874
0x836C	0x0000 ;_initBlock_0+876
0x836E	0x0000 ;_initBlock_0+878
0x8370	0x0000 ;_initBlock_0+880
0x8372	0x0000 ;_initBlock_0+882
0x8374	0x0000 ;_initBlock_0+884
0x8376	0x0000 ;_initBlock_0+886
0x8378	0x0000 ;_initBlock_0+888
0x837A	0x0000 ;_initBlock_0+890
0x837C	0x0000 ;_initBlock_0+892
0x837E	0x0000 ;_initBlock_0+894
0x8380	0x0000 ;_initBlock_0+896
0x8382	0x0000 ;_initBlock_0+898
0x8384	0x0000 ;_initBlock_0+900
0x8386	0x0000 ;_initBlock_0+902
0x8388	0x0000 ;_initBlock_0+904
0x838A	0x0000 ;_initBlock_0+906
0x838C	0x0000 ;_initBlock_0+908
0x838E	0x0000 ;_initBlock_0+910
0x8390	0x0000 ;_initBlock_0+912
0x8392	0x0000 ;_initBlock_0+914
0x8394	0x0000 ;_initBlock_0+916
0x8396	0x0000 ;_initBlock_0+918
0x8398	0x0000 ;_initBlock_0+920
0x839A	0x0000 ;_initBlock_0+922
0x839C	0x0000 ;_initBlock_0+924
0x839E	0x0000 ;_initBlock_0+926
0x83A0	0x0000 ;_initBlock_0+928
0x83A2	0x0000 ;_initBlock_0+930
0x83A4	0x0000 ;_initBlock_0+932
0x83A6	0x0000 ;_initBlock_0+934
0x83A8	0x0000 ;_initBlock_0+936
0x83AA	0x0000 ;_initBlock_0+938
0x83AC	0x0000 ;_initBlock_0+940
0x83AE	0x0000 ;_initBlock_0+942
0x83B0	0x0000 ;_initBlock_0+944
0x83B2	0x0000 ;_initBlock_0+946
0x83B4	0x0000 ;_initBlock_0+948
0x83B6	0x0000 ;_initBlock_0+950
0x83B8	0x0000 ;_initBlock_0+952
0x83BA	0x0000 ;_initBlock_0+954
0x83BC	0x0000 ;_initBlock_0+956
0x83BE	0x0000 ;_initBlock_0+958
0x83C0	0x0000 ;_initBlock_0+960
0x83C2	0x0000 ;_initBlock_0+962
0x83C4	0x0000 ;_initBlock_0+964
0x83C6	0x0000 ;_initBlock_0+966
0x83C8	0x0000 ;_initBlock_0+968
0x83CA	0x0000 ;_initBlock_0+970
0x83CC	0x0000 ;_initBlock_0+972
0x83CE	0x0000 ;_initBlock_0+974
0x83D0	0x0000 ;_initBlock_0+976
0x83D2	0x0000 ;_initBlock_0+978
0x83D4	0x0000 ;_initBlock_0+980
0x83D6	0x0000 ;_initBlock_0+982
0x83D8	0x0000 ;_initBlock_0+984
0x83DA	0x0000 ;_initBlock_0+986
0x83DC	0x0000 ;_initBlock_0+988
0x83DE	0x0000 ;_initBlock_0+990
0x83E0	0x0000 ;_initBlock_0+992
0x83E2	0x0000 ;_initBlock_0+994
0x83E4	0x0000 ;_initBlock_0+996
0x83E6	0x0000 ;_initBlock_0+998
0x83E8	0x0000 ;_initBlock_0+1000
0x83EA	0x0000 ;_initBlock_0+1002
0x83EC	0x0000 ;_initBlock_0+1004
0x83EE	0x0000 ;_initBlock_0+1006
0x83F0	0x0000 ;_initBlock_0+1008
0x83F2	0x0000 ;_initBlock_0+1010
0x83F4	0x0000 ;_initBlock_0+1012
0x83F6	0x0000 ;_initBlock_0+1014
0x83F8	0x0000 ;_initBlock_0+1016
0x83FA	0x0000 ;_initBlock_0+1018
0x83FC	0x0000 ;_initBlock_0+1020
0x83FE	0x0000 ;_initBlock_0+1022
0x8400	0x0000 ;_initBlock_0+1024
0x8402	0x0000 ;_initBlock_0+1026
0x8404	0x0000 ;_initBlock_0+1028
0x8406	0x0000 ;_initBlock_0+1030
0x8408	0x0000 ;_initBlock_0+1032
0x840A	0x0000 ;_initBlock_0+1034
0x840C	0x0000 ;_initBlock_0+1036
0x840E	0x0000 ;_initBlock_0+1038
0x8410	0x0000 ;_initBlock_0+1040
0x8412	0x0000 ;_initBlock_0+1042
0x8414	0x0000 ;_initBlock_0+1044
0x8416	0x0000 ;_initBlock_0+1046
0x8418	0x0000 ;_initBlock_0+1048
0x841A	0x0000 ;_initBlock_0+1050
0x841C	0x0000 ;_initBlock_0+1052
0x841E	0x0000 ;_initBlock_0+1054
0x8420	0x0000 ;_initBlock_0+1056
0x8422	0x0000 ;_initBlock_0+1058
0x8424	0x0000 ;_initBlock_0+1060
0x8426	0x0000 ;_initBlock_0+1062
0x8428	0x0000 ;_initBlock_0+1064
0x842A	0x0000 ;_initBlock_0+1066
0x842C	0x0000 ;_initBlock_0+1068
0x842E	0x0000 ;_initBlock_0+1070
0x8430	0x0000 ;_initBlock_0+1072
0x8432	0x0000 ;_initBlock_0+1074
0x8434	0x0000 ;_initBlock_0+1076
0x8436	0x0000 ;_initBlock_0+1078
0x8438	0x0000 ;_initBlock_0+1080
0x843A	0x0000 ;_initBlock_0+1082
0x843C	0x0000 ;_initBlock_0+1084
0x843E	0x0000 ;_initBlock_0+1086
0x8440	0x0000 ;_initBlock_0+1088
0x8442	0x0000 ;_initBlock_0+1090
0x8444	0x0000 ;_initBlock_0+1092
0x8446	0x0000 ;_initBlock_0+1094
0x8448	0x0000 ;_initBlock_0+1096
0x844A	0x0000 ;_initBlock_0+1098
0x844C	0x0000 ;_initBlock_0+1100
0x844E	0x0000 ;_initBlock_0+1102
0x8450	0x0000 ;_initBlock_0+1104
0x8452	0x0000 ;_initBlock_0+1106
0x8454	0x0000 ;_initBlock_0+1108
0x8456	0x0000 ;_initBlock_0+1110
0x8458	0x0000 ;_initBlock_0+1112
0x845A	0x0000 ;_initBlock_0+1114
0x845C	0x0000 ;_initBlock_0+1116
0x845E	0x0000 ;_initBlock_0+1118
0x8460	0x0000 ;_initBlock_0+1120
0x8462	0x0000 ;_initBlock_0+1122
0x8464	0x0000 ;_initBlock_0+1124
0x8466	0x0000 ;_initBlock_0+1126
0x8468	0x0000 ;_initBlock_0+1128
0x846A	0x0000 ;_initBlock_0+1130
0x846C	0x0000 ;_initBlock_0+1132
0x846E	0x0000 ;_initBlock_0+1134
0x8470	0x0000 ;_initBlock_0+1136
0x8472	0x0000 ;_initBlock_0+1138
0x8474	0x0000 ;_initBlock_0+1140
0x8476	0x0000 ;_initBlock_0+1142
0x8478	0x0000 ;_initBlock_0+1144
0x847A	0x0000 ;_initBlock_0+1146
0x847C	0x0000 ;_initBlock_0+1148
0x847E	0x0000 ;_initBlock_0+1150
0x8480	0x0000 ;_initBlock_0+1152
0x8482	0x0000 ;_initBlock_0+1154
0x8484	0x0000 ;_initBlock_0+1156
0x8486	0x0000 ;_initBlock_0+1158
0x8488	0x0000 ;_initBlock_0+1160
0x848A	0x0000 ;_initBlock_0+1162
0x848C	0x0000 ;_initBlock_0+1164
0x848E	0x0000 ;_initBlock_0+1166
0x8490	0x0000 ;_initBlock_0+1168
0x8492	0x0000 ;_initBlock_0+1170
0x8494	0x0000 ;_initBlock_0+1172
0x8496	0x0000 ;_initBlock_0+1174
0x8498	0x0000 ;_initBlock_0+1176
0x849A	0x0000 ;_initBlock_0+1178
0x849C	0x0000 ;_initBlock_0+1180
0x849E	0x0000 ;_initBlock_0+1182
0x84A0	0x0000 ;_initBlock_0+1184
0x84A2	0x0000 ;_initBlock_0+1186
0x84A4	0x0000 ;_initBlock_0+1188
0x84A6	0x0000 ;_initBlock_0+1190
0x84A8	0x0000 ;_initBlock_0+1192
0x84AA	0x0000 ;_initBlock_0+1194
0x84AC	0x0000 ;_initBlock_0+1196
0x84AE	0x0000 ;_initBlock_0+1198
0x84B0	0x0000 ;_initBlock_0+1200
0x84B2	0x0000 ;_initBlock_0+1202
0x84B4	0x0000 ;_initBlock_0+1204
0x84B6	0x0000 ;_initBlock_0+1206
0x84B8	0x0000 ;_initBlock_0+1208
0x84BA	0x0000 ;_initBlock_0+1210
0x84BC	0x0000 ;_initBlock_0+1212
0x84BE	0x0000 ;_initBlock_0+1214
0x84C0	0x0000 ;_initBlock_0+1216
0x84C2	0x0000 ;_initBlock_0+1218
0x84C4	0x0000 ;_initBlock_0+1220
0x84C6	0x0000 ;_initBlock_0+1222
0x84C8	0x0000 ;_initBlock_0+1224
0x84CA	0x0000 ;_initBlock_0+1226
0x84CC	0x0000 ;_initBlock_0+1228
0x84CE	0x0000 ;_initBlock_0+1230
0x84D0	0x0000 ;_initBlock_0+1232
0x84D2	0x0000 ;_initBlock_0+1234
0x84D4	0x0000 ;_initBlock_0+1236
0x84D6	0x0000 ;_initBlock_0+1238
0x84D8	0x0000 ;_initBlock_0+1240
0x84DA	0x0000 ;_initBlock_0+1242
0x84DC	0x0000 ;_initBlock_0+1244
0x84DE	0x0000 ;_initBlock_0+1246
0x84E0	0x0000 ;_initBlock_0+1248
0x84E2	0x0000 ;_initBlock_0+1250
0x84E4	0x0000 ;_initBlock_0+1252
0x84E6	0x0000 ;_initBlock_0+1254
0x84E8	0x0000 ;_initBlock_0+1256
0x84EA	0x0000 ;_initBlock_0+1258
0x84EC	0x0000 ;_initBlock_0+1260
0x84EE	0x0000 ;_initBlock_0+1262
0x84F0	0x0000 ;_initBlock_0+1264
0x84F2	0x0000 ;_initBlock_0+1266
0x84F4	0x0000 ;_initBlock_0+1268
0x84F6	0x0000 ;_initBlock_0+1270
0x84F8	0x0000 ;_initBlock_0+1272
0x84FA	0x0000 ;_initBlock_0+1274
0x84FC	0x0000 ;_initBlock_0+1276
0x84FE	0x0000 ;_initBlock_0+1278
0x8500	0x0000 ;_initBlock_0+1280
0x8502	0x0000 ;_initBlock_0+1282
0x8504	0x0000 ;_initBlock_0+1284
0x8506	0x0000 ;_initBlock_0+1286
0x8508	0x0000 ;_initBlock_0+1288
0x850A	0x0000 ;_initBlock_0+1290
0x850C	0x0000 ;_initBlock_0+1292
0x850E	0x0000 ;_initBlock_0+1294
0x8510	0x0000 ;_initBlock_0+1296
0x8512	0x0000 ;_initBlock_0+1298
0x8514	0x0000 ;_initBlock_0+1300
0x8516	0x0000 ;_initBlock_0+1302
0x8518	0x0000 ;_initBlock_0+1304
0x851A	0x0000 ;_initBlock_0+1306
0x851C	0x0000 ;_initBlock_0+1308
0x851E	0x0000 ;_initBlock_0+1310
0x8520	0x0000 ;_initBlock_0+1312
0x8522	0x0000 ;_initBlock_0+1314
0x8524	0x0000 ;_initBlock_0+1316
0x8526	0x0000 ;_initBlock_0+1318
0x8528	0x0000 ;_initBlock_0+1320
0x852A	0x0000 ;_initBlock_0+1322
0x852C	0x0000 ;_initBlock_0+1324
0x852E	0x0000 ;_initBlock_0+1326
0x8530	0x0000 ;_initBlock_0+1328
0x8532	0x0000 ;_initBlock_0+1330
0x8534	0x0000 ;_initBlock_0+1332
0x8536	0x0000 ;_initBlock_0+1334
0x8538	0x0000 ;_initBlock_0+1336
0x853A	0x0000 ;_initBlock_0+1338
0x853C	0x0000 ;_initBlock_0+1340
0x853E	0x0000 ;_initBlock_0+1342
0x8540	0x0000 ;_initBlock_0+1344
0x8542	0x0000 ;_initBlock_0+1346
0x8544	0x0000 ;_initBlock_0+1348
0x8546	0x0000 ;_initBlock_0+1350
0x8548	0x0000 ;_initBlock_0+1352
0x854A	0x0000 ;_initBlock_0+1354
0x854C	0x0000 ;_initBlock_0+1356
0x854E	0x0000 ;_initBlock_0+1358
0x8550	0x0000 ;_initBlock_0+1360
0x8552	0x0000 ;_initBlock_0+1362
0x8554	0x0000 ;_initBlock_0+1364
0x8556	0x0000 ;_initBlock_0+1366
0x8558	0x0000 ;_initBlock_0+1368
0x855A	0x0000 ;_initBlock_0+1370
0x855C	0x0000 ;_initBlock_0+1372
0x855E	0x0000 ;_initBlock_0+1374
0x8560	0x0000 ;_initBlock_0+1376
0x8562	0x0000 ;_initBlock_0+1378
0x8564	0x0000 ;_initBlock_0+1380
0x8566	0x0000 ;_initBlock_0+1382
0x8568	0x0000 ;_initBlock_0+1384
0x856A	0x0000 ;_initBlock_0+1386
0x856C	0x0000 ;_initBlock_0+1388
0x856E	0x0000 ;_initBlock_0+1390
0x8570	0x0000 ;_initBlock_0+1392
0x8572	0x0000 ;_initBlock_0+1394
0x8574	0x0000 ;_initBlock_0+1396
0x8576	0x0000 ;_initBlock_0+1398
0x8578	0x0000 ;_initBlock_0+1400
0x857A	0x0000 ;_initBlock_0+1402
0x857C	0x0000 ;_initBlock_0+1404
0x857E	0x0000 ;_initBlock_0+1406
0x8580	0x0000 ;_initBlock_0+1408
0x8582	0x0000 ;_initBlock_0+1410
0x8584	0x0000 ;_initBlock_0+1412
0x8586	0x0000 ;_initBlock_0+1414
0x8588	0x0000 ;_initBlock_0+1416
0x858A	0x0000 ;_initBlock_0+1418
0x858C	0x0000 ;_initBlock_0+1420
0x858E	0x0000 ;_initBlock_0+1422
0x8590	0x0000 ;_initBlock_0+1424
0x8592	0x0000 ;_initBlock_0+1426
0x8594	0x0000 ;_initBlock_0+1428
0x8596	0x0000 ;_initBlock_0+1430
0x8598	0x0000 ;_initBlock_0+1432
0x859A	0x0000 ;_initBlock_0+1434
0x859C	0x0000 ;_initBlock_0+1436
0x859E	0x0000 ;_initBlock_0+1438
0x85A0	0x0000 ;_initBlock_0+1440
0x85A2	0x0000 ;_initBlock_0+1442
0x85A4	0x0000 ;_initBlock_0+1444
0x85A6	0x0000 ;_initBlock_0+1446
0x85A8	0x0000 ;_initBlock_0+1448
0x85AA	0x0000 ;_initBlock_0+1450
0x85AC	0x0000 ;_initBlock_0+1452
0x85AE	0x0000 ;_initBlock_0+1454
0x85B0	0x0000 ;_initBlock_0+1456
0x85B2	0x0000 ;_initBlock_0+1458
0x85B4	0x0000 ;_initBlock_0+1460
0x85B6	0x0000 ;_initBlock_0+1462
0x85B8	0x0000 ;_initBlock_0+1464
0x85BA	0x0000 ;_initBlock_0+1466
0x85BC	0x0000 ;_initBlock_0+1468
0x85BE	0x0000 ;_initBlock_0+1470
0x85C0	0x0000 ;_initBlock_0+1472
0x85C2	0x0000 ;_initBlock_0+1474
0x85C4	0x0000 ;_initBlock_0+1476
0x85C6	0x0000 ;_initBlock_0+1478
0x85C8	0x0000 ;_initBlock_0+1480
0x85CA	0x0000 ;_initBlock_0+1482
0x85CC	0x0000 ;_initBlock_0+1484
0x85CE	0x0000 ;_initBlock_0+1486
0x85D0	0x0000 ;_initBlock_0+1488
0x85D2	0x0000 ;_initBlock_0+1490
0x85D4	0x0000 ;_initBlock_0+1492
0x85D6	0x0000 ;_initBlock_0+1494
0x85D8	0x0000 ;_initBlock_0+1496
0x85DA	0x0000 ;_initBlock_0+1498
0x85DC	0x0000 ;_initBlock_0+1500
0x85DE	0x0000 ;_initBlock_0+1502
0x85E0	0x0000 ;_initBlock_0+1504
0x85E2	0x0000 ;_initBlock_0+1506
0x85E4	0x0000 ;_initBlock_0+1508
0x85E6	0x0000 ;_initBlock_0+1510
0x85E8	0x0000 ;_initBlock_0+1512
0x85EA	0x0000 ;_initBlock_0+1514
0x85EC	0x0000 ;_initBlock_0+1516
0x85EE	0x0000 ;_initBlock_0+1518
0x85F0	0x0000 ;_initBlock_0+1520
0x85F2	0x0000 ;_initBlock_0+1522
0x85F4	0x0000 ;_initBlock_0+1524
0x85F6	0x0000 ;_initBlock_0+1526
0x85F8	0x0000 ;_initBlock_0+1528
0x85FA	0x0000 ;_initBlock_0+1530
0x85FC	0x0000 ;_initBlock_0+1532
0x85FE	0x0000 ;_initBlock_0+1534
0x8600	0x0000 ;_initBlock_0+1536
0x8602	0x0000 ;_initBlock_0+1538
0x8604	0x0000 ;_initBlock_0+1540
0x8606	0x0000 ;_initBlock_0+1542
0x8608	0x0000 ;_initBlock_0+1544
0x860A	0x0000 ;_initBlock_0+1546
0x860C	0x0000 ;_initBlock_0+1548
0x860E	0x0000 ;_initBlock_0+1550
0x8610	0x0000 ;_initBlock_0+1552
0x8612	0x0000 ;_initBlock_0+1554
0x8614	0x0000 ;_initBlock_0+1556
0x8616	0x0000 ;_initBlock_0+1558
0x8618	0x0000 ;_initBlock_0+1560
0x861A	0x0000 ;_initBlock_0+1562
0x861C	0x0000 ;_initBlock_0+1564
0x861E	0x0000 ;_initBlock_0+1566
0x8620	0x0000 ;_initBlock_0+1568
0x8622	0x0000 ;_initBlock_0+1570
0x8624	0x0000 ;_initBlock_0+1572
0x8626	0x0000 ;_initBlock_0+1574
0x8628	0x0000 ;_initBlock_0+1576
0x862A	0x0000 ;_initBlock_0+1578
0x862C	0x0000 ;_initBlock_0+1580
0x862E	0x0000 ;_initBlock_0+1582
0x8630	0x0000 ;_initBlock_0+1584
0x8632	0x0000 ;_initBlock_0+1586
0x8634	0x0000 ;_initBlock_0+1588
0x8636	0x0000 ;_initBlock_0+1590
0x8638	0x0000 ;_initBlock_0+1592
0x863A	0x0000 ;_initBlock_0+1594
0x863C	0x0000 ;_initBlock_0+1596
0x863E	0x0000 ;_initBlock_0+1598
0x8640	0x0000 ;_initBlock_0+1600
0x8642	0x0000 ;_initBlock_0+1602
0x8644	0x0000 ;_initBlock_0+1604
0x8646	0x0000 ;_initBlock_0+1606
0x8648	0x0000 ;_initBlock_0+1608
0x864A	0x0000 ;_initBlock_0+1610
0x864C	0x0000 ;_initBlock_0+1612
0x864E	0x0000 ;_initBlock_0+1614
0x8650	0x0000 ;_initBlock_0+1616
0x8652	0x0000 ;_initBlock_0+1618
0x8654	0x0000 ;_initBlock_0+1620
0x8656	0x0000 ;_initBlock_0+1622
0x8658	0x0000 ;_initBlock_0+1624
0x865A	0x0000 ;_initBlock_0+1626
0x865C	0x0000 ;_initBlock_0+1628
0x865E	0x0000 ;_initBlock_0+1630
0x8660	0x0000 ;_initBlock_0+1632
0x8662	0x0000 ;_initBlock_0+1634
0x8664	0x0000 ;_initBlock_0+1636
0x8666	0x0000 ;_initBlock_0+1638
0x8668	0x0000 ;_initBlock_0+1640
0x866A	0x0000 ;_initBlock_0+1642
0x866C	0x0000 ;_initBlock_0+1644
0x866E	0x0000 ;_initBlock_0+1646
0x8670	0x0000 ;_initBlock_0+1648
0x8672	0x0000 ;_initBlock_0+1650
0x8674	0x0000 ;_initBlock_0+1652
0x8676	0x0000 ;_initBlock_0+1654
0x8678	0x0000 ;_initBlock_0+1656
0x867A	0x0000 ;_initBlock_0+1658
0x867C	0x0000 ;_initBlock_0+1660
0x867E	0x0000 ;_initBlock_0+1662
0x8680	0x0000 ;_initBlock_0+1664
0x8682	0x0000 ;_initBlock_0+1666
0x8684	0x0000 ;_initBlock_0+1668
0x8686	0x0000 ;_initBlock_0+1670
0x8688	0x0000 ;_initBlock_0+1672
0x868A	0x0000 ;_initBlock_0+1674
0x868C	0x0000 ;_initBlock_0+1676
0x868E	0x0000 ;_initBlock_0+1678
0x8690	0x0000 ;_initBlock_0+1680
0x8692	0x0000 ;_initBlock_0+1682
0x8694	0x0000 ;_initBlock_0+1684
0x8696	0x0000 ;_initBlock_0+1686
0x8698	0x0000 ;_initBlock_0+1688
0x869A	0x0000 ;_initBlock_0+1690
0x869C	0x0000 ;_initBlock_0+1692
0x869E	0x0000 ;_initBlock_0+1694
0x86A0	0x0000 ;_initBlock_0+1696
0x86A2	0x0000 ;_initBlock_0+1698
0x86A4	0x0000 ;_initBlock_0+1700
0x86A6	0x0000 ;_initBlock_0+1702
0x86A8	0x0000 ;_initBlock_0+1704
0x86AA	0x0000 ;_initBlock_0+1706
0x86AC	0x0000 ;_initBlock_0+1708
0x86AE	0x0000 ;_initBlock_0+1710
0x86B0	0x0000 ;_initBlock_0+1712
0x86B2	0x0000 ;_initBlock_0+1714
0x86B4	0x0000 ;_initBlock_0+1716
0x86B6	0x0000 ;_initBlock_0+1718
0x86B8	0x0000 ;_initBlock_0+1720
0x86BA	0x0000 ;_initBlock_0+1722
0x86BC	0x0000 ;_initBlock_0+1724
0x86BE	0x0000 ;_initBlock_0+1726
0x86C0	0x0000 ;_initBlock_0+1728
0x86C2	0x0000 ;_initBlock_0+1730
0x86C4	0x0000 ;_initBlock_0+1732
0x86C6	0x0000 ;_initBlock_0+1734
0x86C8	0x0000 ;_initBlock_0+1736
0x86CA	0x0000 ;_initBlock_0+1738
0x86CC	0x0000 ;_initBlock_0+1740
0x86CE	0x0000 ;_initBlock_0+1742
0x86D0	0x0000 ;_initBlock_0+1744
0x86D2	0x0000 ;_initBlock_0+1746
0x86D4	0x0000 ;_initBlock_0+1748
0x86D6	0x0000 ;_initBlock_0+1750
0x86D8	0x0000 ;_initBlock_0+1752
0x86DA	0x0000 ;_initBlock_0+1754
0x86DC	0x0000 ;_initBlock_0+1756
0x86DE	0x0000 ;_initBlock_0+1758
0x86E0	0x0000 ;_initBlock_0+1760
0x86E2	0x0000 ;_initBlock_0+1762
0x86E4	0x0000 ;_initBlock_0+1764
0x86E6	0x0000 ;_initBlock_0+1766
0x86E8	0x0000 ;_initBlock_0+1768
0x86EA	0x0000 ;_initBlock_0+1770
0x86EC	0x0000 ;_initBlock_0+1772
0x86EE	0x0000 ;_initBlock_0+1774
0x86F0	0x0000 ;_initBlock_0+1776
0x86F2	0x0000 ;_initBlock_0+1778
0x86F4	0x0000 ;_initBlock_0+1780
0x86F6	0x0000 ;_initBlock_0+1782
0x86F8	0x0000 ;_initBlock_0+1784
0x86FA	0x0000 ;_initBlock_0+1786
0x86FC	0x0000 ;_initBlock_0+1788
0x86FE	0x0000 ;_initBlock_0+1790
0x8700	0x0000 ;_initBlock_0+1792
0x8702	0x0000 ;_initBlock_0+1794
0x8704	0x0000 ;_initBlock_0+1796
0x8706	0x0000 ;_initBlock_0+1798
0x8708	0x0000 ;_initBlock_0+1800
0x870A	0x0000 ;_initBlock_0+1802
0x870C	0x0000 ;_initBlock_0+1804
0x870E	0x0000 ;_initBlock_0+1806
0x8710	0x0000 ;_initBlock_0+1808
0x8712	0x0000 ;_initBlock_0+1810
0x8714	0x0000 ;_initBlock_0+1812
0x8716	0x0000 ;_initBlock_0+1814
0x8718	0x0000 ;_initBlock_0+1816
0x871A	0x0000 ;_initBlock_0+1818
0x871C	0x0000 ;_initBlock_0+1820
0x871E	0x0000 ;_initBlock_0+1822
0x8720	0x0000 ;_initBlock_0+1824
0x8722	0x0000 ;_initBlock_0+1826
0x8724	0x0000 ;_initBlock_0+1828
0x8726	0x0000 ;_initBlock_0+1830
0x8728	0x0000 ;_initBlock_0+1832
0x872A	0x0000 ;_initBlock_0+1834
0x872C	0x0000 ;_initBlock_0+1836
0x872E	0x0000 ;_initBlock_0+1838
0x8730	0x0000 ;_initBlock_0+1840
0x8732	0x0000 ;_initBlock_0+1842
0x8734	0x0000 ;_initBlock_0+1844
0x8736	0x0000 ;_initBlock_0+1846
0x8738	0x0000 ;_initBlock_0+1848
0x873A	0x0000 ;_initBlock_0+1850
0x873C	0x0000 ;_initBlock_0+1852
0x873E	0x0000 ;_initBlock_0+1854
0x8740	0x0000 ;_initBlock_0+1856
0x8742	0x0000 ;_initBlock_0+1858
0x8744	0x0000 ;_initBlock_0+1860
0x8746	0x0000 ;_initBlock_0+1862
0x8748	0x0000 ;_initBlock_0+1864
0x874A	0x0000 ;_initBlock_0+1866
0x874C	0x0000 ;_initBlock_0+1868
0x874E	0x0000 ;_initBlock_0+1870
0x8750	0x0000 ;_initBlock_0+1872
0x8752	0x0000 ;_initBlock_0+1874
0x8754	0x0000 ;_initBlock_0+1876
0x8756	0x0000 ;_initBlock_0+1878
0x8758	0x0000 ;_initBlock_0+1880
0x875A	0x0000 ;_initBlock_0+1882
0x875C	0x0000 ;_initBlock_0+1884
0x875E	0x0000 ;_initBlock_0+1886
0x8760	0x0000 ;_initBlock_0+1888
0x8762	0x0000 ;_initBlock_0+1890
0x8764	0x0000 ;_initBlock_0+1892
0x8766	0x0000 ;_initBlock_0+1894
0x8768	0x0000 ;_initBlock_0+1896
0x876A	0x0000 ;_initBlock_0+1898
0x876C	0x0000 ;_initBlock_0+1900
0x876E	0x0000 ;_initBlock_0+1902
0x8770	0x0000 ;_initBlock_0+1904
0x8772	0x0000 ;_initBlock_0+1906
0x8774	0x0000 ;_initBlock_0+1908
0x8776	0x0000 ;_initBlock_0+1910
0x8778	0x0000 ;_initBlock_0+1912
0x877A	0x0000 ;_initBlock_0+1914
0x877C	0x0000 ;_initBlock_0+1916
0x877E	0x0000 ;_initBlock_0+1918
0x8780	0x0000 ;_initBlock_0+1920
0x8782	0x0000 ;_initBlock_0+1922
0x8784	0x0000 ;_initBlock_0+1924
0x8786	0x0000 ;_initBlock_0+1926
0x8788	0x0000 ;_initBlock_0+1928
0x878A	0x0000 ;_initBlock_0+1930
0x878C	0x0000 ;_initBlock_0+1932
0x878E	0x0000 ;_initBlock_0+1934
0x8790	0x0000 ;_initBlock_0+1936
0x8792	0x0000 ;_initBlock_0+1938
0x8794	0x0000 ;_initBlock_0+1940
0x8796	0x0000 ;_initBlock_0+1942
0x8798	0x0000 ;_initBlock_0+1944
0x879A	0x0000 ;_initBlock_0+1946
0x879C	0x0000 ;_initBlock_0+1948
0x879E	0x0000 ;_initBlock_0+1950
0x87A0	0x0000 ;_initBlock_0+1952
0x87A2	0x0000 ;_initBlock_0+1954
0x87A4	0x0000 ;_initBlock_0+1956
0x87A6	0x0000 ;_initBlock_0+1958
0x87A8	0x0000 ;_initBlock_0+1960
0x87AA	0x0000 ;_initBlock_0+1962
0x87AC	0x0000 ;_initBlock_0+1964
0x87AE	0x0000 ;_initBlock_0+1966
0x87B0	0x0000 ;_initBlock_0+1968
0x87B2	0x0000 ;_initBlock_0+1970
0x87B4	0x0000 ;_initBlock_0+1972
0x87B6	0x0000 ;_initBlock_0+1974
0x87B8	0x0000 ;_initBlock_0+1976
0x87BA	0x0000 ;_initBlock_0+1978
0x87BC	0x0000 ;_initBlock_0+1980
0x87BE	0x0000 ;_initBlock_0+1982
0x87C0	0x0000 ;_initBlock_0+1984
0x87C2	0x0000 ;_initBlock_0+1986
0x87C4	0x0000 ;_initBlock_0+1988
0x87C6	0x0000 ;_initBlock_0+1990
0x87C8	0x0000 ;_initBlock_0+1992
0x87CA	0x0000 ;_initBlock_0+1994
0x87CC	0x0000 ;_initBlock_0+1996
0x87CE	0x0000 ;_initBlock_0+1998
0x87D0	0x0000 ;_initBlock_0+2000
0x87D2	0x0000 ;_initBlock_0+2002
0x87D4	0x0000 ;_initBlock_0+2004
0x87D6	0x0000 ;_initBlock_0+2006
0x87D8	0x0000 ;_initBlock_0+2008
0x87DA	0x0000 ;_initBlock_0+2010
0x87DC	0x0000 ;_initBlock_0+2012
0x87DE	0x0000 ;_initBlock_0+2014
0x87E0	0x0000 ;_initBlock_0+2016
0x87E2	0x0000 ;_initBlock_0+2018
0x87E4	0x0000 ;_initBlock_0+2020
0x87E6	0x0000 ;_initBlock_0+2022
0x87E8	0x0000 ;_initBlock_0+2024
0x87EA	0x0000 ;_initBlock_0+2026
0x87EC	0x0000 ;_initBlock_0+2028
0x87EE	0x0000 ;_initBlock_0+2030
0x87F0	0x0000 ;_initBlock_0+2032
0x87F2	0x0000 ;_initBlock_0+2034
0x87F4	0x0000 ;_initBlock_0+2036
0x87F6	0x0000 ;_initBlock_0+2038
0x87F8	0x0000 ;_initBlock_0+2040
0x87FA	0x0000 ;_initBlock_0+2042
0x87FC	0x0000 ;_initBlock_0+2044
0x87FE	0x0000 ;_initBlock_0+2046
0x8800	0x0000 ;_initBlock_0+2048
0x8802	0x0000 ;_initBlock_0+2050
0x8804	0x0000 ;_initBlock_0+2052
0x8806	0x0000 ;_initBlock_0+2054
0x8808	0x0000 ;_initBlock_0+2056
0x880A	0x0000 ;_initBlock_0+2058
0x880C	0x0000 ;_initBlock_0+2060
0x880E	0x0000 ;_initBlock_0+2062
0x8810	0x0000 ;_initBlock_0+2064
0x8812	0x0000 ;_initBlock_0+2066
0x8814	0x0000 ;_initBlock_0+2068
0x8816	0x0000 ;_initBlock_0+2070
0x8818	0x0000 ;_initBlock_0+2072
0x881A	0x0000 ;_initBlock_0+2074
0x881C	0x0000 ;_initBlock_0+2076
0x881E	0x0000 ;_initBlock_0+2078
0x8820	0x0000 ;_initBlock_0+2080
0x8822	0x0000 ;_initBlock_0+2082
0x8824	0x0000 ;_initBlock_0+2084
0x8826	0x0000 ;_initBlock_0+2086
0x8828	0x0000 ;_initBlock_0+2088
0x882A	0x0000 ;_initBlock_0+2090
0x882C	0x0000 ;_initBlock_0+2092
0x882E	0x0000 ;_initBlock_0+2094
0x8830	0x0000 ;_initBlock_0+2096
0x8832	0x0000 ;_initBlock_0+2098
0x8834	0x0000 ;_initBlock_0+2100
0x8836	0x0000 ;_initBlock_0+2102
0x8838	0x0000 ;_initBlock_0+2104
0x883A	0x0000 ;_initBlock_0+2106
0x883C	0x0000 ;_initBlock_0+2108
0x883E	0x0000 ;_initBlock_0+2110
0x8840	0x0000 ;_initBlock_0+2112
0x8842	0x0000 ;_initBlock_0+2114
0x8844	0x0000 ;_initBlock_0+2116
0x8846	0x0000 ;_initBlock_0+2118
0x8848	0x0000 ;_initBlock_0+2120
0x884A	0x0000 ;_initBlock_0+2122
0x884C	0x0000 ;_initBlock_0+2124
0x884E	0x0000 ;_initBlock_0+2126
0x8850	0x0000 ;_initBlock_0+2128
0x8852	0x0000 ;_initBlock_0+2130
0x8854	0x0000 ;_initBlock_0+2132
0x8856	0x0000 ;_initBlock_0+2134
0x8858	0x0000 ;_initBlock_0+2136
0x885A	0x0000 ;_initBlock_0+2138
0x885C	0x0000 ;_initBlock_0+2140
0x885E	0x0000 ;_initBlock_0+2142
0x8860	0x0000 ;_initBlock_0+2144
0x8862	0x0000 ;_initBlock_0+2146
0x8864	0x0000 ;_initBlock_0+2148
0x8866	0x0000 ;_initBlock_0+2150
0x8868	0x0000 ;_initBlock_0+2152
0x886A	0x0000 ;_initBlock_0+2154
0x886C	0x0000 ;_initBlock_0+2156
0x886E	0x0000 ;_initBlock_0+2158
0x8870	0x0000 ;_initBlock_0+2160
0x8872	0x0000 ;_initBlock_0+2162
0x8874	0x0000 ;_initBlock_0+2164
0x8876	0x0000 ;_initBlock_0+2166
0x8878	0x0000 ;_initBlock_0+2168
0x887A	0x0000 ;_initBlock_0+2170
0x887C	0x0000 ;_initBlock_0+2172
0x887E	0x0000 ;_initBlock_0+2174
0x8880	0x0000 ;_initBlock_0+2176
0x8882	0x0000 ;_initBlock_0+2178
0x8884	0x0000 ;_initBlock_0+2180
0x8886	0x0000 ;_initBlock_0+2182
0x8888	0x0000 ;_initBlock_0+2184
0x888A	0x0000 ;_initBlock_0+2186
0x888C	0x0000 ;_initBlock_0+2188
0x888E	0x0000 ;_initBlock_0+2190
0x8890	0x0000 ;_initBlock_0+2192
0x8892	0x0000 ;_initBlock_0+2194
0x8894	0x0000 ;_initBlock_0+2196
0x8896	0x0000 ;_initBlock_0+2198
0x8898	0x0000 ;_initBlock_0+2200
0x889A	0x0000 ;_initBlock_0+2202
0x889C	0x0000 ;_initBlock_0+2204
0x889E	0x0000 ;_initBlock_0+2206
0x88A0	0x0000 ;_initBlock_0+2208
0x88A2	0x0000 ;_initBlock_0+2210
0x88A4	0x0000 ;_initBlock_0+2212
0x88A6	0x0000 ;_initBlock_0+2214
0x88A8	0x0000 ;_initBlock_0+2216
0x88AA	0x0000 ;_initBlock_0+2218
0x88AC	0x0000 ;_initBlock_0+2220
0x88AE	0x0000 ;_initBlock_0+2222
0x88B0	0x0000 ;_initBlock_0+2224
0x88B2	0x0000 ;_initBlock_0+2226
0x88B4	0x0000 ;_initBlock_0+2228
0x88B6	0x0000 ;_initBlock_0+2230
0x88B8	0x0000 ;_initBlock_0+2232
0x88BA	0x0000 ;_initBlock_0+2234
0x88BC	0x0000 ;_initBlock_0+2236
0x88BE	0x0000 ;_initBlock_0+2238
0x88C0	0x0000 ;_initBlock_0+2240
0x88C2	0x0000 ;_initBlock_0+2242
0x88C4	0x0000 ;_initBlock_0+2244
0x88C6	0x0000 ;_initBlock_0+2246
0x88C8	0x0000 ;_initBlock_0+2248
0x88CA	0x0000 ;_initBlock_0+2250
0x88CC	0x0000 ;_initBlock_0+2252
0x88CE	0x0000 ;_initBlock_0+2254
0x88D0	0x0000 ;_initBlock_0+2256
0x88D2	0x0000 ;_initBlock_0+2258
0x88D4	0x0000 ;_initBlock_0+2260
0x88D6	0x0000 ;_initBlock_0+2262
0x88D8	0x0000 ;_initBlock_0+2264
0x88DA	0x0000 ;_initBlock_0+2266
0x88DC	0x0000 ;_initBlock_0+2268
0x88DE	0x0000 ;_initBlock_0+2270
0x88E0	0x0000 ;_initBlock_0+2272
0x88E2	0x0000 ;_initBlock_0+2274
0x88E4	0x0000 ;_initBlock_0+2276
0x88E6	0x0000 ;_initBlock_0+2278
0x88E8	0x0000 ;_initBlock_0+2280
0x88EA	0x0000 ;_initBlock_0+2282
0x88EC	0x0000 ;_initBlock_0+2284
0x88EE	0x0000 ;_initBlock_0+2286
0x88F0	0x0000 ;_initBlock_0+2288
0x88F2	0x0000 ;_initBlock_0+2290
0x88F4	0x0000 ;_initBlock_0+2292
0x88F6	0x0000 ;_initBlock_0+2294
0x88F8	0x0000 ;_initBlock_0+2296
0x88FA	0x0000 ;_initBlock_0+2298
0x88FC	0x0000 ;_initBlock_0+2300
0x88FE	0x0000 ;_initBlock_0+2302
0x8900	0x0000 ;_initBlock_0+2304
0x8902	0x0000 ;_initBlock_0+2306
0x8904	0x0000 ;_initBlock_0+2308
0x8906	0x0000 ;_initBlock_0+2310
0x8908	0x0000 ;_initBlock_0+2312
0x890A	0x0000 ;_initBlock_0+2314
0x890C	0x0000 ;_initBlock_0+2316
0x890E	0x0000 ;_initBlock_0+2318
0x8910	0x0000 ;_initBlock_0+2320
0x8912	0x0000 ;_initBlock_0+2322
0x8914	0x0000 ;_initBlock_0+2324
0x8916	0x0000 ;_initBlock_0+2326
0x8918	0x0000 ;_initBlock_0+2328
0x891A	0x0000 ;_initBlock_0+2330
0x891C	0x0000 ;_initBlock_0+2332
0x891E	0x0000 ;_initBlock_0+2334
0x8920	0x0000 ;_initBlock_0+2336
0x8922	0x0000 ;_initBlock_0+2338
0x8924	0x0000 ;_initBlock_0+2340
0x8926	0x0000 ;_initBlock_0+2342
0x8928	0x0000 ;_initBlock_0+2344
0x892A	0x0000 ;_initBlock_0+2346
0x892C	0x0000 ;_initBlock_0+2348
0x892E	0x0000 ;_initBlock_0+2350
0x8930	0x0000 ;_initBlock_0+2352
0x8932	0x0000 ;_initBlock_0+2354
0x8934	0x0000 ;_initBlock_0+2356
0x8936	0x0000 ;_initBlock_0+2358
0x8938	0x0000 ;_initBlock_0+2360
0x893A	0x0000 ;_initBlock_0+2362
0x893C	0x0000 ;_initBlock_0+2364
0x893E	0x0000 ;_initBlock_0+2366
0x8940	0x0000 ;_initBlock_0+2368
0x8942	0x0000 ;_initBlock_0+2370
0x8944	0x0000 ;_initBlock_0+2372
0x8946	0x0000 ;_initBlock_0+2374
0x8948	0x0000 ;_initBlock_0+2376
0x894A	0x0000 ;_initBlock_0+2378
0x894C	0x0000 ;_initBlock_0+2380
0x894E	0x0000 ;_initBlock_0+2382
0x8950	0x0000 ;_initBlock_0+2384
0x8952	0x0000 ;_initBlock_0+2386
0x8954	0x0000 ;_initBlock_0+2388
0x8956	0x0000 ;_initBlock_0+2390
0x8958	0x0000 ;_initBlock_0+2392
0x895A	0x0000 ;_initBlock_0+2394
0x895C	0x0000 ;_initBlock_0+2396
0x895E	0x0000 ;_initBlock_0+2398
0x8960	0x0000 ;_initBlock_0+2400
0x8962	0x0000 ;_initBlock_0+2402
0x8964	0x0000 ;_initBlock_0+2404
0x8966	0x0000 ;_initBlock_0+2406
0x8968	0x0000 ;_initBlock_0+2408
0x896A	0x0000 ;_initBlock_0+2410
0x896C	0x0000 ;_initBlock_0+2412
0x896E	0x0000 ;_initBlock_0+2414
0x8970	0x0000 ;_initBlock_0+2416
0x8972	0x0000 ;_initBlock_0+2418
0x8974	0x0000 ;_initBlock_0+2420
0x8976	0x0000 ;_initBlock_0+2422
0x8978	0x0000 ;_initBlock_0+2424
0x897A	0x0000 ;_initBlock_0+2426
0x897C	0x0000 ;_initBlock_0+2428
0x897E	0x0000 ;_initBlock_0+2430
0x8980	0x0000 ;_initBlock_0+2432
0x8982	0x0000 ;_initBlock_0+2434
0x8984	0x0000 ;_initBlock_0+2436
0x8986	0x0000 ;_initBlock_0+2438
0x8988	0x0000 ;_initBlock_0+2440
0x898A	0x0000 ;_initBlock_0+2442
0x898C	0x0000 ;_initBlock_0+2444
0x898E	0x0000 ;_initBlock_0+2446
0x8990	0x0000 ;_initBlock_0+2448
0x8992	0x0000 ;_initBlock_0+2450
0x8994	0x0000 ;_initBlock_0+2452
0x8996	0x0000 ;_initBlock_0+2454
0x8998	0x0000 ;_initBlock_0+2456
0x899A	0x0000 ;_initBlock_0+2458
0x899C	0x0000 ;_initBlock_0+2460
0x899E	0x0000 ;_initBlock_0+2462
0x89A0	0x0000 ;_initBlock_0+2464
0x89A2	0x0000 ;_initBlock_0+2466
0x89A4	0x0000 ;_initBlock_0+2468
0x89A6	0x0000 ;_initBlock_0+2470
0x89A8	0x0000 ;_initBlock_0+2472
0x89AA	0x0000 ;_initBlock_0+2474
0x89AC	0x0000 ;_initBlock_0+2476
0x89AE	0x0000 ;_initBlock_0+2478
0x89B0	0x0000 ;_initBlock_0+2480
0x89B2	0x0000 ;_initBlock_0+2482
0x89B4	0x0000 ;_initBlock_0+2484
0x89B6	0x0000 ;_initBlock_0+2486
0x89B8	0x0000 ;_initBlock_0+2488
0x89BA	0x0000 ;_initBlock_0+2490
0x89BC	0x0000 ;_initBlock_0+2492
0x89BE	0x0000 ;_initBlock_0+2494
0x89C0	0x0000 ;_initBlock_0+2496
0x89C2	0x0000 ;_initBlock_0+2498
0x89C4	0x0000 ;_initBlock_0+2500
0x89C6	0x0000 ;_initBlock_0+2502
0x89C8	0x0000 ;_initBlock_0+2504
0x89CA	0x0000 ;_initBlock_0+2506
0x89CC	0x0000 ;_initBlock_0+2508
0x89CE	0x0000 ;_initBlock_0+2510
0x89D0	0x0000 ;_initBlock_0+2512
0x89D2	0x0000 ;_initBlock_0+2514
0x89D4	0x0000 ;_initBlock_0+2516
0x89D6	0x0000 ;_initBlock_0+2518
0x89D8	0x0000 ;_initBlock_0+2520
0x89DA	0x0000 ;_initBlock_0+2522
0x89DC	0x0000 ;_initBlock_0+2524
0x89DE	0x0000 ;_initBlock_0+2526
0x89E0	0x0000 ;_initBlock_0+2528
0x89E2	0x0000 ;_initBlock_0+2530
0x89E4	0x0000 ;_initBlock_0+2532
0x89E6	0x0000 ;_initBlock_0+2534
0x89E8	0x0000 ;_initBlock_0+2536
0x89EA	0x0000 ;_initBlock_0+2538
0x89EC	0x0000 ;_initBlock_0+2540
0x89EE	0x0000 ;_initBlock_0+2542
0x89F0	0x0000 ;_initBlock_0+2544
0x89F2	0x0000 ;_initBlock_0+2546
0x89F4	0x0000 ;_initBlock_0+2548
0x89F6	0x0000 ;_initBlock_0+2550
0x89F8	0x0000 ;_initBlock_0+2552
0x89FA	0x0000 ;_initBlock_0+2554
0x89FC	0x0000 ;_initBlock_0+2556
0x89FE	0x0000 ;_initBlock_0+2558
0x8A00	0x0000 ;_initBlock_0+2560
0x8A02	0x0000 ;_initBlock_0+2562
0x8A04	0x0000 ;_initBlock_0+2564
0x8A06	0x0000 ;_initBlock_0+2566
0x8A08	0x0000 ;_initBlock_0+2568
0x8A0A	0x0000 ;_initBlock_0+2570
0x8A0C	0x0000 ;_initBlock_0+2572
0x8A0E	0x0000 ;_initBlock_0+2574
0x8A10	0x0000 ;_initBlock_0+2576
0x8A12	0x0000 ;_initBlock_0+2578
0x8A14	0x0000 ;_initBlock_0+2580
0x8A16	0x0000 ;_initBlock_0+2582
0x8A18	0x0000 ;_initBlock_0+2584
0x8A1A	0x0000 ;_initBlock_0+2586
0x8A1C	0x0000 ;_initBlock_0+2588
0x8A1E	0x0000 ;_initBlock_0+2590
0x8A20	0x0000 ;_initBlock_0+2592
0x8A22	0x0000 ;_initBlock_0+2594
0x8A24	0x0000 ;_initBlock_0+2596
0x8A26	0x0000 ;_initBlock_0+2598
0x8A28	0x0000 ;_initBlock_0+2600
0x8A2A	0x0000 ;_initBlock_0+2602
0x8A2C	0x0000 ;_initBlock_0+2604 : ?ICS_datosLeidos at 0x8A2D
0x8A2E	0x0000 ;_initBlock_0+2606
0x8A30	0x0000 ;_initBlock_0+2608
0x8A32	0x0000 ;_initBlock_0+2610
0x8A34	0x0000 ;_initBlock_0+2612
; end of _initBlock_0
;TIEMPO_GPS.c,0 :: ?ICS?lstr4_TIEMPO_GPS [16]
0x8A36	0x5024 ;?ICS?lstr4_TIEMPO_GPS+0
0x8A38	0x544D ;?ICS?lstr4_TIEMPO_GPS+2
0x8A3A	0x334B ;?ICS?lstr4_TIEMPO_GPS+4
0x8A3C	0x3931 ;?ICS?lstr4_TIEMPO_GPS+6
0x8A3E	0x312C ;?ICS?lstr4_TIEMPO_GPS+8
0x8A40	0x322A ;?ICS?lstr4_TIEMPO_GPS+10
0x8A42	0x0D34 ;?ICS?lstr4_TIEMPO_GPS+12
0x8A44	0x000A ;?ICS?lstr4_TIEMPO_GPS+14
; end of ?ICS?lstr4_TIEMPO_GPS
;TIEMPO_GPS.c,0 :: ?ICS?lstr5_TIEMPO_GPS [14]
0x8A46	0x5024 ;?ICS?lstr5_TIEMPO_GPS+0
0x8A48	0x544D ;?ICS?lstr5_TIEMPO_GPS+2
0x8A4A	0x344B ;?ICS?lstr5_TIEMPO_GPS+4
0x8A4C	0x3331 ;?ICS?lstr5_TIEMPO_GPS+6
0x8A4E	0x332A ;?ICS?lstr5_TIEMPO_GPS+8
0x8A50	0x0D34 ;?ICS?lstr5_TIEMPO_GPS+10
0x8A52	0x000A ;?ICS?lstr5_TIEMPO_GPS+12
; end of ?ICS?lstr5_TIEMPO_GPS
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0200      [14]    _UART1_Write
0x020E      [14]    _Delay_100ms
0x021C       [4]    _Get_Fosc_Per_Cyc
0x0220      [24]    _SPI2_Read
0x0238      [26]    _isdigit
0x0252      [34]    _UART1_Write_Text
0x0274       [6]    _Get_Fosc_kHz
0x027A      [42]    _GPS_init
0x02A4      [46]    _SPI1_Init_Advanced
0x02D2      [98]    _ADXL355_init
0x0334      [28]    _ADXL355_write_byte
0x0350      [24]    _Bcd2Dec
0x0368     [102]    _atoi
0x03CE      [42]    _Dec2Bcd
0x03F8      [18]    _DS3234_read_byte
0x040A      [40]    _SPI2_Init
0x0432     [258]    _UART1_Init
0x0534      [82]    __Divide_32x32
0x0586      [88]    __Modulus_32x32
0x05DE      [18]    __Multiply_32x32
0x05F0      [46]    _SPI2_Init_Advanced
0x061E      [18]    _DS3234_write_byte
0x0630       [8]    _SPI2_Write
0x0638      [60]    _DS3234_init
0x0674      [52]    _RecuperarHoraRPI
0x06A8      [50]    _RecuperarFechaRPI
0x06DA     [124]    _RecuperarFechaRTC
0x0756     [176]    _RecuperarFechaGPS
0x0806     [174]    _RecuperarHoraGPS
0x08B4     [120]    _RecuperarHoraRTC
0x092C      [26]    _ADXL355_read_byte
0x0946     [346]    _Muestrear
0x0AA0     [528]    _ConfiguracionPrincipal
0x0CB0     [172]    _ADXL355_read_FIFO
0x0D5C      [26]    _InterrupcionP1
0x0D76     [232]    _DS3234_setDate
0x0E5E     [166]    _AjustarTiempoSistema
0x0F04     [114]    _Timer2Int
0x0F76     [290]    _Timer1Int
0x1098      [96]    _Timer3Int
0x10F8      [56]    _int_2
0x1130     [256]    _main
0x1230      [84]    _int_1
0x1284     [836]    _spi_1
0x15C8     [534]    _urx_1
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x1A54       [1]    _numSetsFIFO
0x1A55       [1]    _numFIFO
0x1A56       [1]    _contTimer3
0x1A57       [1]    _contTimer1
0x1A58       [1]    _contMuestras
0x1A59       [1]    _contTimeout1
0x1A5A       [2]    _contFIFO
0x1A5C       [1]    _contCiclos
0x0E14       [0]    RP2
0x0E04       [0]    LATA4_bit
0x0248       [2]    SPI1BUF
0x0E14       [0]    LATB4_bit
0x1A5D       [1]    _banInitGPS
0x1A5E       [1]    _byteGPS
0x0E04       [0]    RP1
0x1A5F       [1]    _banInicializar
0x1A60       [1]    _referenciaTiempo
0x1A61       [1]    _fuenteReloj
0x1A62       [1]    _stsGPS
0x1A63       [1]    _banMuestrear
0x1A64       [1]    _banSyncReloj
0x1A65       [1]    _banGPSI
0x1A66       [1]    _banSetGPS
0x1A67       [1]    _banGPSC
0x1A68       [1]    _banTFGPS
0x1A6A       [2]    _y
0x1A6C       [2]    _x
0x1A6E       [4]    _horaSistema
0x1A72       [2]    _i_gps
0x1A69       [1]    _banLeer
0x1A74       [1]    _banInicio
0x1A76       [2]    _i
0x1A75       [1]    _banConf
0x1A78       [4]    _fechaSistema
0x1A7C     [243]    _datosFIFO
0x1B70       [2]    _UART_Tx_Idle_Ptr
0x1B72       [2]    _UART_Rdy_Ptr
0x010A       [2]    TMR3
0x0228       [2]    U1BRG
0x1B6F       [1]    _buffer
0x1B74      [13]    _datosGPS
0x1B81       [6]    _tiempoRPI
0x1B88       [2]    _j
0x0226       [2]    U1RXREG
0x1B8A       [6]    _tiempo
0x0106       [2]    TMR2
0x1B90      [70]    _tramaGPS
0x1BD6       [2]    _UART_Rd_Ptr
0x0E04       [0]    CS_DS3234
0x0E04       [0]    CS_ADXL355
0x0222       [2]    U1STA
0x0268       [2]    SPI2BUF
0x1BD8       [2]    _UART_Wr_Ptr
0x0224       [2]    U1TXREG
0x1BDA       [2]    _SPI_Wr_Ptr
0x1BDC       [2]    _SPI_Rd_Ptr
0x0242       [2]    SPI1CON
0x0262       [2]    SPI2CON
0x1B87       [1]    _banSetReloj
0x0260       [2]    SPI2STATbits
0x0682       [2]    RPOR1bits
0x0E04       [0]    CS_DS3234
0x0260       [2]    SPI2STAT
0x0844       [2]    IPC2bits
0x0800       [0]    SPI1IF_bit
0x0684       [2]    RPOR2bits
0x06CC       [2]    RPINR22bits
0x0820       [0]    U1RXIE_bit
0x0680       [2]    RPOR0bits
0x0222       [2]    U1STAbits
0x0800       [0]    U1RXIF_bit
0x0E04       [0]    CS_ADXL355
0x0E04       [0]    LATA2_bit
0x06C4       [1]    RPINR18bits
0x0E04       [0]    LATA3_bit
0x0820       [0]    SPI1IE_bit
0x0E00       [0]    TRISA3_bit
0x0E00       [0]    TRISA2_bit
0x0E10       [0]    TRISB4_bit
0x0E00       [0]    TRISA4_bit
0x0746       [2]    PLLFBDbits
0x0744       [2]    CLKDIVbits
0x0E1E       [2]    ANSELB
0x0E0E       [2]    ANSELA
0x0E10       [0]    TRISB15_bit
0x0E10       [0]    TRISB14_bit
0x0240       [2]    SPI1STAT
0x08C2       [2]    INTCON2
0x0E10       [0]    TRISB10_bit
0x0E10       [0]    TRISB12_bit
0x0E10       [0]    TRISB13_bit
0x0E10       [0]    TRISB11_bit
0x1BDE       [1]    _tasaMuestreo
0x010E       [2]    PR3
0x0E14       [0]    LedTest
0x0220       [2]    U1MODE
0x0112       [2]    T3CON
0x0842       [2]    IPC1bits
0x0800       [0]    T3IF_bit
0x0820       [0]    T3IE_bit
0x1BDF       [1]    _banLec
0x1BE0       [1]    _banTI
0x1BE1       [1]    _banCiclo
0x1BE2       [1]    _banEsc
0x1BE3       [1]    _numTMR1
0x0E14       [0]    LATB12_bit
0x1BE4       [1]    _tipoOperacion
0x1BE5       [1]    _banOperacion
0x010C       [2]    PR2
0x0822       [0]    INT2IE_bit
0x06A2       [2]    RPINR1
0x084E       [2]    IPC7bits
0x0802       [0]    INT2IF_bit
0x0822       [0]    INT1IE_bit
0x06A0       [2]    RPINR0
0x084A       [1]    IPC5bits
0x0802       [0]    INT1IF_bit
0x0110       [2]    T2CON
0x0840       [2]    IPC0bits
0x0800       [0]    T2IF_bit
0x0820       [0]    T2IE_bit
0x0820       [0]    T1IE_bit
0x0104       [2]    T1CON
0x0102       [2]    PR1
0x0800       [0]    T1IF_bit
0x1000      [19]    ?lstr1_TIEMPO_GPS
0x1013      [16]    ?lstr6_TIEMPO_GPS
0x1023      [16]    ?lstr2_TIEMPO_GPS
0x1033      [48]    ?lstr3_TIEMPO_GPS
0x1063    [2506]    _tramaCompleta
0x1A2D       [9]    _datosLeidos
0x1A36      [16]    ?lstr4_TIEMPO_GPS
0x1A46      [14]    ?lstr5_TIEMPO_GPS
0x0102       [2]    PR1
0x0104       [2]    T1CON
0x0106       [2]    TMR2
0x010A       [2]    TMR3
0x010C       [2]    PR2
0x010E       [2]    PR3
0x0110       [2]    T2CON
0x0112       [2]    T3CON
0x0014       [2]    FARG_UART1_Write__data
0x0220       [2]    U1MODE
0x0014       [2]    FARG_SPI2_Read_buffer
0x0222       [2]    U1STA
0x0224       [2]    U1TXREG
0x0226       [2]    U1RXREG
0x0228       [2]    U1BRG
0x0014       [1]    FARG_isdigit_character
0x0240       [2]    SPI1STAT
0x0242       [2]    SPI1CON
0x0248       [2]    SPI1BUF
0x0014       [2]    FARG_UART1_Write_Text_uart_text
0x0260       [2]    SPI2STAT
0x0262       [2]    SPI2CON
0x0268       [2]    SPI2BUF
0x0014       [2]    FARG_SPI1_Init_Advanced_master_mode
0x0016       [2]    FARG_SPI1_Init_Advanced_mode16
0x0018       [2]    FARG_SPI1_Init_Advanced_sec_prescaler
0x001A       [2]    FARG_SPI1_Init_Advanced_pri_prescaler
0x0014       [1]    FARG_ADXL355_init_tMuestreo
0x0014       [1]    FARG_ADXL355_write_byte_address
0x0016       [1]    FARG_ADXL355_write_byte_value
0x0014       [1]    FARG_Bcd2Dec_bcdnum
0x0014       [2]    FARG_atoi_s
0x0014       [1]    FARG_Dec2Bcd_decnum
0x0014       [1]    FARG_DS3234_read_byte_address
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0014       [2]    FARG_SPI2_Init_Advanced_master_mode
0x0016       [2]    FARG_SPI2_Init_Advanced_mode16
0x0018       [2]    FARG_SPI2_Init_Advanced_sec_prescaler
0x001A       [2]    FARG_SPI2_Init_Advanced_pri_prescaler
0x0014       [1]    FARG_DS3234_write_byte_address
0x0016       [1]    FARG_DS3234_write_byte_value
0x0014       [2]    FARG_SPI2_Write_data_out
0x0014       [2]    FARG_RecuperarHoraRPI_tramaTiempoRpi
0x06A0       [2]    RPINR0
0x06A2       [2]    RPINR1
0x0014       [2]    FARG_RecuperarFechaRPI_tramaTiempoRpi
0x0014       [2]    FARG_RecuperarFechaGPS_tramaDatosGPS
0x0014       [2]    FARG_RecuperarHoraGPS_tramaDatosGPS
0x08C2       [2]    INTCON2
0x0014       [1]    FARG_ADXL355_read_byte_address
0x0014       [2]    FARG_ADXL355_read_FIFO_vectorFIFO
0x0014       [1]    FARG_InterrupcionP1_operacion
0x0014       [4]    FARG_DS3234_setDate_longHora
0x0018       [4]    FARG_DS3234_setDate_longFecha
0x0E0E       [2]    ANSELA
0x0E1E       [2]    ANSELB
0x0014       [4]    FARG_AjustarTiempoSistema_longHora
0x0018       [4]    FARG_AjustarTiempoSistema_longFecha
//** Constants locations ** 
//ADDRESS    SIZE    CONSTANT
//----------------------------------------------
0x8000      [19]    ?ICS?lstr1_TIEMPO_GPS
0x8013      [16]    ?ICS?lstr6_TIEMPO_GPS
0x8023      [16]    ?ICS?lstr2_TIEMPO_GPS
0x8033      [48]    ?ICS?lstr3_TIEMPO_GPS
0x8063    [2506]    ?ICS_tramaCompleta
0x8A2D       [9]    ?ICS_datosLeidos
0x8A36      [16]    ?ICS?lstr4_TIEMPO_GPS
0x8A46      [14]    ?ICS?lstr5_TIEMPO_GPS
//** Label List: ** 
//----------------------------------------------
  L_main0
  L_main1
  L_main2
  L_ConfiguracionPrincipal4
  L_ConfiguracionPrincipal6
  L_ConfiguracionPrincipal8
  L_ConfiguracionPrincipal10
  L_InterrupcionP112
  L_Muestrear14
  L_Muestrear15
  L_Muestrear16
  L_Muestrear17
  L_Muestrear18
  L_Muestrear19
  L_Muestrear20
  L_Muestrear21
  L_Muestrear22
  L_Muestrear23
  L_Muestrear24
  L_Muestrear25
  L_Muestrear26
  L_Muestrear27
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_spi_133
  L_spi_134
  L_spi_135
  L_spi_136
  L_spi_137
  L_spi_138
  L_spi_139
  L_spi_140
  L_spi_141
  L_spi_142
  L_spi_143
  L_spi_144
  L_spi_145
  L_spi_146
  L_spi_147
  L_spi_148
  L_spi_149
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_156
  L_spi_158
  L_spi_160
  L_spi_162
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_spi_171
  L_spi_172
  L_spi_173
  L_spi_174
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_int_1102
  L_int_1103
  L_int_1104
  L_int_2105
  L_Timer1Int106
  L_Timer1Int107
  L_Timer1Int108
  L_Timer1Int109
  L_Timer1Int110
  L_Timer1Int111
  L_Timer1Int112
  L_Timer1Int113
  L_Timer1Int114
  L_Timer1Int115
  L_Timer1Int116
  L_Timer1Int117
  L_Timer1Int118
  L_Timer1Int119
  L_Timer2Int120
  L_Timer3Int121
  L_urx_1122
  L_urx_1123
  L_urx_1124
  L_urx_1125
  L_urx_1126
  L_urx_1127
  L_urx_1128
  L_urx_1129
  L_urx_1130
  L_urx_1131
  L_urx_1132
  L_urx_1133
  L_urx_1134
  L_urx_1135
  L_urx_1136
  L_urx_1137
  L_urx_1138
  L_urx_1139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L__Muestrear150
  L__Muestrear151
  L__Muestrear152
  L__spi_1153
  L__spi_1154
  L__spi_1155
  L__spi_1156
  L__spi_1157
  L__spi_1158
  L__spi_1159
  L__spi_1160
  L__spi_1161
  L__spi_1162
  L__spi_1163
  L__spi_1164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__Timer1Int214
  L__Timer1Int215
  L__Timer1Int216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L__urx_1222
  L__urx_1223
  L__urx_1224
  L__urx_1225
  L__urx_1226
  L__urx_1227
  L__urx_1228
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear234
  L__Muestrear235
  L__Muestrear236
  L__Muestrear237
  L__Muestrear238
  L__Muestrear239
  L__Muestrear240
  L__Muestrear241
  L_end_spi_1
  _spi_1
  L__spi_1243
  L__spi_1244
  L__spi_1245
  L__spi_1246
  L__spi_1247
  L__spi_1248
  L__spi_1249
  L__spi_1250
  L__spi_1251
  L__spi_1252
  L__spi_1253
  L__spi_1254
  L__spi_1255
  L__spi_1256
  L__spi_1257
  L__spi_1258
  L__spi_1259
  L__spi_1260
  L__spi_1261
  L__spi_1262
  L__spi_1263
  L__spi_1264
  L__spi_1265
  L__spi_1266
  L__spi_1267
  L__spi_1268
  L__spi_1269
  L__spi_1270
  L__spi_1271
  L__spi_1272
  L__spi_1273
  L__spi_1274
  L__spi_1275
  L__spi_1276
  L__spi_1277
  L__spi_1278
  L__spi_1279
  L__spi_1280
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L_end_int_1
  _int_1
  L__int_1287
  L__int_1288
  L__int_1289
  L_end_int_2
  _int_2
  L__int_2291
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int293
  L__Timer1Int294
  L__Timer1Int295
  L__Timer1Int296
  L__Timer1Int297
  L__Timer1Int298
  L_end_Timer2Int
  _Timer2Int
  L__Timer2Int300
  L_end_Timer3Int
  _Timer3Int
  L__Timer3Int302
  L_end_urx_1
  _urx_1
  L__urx_1304
  L__urx_1305
  L__urx_1306
  L__urx_1307
  L__urx_1308
  L__urx_1309
  L__urx_1310
  L__urx_1311
  L__urx_1312
  L__urx_1313
  L__urx_1314
  L__urx_1315
  L__urx_1316
  L__urx_1317
  L__urx_1318
  L__urx_1319
  L__urx_1320
  L__urx_1321
  L__urx_1322
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init19
  L__ADXL355_init20
  L__ADXL355_init21
  L__ADXL355_init22
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data26
  L__ADXL355_read_data27
  L__ADXL355_read_data28
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_GPS_init0
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_IncrementarFecha0
  L_IncrementarFecha1
  L_IncrementarFecha2
  L_IncrementarFecha3
  L_IncrementarFecha4
  L_IncrementarFecha5
  L_IncrementarFecha6
  L_IncrementarFecha7
  L_IncrementarFecha8
  L_IncrementarFecha9
  L_IncrementarFecha10
  L_IncrementarFecha11
  L_IncrementarFecha12
  L_IncrementarFecha13
  L_IncrementarFecha14
  L_IncrementarFecha15
  L_IncrementarFecha16
  L_IncrementarFecha17
  L_IncrementarFecha18
  L_IncrementarFecha19
  L_IncrementarFecha20
  L_IncrementarFecha21
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L__IncrementarFecha27
  L__IncrementarFecha28
  L__IncrementarFecha29
  L__IncrementarFecha30
  L__IncrementarFecha31
  L__IncrementarFecha32
  L__IncrementarFecha33
  L__IncrementarFecha34
  L__IncrementarFecha35
  L__IncrementarFecha36
  L__IncrementarFecha37
  L__IncrementarFecha38
  L__IncrementarFecha39
  L__IncrementarFecha40
  L__IncrementarFecha41
  L__IncrementarFecha42
  L__IncrementarFecha43
  L__IncrementarFecha44
  L__IncrementarFecha45
  L__IncrementarFecha46
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha54
  L__IncrementarFecha55
  L__IncrementarFecha56
  L__IncrementarFecha57
  L__IncrementarFecha58
  L__IncrementarFecha59
  L__IncrementarFecha60
  L__IncrementarFecha61
  L__IncrementarFecha62
  L__IncrementarFecha63
  L__IncrementarFecha64
  L__IncrementarFecha65
  L__IncrementarFecha66
  L__IncrementarFecha67
  L__IncrementarFecha68
  L__IncrementarFecha69
  L__IncrementarFecha70
  L__IncrementarFecha71
  L__IncrementarFecha72
  L__IncrementarFecha73
  L__IncrementarFecha74
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  Delay_Cyc_loop
  Delay_Cyc_rez
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_ms3
  L_VDelay_ms4
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_VDelay_Advanced_ms7
  L_VDelay_Advanced_ms8
  Label1
  Label2
  Delay_Cyc_loop
  Delay_Cyc_rem
  L_Delay_1us11
  L_Delay_10us13
  L_Delay_22us15
  L_Delay_50us17
  L_Delay_80us19
  L_Delay_500us21
  L_Delay_5500us23
  L_Delay_1ms25
  L_Delay_5ms27
  L_Delay_8ms29
  L_Delay_10ms31
  L_Delay_100ms33
  L_Delay_1sec35
  L_end_Get_Fosc_kHz
  _Get_Fosc_kHz
  L_end_Get_Fosc_Per_Cyc
  _Get_Fosc_Per_Cyc
  L_end_Delay_Cyc
  _Delay_Cyc
  L_end_Delay_Cyc_Long
  _Delay_Cyc_Long
  L_end_VDelay_ms
  _VDelay_ms
  L_end_VDelay_Advanced_ms
  _VDelay_Advanced_ms
  L_end_Delay_W0
  _Delay_W0
  L_end_Delay_1us
  _Delay_1us
  L_end_Delay_10us
  _Delay_10us
  L_end_Delay_22us
  _Delay_22us
  L_end_Delay_50us
  _Delay_50us
  L_end_Delay_80us
  _Delay_80us
  L_end_Delay_500us
  _Delay_500us
  L_end_Delay_5500us
  _Delay_5500us
  L_end_Delay_1ms
  _Delay_1ms
  L_end_Delay_5ms
  _Delay_5ms
  L_end_Delay_8ms
  _Delay_8ms
  L_end_Delay_10ms
  _Delay_10ms
  L_end_Delay_100ms
  _Delay_100ms
  L_end_Delay_1sec
  _Delay_1sec
  Divide_32x32___testsus
  the_end_Divide_32x32
  Divide_32x32___divsi3
  Divide_32x32___udivsi3
  Divide_32x32_divtestb
  Divide_32x32_calcquot
  Divide_32x32_returnq
  Divide_32x32_nextbit
  Divide_32x32_iterate
  Modulus_32x32___testsus
  the_end_Modulus_32x32
  Modulus_32x32___modsi3
  Modulus_32x32___umodsi3
  Modulus_32x32_modtestb
  Modulus_32x32_calcrem
  Modulus_32x32_exitr
  Modulus_32x32___udivsi3
  Modulus_32x32_nextbit
  Modulus_32x32_iterate
  L_end__Multiply_32x32
  __Multiply_32x32
  L_end__Divide_32x32
  __Divide_32x32
  L_end__Modulus_32x32
  __Modulus_32x32
  L_SPI1_Read0
  L_SPI1_Read1
  L_SPI1_Read2
  L_SPI1_Read3
  L_SPI2_Read4
  L_SPI2_Read5
  L_SPI2_Read6
  L_SPI2_Read7
  L_end_SPI1_Read
  _SPI1_Read
  L_end_SPI1_Write
  _SPI1_Write
  L_end_SPI1_Init_Advanced
  _SPI1_Init_Advanced
  L_end_SPI1_Init
  _SPI1_Init
  L_end_SPI2_Read
  _SPI2_Read
  L_end_SPI2_Write
  _SPI2_Write
  L_end_SPI2_Init_Advanced
  _SPI2_Init_Advanced
  L_end_SPI2_Init
  _SPI2_Init
  L_end_SPI_Set_Active
  _SPI_Set_Active
  L_end_SPI_Read
  _SPI_Read
  L_end_SPI_Write
  _SPI_Write
  L_UART1_Write0
  L_UART1_Write1
  L_UART1_Write_Text2
  L_UART1_Write_Text3
  L_UART1_Read_Text4
  L_UART1_Read_Text5
  L_UART1_Read_Text6
  L_UART1_Read_Text7
  L_UART1_Read_Text8
  L_UART1_Read_Text9
  L_UART1_Read_Text10
  L_UART1_Read_Text11
  L_UART1_Read_Text12
  L_UART1_Init13
  L_UART1_Init14
  L_UART1_Init15
  L_UART1_Init_Advanced16
  L_UART1_Init_Advanced17
  L_UART1_Init_Advanced18
  L_UART1_Init_Advanced19
  L_UART1_Init_Advanced20
  L_UART1_Init_Advanced21
  L_UART1_Init_Advanced22
  L_UART1_Init_Advanced23
  L_UART1_Init_Advanced24
  L_UART2_Write25
  L_UART2_Write26
  L_UART2_Write_Text27
  L_UART2_Write_Text28
  L_UART2_Read_Text29
  L_UART2_Read_Text30
  L_UART2_Read_Text31
  L_UART2_Read_Text32
  L_UART2_Read_Text33
  L_UART2_Read_Text34
  L_UART2_Read_Text35
  L_UART2_Read_Text36
  L_UART2_Read_Text37
  L_UART2_Init38
  L_UART2_Init39
  L_UART2_Init40
  L_UART2_Init_Advanced41
  L_UART2_Init_Advanced42
  L_UART2_Init_Advanced43
  L_UART2_Init_Advanced44
  L_UART2_Init_Advanced45
  L_UART2_Init_Advanced46
  L_UART2_Init_Advanced47
  L_UART2_Init_Advanced48
  L_UART2_Init_Advanced49
  L_UART_Write_Text50
  L_UART_Write_Text51
  L_UART_Read_Text52
  L_UART_Read_Text53
  L_UART_Read_Text54
  L_UART_Read_Text55
  L_UART_Read_Text56
  L_UART_Read_Text57
  L_UART_Read_Text58
  L_UART_Read_Text59
  L_UART_Read_Text60
  L__UART1_Read_Text61
  L__UART1_Init62
  L__UART1_Init63
  L__UART1_Init64
  L__UART2_Read_Text65
  L__UART2_Init66
  L__UART2_Init67
  L__UART2_Init68
  L_end_UART1_Write
  _UART1_Write
  L_end_UART1_Write_Text
  _UART1_Write_Text
  L__UART1_Write_Text71
  L_end_UART1_Data_Ready
  _UART1_Data_Ready
  L_end_UART1_Read
  _UART1_Read
  L_end_UART1_Read_Text
  _UART1_Read_Text
  L__UART1_Read_Text75
  L__UART1_Read_Text76
  L__UART1_Read_Text77
  L__UART1_Read_Text78
  L__UART1_Read_Text79
  L__UART1_Read_Text80
  L_end_UART1_Tx_Idle
  _UART1_Tx_Idle
  L_end_UART1_Init
  _UART1_Init
  L__UART1_Init83
  L__UART1_Init84
  L__UART1_Init85
  L__UART1_Init86
  L__UART1_Init87
  L__UART1_Init88
  L__UART1_Init89
  L_end_UART1_Init_Advanced
  _UART1_Init_Advanced
  L__UART1_Init_Advanced91
  L__UART1_Init_Advanced92
  L__UART1_Init_Advanced93
  L__UART1_Init_Advanced94
  L__UART1_Init_Advanced95
  L__UART1_Init_Advanced96
  L__UART1_Init_Advanced97
  L__UART1_Init_Advanced98
  L__UART1_Init_Advanced99
  L__UART1_Init_Advanced100
  L__UART1_Init_Advanced101
  L__UART1_Init_Advanced102
  L__UART1_Init_Advanced103
  L__UART1_Init_Advanced104
  L__UART1_Init_Advanced105
  L_end_UART2_Write
  _UART2_Write
  L_end_UART2_Write_Text
  _UART2_Write_Text
  L__UART2_Write_Text108
  L_end_UART2_Data_Ready
  _UART2_Data_Ready
  L_end_UART2_Read
  _UART2_Read
  L_end_UART2_Read_Text
  _UART2_Read_Text
  L__UART2_Read_Text112
  L__UART2_Read_Text113
  L__UART2_Read_Text114
  L__UART2_Read_Text115
  L__UART2_Read_Text116
  L__UART2_Read_Text117
  L_end_UART2_Tx_Idle
  _UART2_Tx_Idle
  L_end_UART2_Init
  _UART2_Init
  L__UART2_Init120
  L__UART2_Init121
  L__UART2_Init122
  L__UART2_Init123
  L__UART2_Init124
  L__UART2_Init125
  L__UART2_Init126
  L_end_UART2_Init_Advanced
  _UART2_Init_Advanced
  L__UART2_Init_Advanced128
  L__UART2_Init_Advanced129
  L__UART2_Init_Advanced130
  L__UART2_Init_Advanced131
  L__UART2_Init_Advanced132
  L__UART2_Init_Advanced133
  L__UART2_Init_Advanced134
  L__UART2_Init_Advanced135
  L__UART2_Init_Advanced136
  L__UART2_Init_Advanced137
  L__UART2_Init_Advanced138
  L__UART2_Init_Advanced139
  L__UART2_Init_Advanced140
  L__UART2_Init_Advanced141
  L__UART2_Init_Advanced142
  L_end_UART_Set_Active
  _UART_Set_Active
  L_end_UART_Write
  _UART_Write
  L_end_UART_Write_Text
  _UART_Write_Text
  L__UART_Write_Text146
  L_end_UART_Read
  _UART_Read
  L_end_UART_Data_Ready
  _UART_Data_Ready
  L_end_UART_Read_Text
  _UART_Read_Text
  L__UART_Read_Text150
  L__UART_Read_Text151
  L__UART_Read_Text152
  L__UART_Read_Text153
  L__UART_Read_Text154
  L__UART_Read_Text155
  L_end_UART_Tx_Idle
  _UART_Tx_Idle
  L_main0
  L_main1
  L_main2
  L_ConfiguracionPrincipal4
  L_ConfiguracionPrincipal6
  L_ConfiguracionPrincipal8
  L_ConfiguracionPrincipal10
  L_InterrupcionP112
  L_Muestrear14
  L_Muestrear15
  L_Muestrear16
  L_Muestrear17
  L_Muestrear18
  L_Muestrear19
  L_Muestrear20
  L_Muestrear21
  L_Muestrear22
  L_Muestrear23
  L_Muestrear24
  L_Muestrear25
  L_Muestrear26
  L_Muestrear27
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_spi_133
  L_spi_134
  L_spi_135
  L_spi_136
  L_spi_137
  L_spi_138
  L_spi_139
  L_spi_140
  L_spi_141
  L_spi_142
  L_spi_143
  L_spi_144
  L_spi_145
  L_spi_146
  L_spi_147
  L_spi_148
  L_spi_149
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_156
  L_spi_158
  L_spi_160
  L_spi_162
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_spi_171
  L_spi_172
  L_spi_173
  L_spi_174
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_int_1102
  L_int_1103
  L_int_1104
  L_int_2105
  L_Timer1Int106
  L_Timer1Int107
  L_Timer1Int108
  L_Timer1Int109
  L_Timer1Int110
  L_Timer1Int111
  L_Timer1Int112
  L_Timer1Int113
  L_Timer1Int114
  L_Timer1Int115
  L_Timer1Int116
  L_Timer1Int117
  L_Timer1Int118
  L_Timer1Int119
  L_Timer2Int120
  L_Timer3Int121
  L_urx_1122
  L_urx_1123
  L_urx_1124
  L_urx_1125
  L_urx_1126
  L_urx_1127
  L_urx_1128
  L_urx_1129
  L_urx_1130
  L_urx_1131
  L_urx_1132
  L_urx_1133
  L_urx_1134
  L_urx_1135
  L_urx_1136
  L_urx_1137
  L_urx_1138
  L_urx_1139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L__Muestrear150
  L__Muestrear151
  L__Muestrear152
  L__spi_1153
  L__spi_1154
  L__spi_1155
  L__spi_1156
  L__spi_1157
  L__spi_1158
  L__spi_1159
  L__spi_1160
  L__spi_1161
  L__spi_1162
  L__spi_1163
  L__spi_1164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__Timer1Int214
  L__Timer1Int215
  L__Timer1Int216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L__urx_1222
  L__urx_1223
  L__urx_1224
  L__urx_1225
  L__urx_1226
  L__urx_1227
  L__urx_1228
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear234
  L__Muestrear235
  L__Muestrear236
  L__Muestrear237
  L__Muestrear238
  L__Muestrear239
  L__Muestrear240
  L__Muestrear241
  L_end_spi_1
  _spi_1
  L__spi_1243
  L__spi_1244
  L__spi_1245
  L__spi_1246
  L__spi_1247
  L__spi_1248
  L__spi_1249
  L__spi_1250
  L__spi_1251
  L__spi_1252
  L__spi_1253
  L__spi_1254
  L__spi_1255
  L__spi_1256
  L__spi_1257
  L__spi_1258
  L__spi_1259
  L__spi_1260
  L__spi_1261
  L__spi_1262
  L__spi_1263
  L__spi_1264
  L__spi_1265
  L__spi_1266
  L__spi_1267
  L__spi_1268
  L__spi_1269
  L__spi_1270
  L__spi_1271
  L__spi_1272
  L__spi_1273
  L__spi_1274
  L__spi_1275
  L__spi_1276
  L__spi_1277
  L__spi_1278
  L__spi_1279
  L__spi_1280
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L_end_int_1
  _int_1
  L__int_1287
  L__int_1288
  L__int_1289
  L_end_int_2
  _int_2
  L__int_2291
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int293
  L__Timer1Int294
  L__Timer1Int295
  L__Timer1Int296
  L__Timer1Int297
  L__Timer1Int298
  L_end_Timer2Int
  _Timer2Int
  L__Timer2Int300
  L_end_Timer3Int
  _Timer3Int
  L__Timer3Int302
  L_end_urx_1
  _urx_1
  L__urx_1304
  L__urx_1305
  L__urx_1306
  L__urx_1307
  L__urx_1308
  L__urx_1309
  L__urx_1310
  L__urx_1311
  L__urx_1312
  L__urx_1313
  L__urx_1314
  L__urx_1315
  L__urx_1316
  L__urx_1317
  L__urx_1318
  L__urx_1319
  L__urx_1320
  L__urx_1321
  L__urx_1322
  L_main0
  L_main1
  L_main2
  L_ConfiguracionPrincipal4
  L_ConfiguracionPrincipal6
  L_ConfiguracionPrincipal8
  L_ConfiguracionPrincipal10
  L_InterrupcionP112
  L_Muestrear14
  L_Muestrear15
  L_Muestrear16
  L_Muestrear17
  L_Muestrear18
  L_Muestrear19
  L_Muestrear20
  L_Muestrear21
  L_Muestrear22
  L_Muestrear23
  L_Muestrear24
  L_Muestrear25
  L_Muestrear26
  L_Muestrear27
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_spi_133
  L_spi_134
  L_spi_135
  L_spi_136
  L_spi_137
  L_spi_138
  L_spi_139
  L_spi_140
  L_spi_141
  L_spi_142
  L_spi_143
  L_spi_144
  L_spi_145
  L_spi_146
  L_spi_147
  L_spi_148
  L_spi_149
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_156
  L_spi_158
  L_spi_160
  L_spi_162
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_spi_171
  L_spi_172
  L_spi_173
  L_spi_174
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_int_1102
  L_int_1103
  L_int_1104
  L_int_2105
  L_Timer1Int106
  L_Timer1Int107
  L_Timer1Int108
  L_Timer1Int109
  L_Timer1Int110
  L_Timer1Int111
  L_Timer1Int112
  L_Timer1Int113
  L_Timer1Int114
  L_Timer1Int115
  L_Timer1Int116
  L_Timer1Int117
  L_Timer1Int118
  L_Timer1Int119
  L_Timer2Int120
  L_Timer3Int121
  L_urx_1122
  L_urx_1123
  L_urx_1124
  L_urx_1125
  L_urx_1126
  L_urx_1127
  L_urx_1128
  L_urx_1129
  L_urx_1130
  L_urx_1131
  L_urx_1132
  L_urx_1133
  L_urx_1134
  L_urx_1135
  L_urx_1136
  L_urx_1137
  L_urx_1138
  L_urx_1139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L__Muestrear150
  L__Muestrear151
  L__Muestrear152
  L__spi_1153
  L__spi_1154
  L__spi_1155
  L__spi_1156
  L__spi_1157
  L__spi_1158
  L__spi_1159
  L__spi_1160
  L__spi_1161
  L__spi_1162
  L__spi_1163
  L__spi_1164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__Timer1Int214
  L__Timer1Int215
  L__Timer1Int216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L__urx_1222
  L__urx_1223
  L__urx_1224
  L__urx_1225
  L__urx_1226
  L__urx_1227
  L__urx_1228
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear234
  L__Muestrear235
  L__Muestrear236
  L__Muestrear237
  L__Muestrear238
  L__Muestrear239
  L__Muestrear240
  L__Muestrear241
  L_end_spi_1
  _spi_1
  L__spi_1243
  L__spi_1244
  L__spi_1245
  L__spi_1246
  L__spi_1247
  L__spi_1248
  L__spi_1249
  L__spi_1250
  L__spi_1251
  L__spi_1252
  L__spi_1253
  L__spi_1254
  L__spi_1255
  L__spi_1256
  L__spi_1257
  L__spi_1258
  L__spi_1259
  L__spi_1260
  L__spi_1261
  L__spi_1262
  L__spi_1263
  L__spi_1264
  L__spi_1265
  L__spi_1266
  L__spi_1267
  L__spi_1268
  L__spi_1269
  L__spi_1270
  L__spi_1271
  L__spi_1272
  L__spi_1273
  L__spi_1274
  L__spi_1275
  L__spi_1276
  L__spi_1277
  L__spi_1278
  L__spi_1279
  L__spi_1280
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L_end_int_1
  _int_1
  L__int_1287
  L__int_1288
  L__int_1289
  L_end_int_2
  _int_2
  L__int_2291
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int293
  L__Timer1Int294
  L__Timer1Int295
  L__Timer1Int296
  L__Timer1Int297
  L__Timer1Int298
  L_end_Timer2Int
  _Timer2Int
  L__Timer2Int300
  L_end_Timer3Int
  _Timer3Int
  L__Timer3Int302
  L_end_urx_1
  _urx_1
  L__urx_1304
  L__urx_1305
  L__urx_1306
  L__urx_1307
  L__urx_1308
  L__urx_1309
  L__urx_1310
  L__urx_1311
  L__urx_1312
  L__urx_1313
  L__urx_1314
  L__urx_1315
  L__urx_1316
  L__urx_1317
  L__urx_1318
  L__urx_1319
  L__urx_1320
  L__urx_1321
  L__urx_1322
  L_ADXL355_init0
  L_ADXL355_init2
  L_ADXL355_init3
  L_ADXL355_init4
  L_ADXL355_init5
  L_ADXL355_init6
  L_ADXL355_init7
  L_ADXL355_read_data8
  L_ADXL355_read_data9
  L_ADXL355_read_data10
  L_ADXL355_read_data11
  L_ADXL355_read_data12
  L_ADXL355_read_data13
  L_ADXL355_read_data14
  L_ADXL355_read_data15
  L_ADXL355_read_FIFO16
  L_end_ADXL355_init
  _ADXL355_init
  L__ADXL355_init19
  L__ADXL355_init20
  L__ADXL355_init21
  L__ADXL355_init22
  L_end_ADXL355_write_byte
  _ADXL355_write_byte
  L_end_ADXL355_read_byte
  _ADXL355_read_byte
  L_end_ADXL355_read_data
  _ADXL355_read_data
  L__ADXL355_read_data26
  L__ADXL355_read_data27
  L__ADXL355_read_data28
  L_end_ADXL355_read_FIFO
  _ADXL355_read_FIFO
  L_IncrementarFecha0
  L_IncrementarFecha1
  L_IncrementarFecha2
  L_IncrementarFecha3
  L_IncrementarFecha4
  L_IncrementarFecha5
  L_IncrementarFecha6
  L_IncrementarFecha7
  L_IncrementarFecha8
  L_IncrementarFecha9
  L_IncrementarFecha10
  L_IncrementarFecha11
  L_IncrementarFecha12
  L_IncrementarFecha13
  L_IncrementarFecha14
  L_IncrementarFecha15
  L_IncrementarFecha16
  L_IncrementarFecha17
  L_IncrementarFecha18
  L_IncrementarFecha19
  L_IncrementarFecha20
  L_IncrementarFecha21
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L__IncrementarFecha27
  L__IncrementarFecha28
  L__IncrementarFecha29
  L__IncrementarFecha30
  L__IncrementarFecha31
  L__IncrementarFecha32
  L__IncrementarFecha33
  L__IncrementarFecha34
  L__IncrementarFecha35
  L__IncrementarFecha36
  L__IncrementarFecha37
  L__IncrementarFecha38
  L__IncrementarFecha39
  L__IncrementarFecha40
  L__IncrementarFecha41
  L__IncrementarFecha42
  L__IncrementarFecha43
  L__IncrementarFecha44
  L__IncrementarFecha45
  L__IncrementarFecha46
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha54
  L__IncrementarFecha55
  L__IncrementarFecha56
  L__IncrementarFecha57
  L__IncrementarFecha58
  L__IncrementarFecha59
  L__IncrementarFecha60
  L__IncrementarFecha61
  L__IncrementarFecha62
  L__IncrementarFecha63
  L__IncrementarFecha64
  L__IncrementarFecha65
  L__IncrementarFecha66
  L__IncrementarFecha67
  L__IncrementarFecha68
  L__IncrementarFecha69
  L__IncrementarFecha70
  L__IncrementarFecha71
  L__IncrementarFecha72
  L__IncrementarFecha73
  L__IncrementarFecha74
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_main0
  L_main1
  L_main2
  L_ConfiguracionPrincipal4
  L_ConfiguracionPrincipal6
  L_ConfiguracionPrincipal8
  L_ConfiguracionPrincipal10
  L_InterrupcionP112
  L_Muestrear14
  L_Muestrear15
  L_Muestrear16
  L_Muestrear17
  L_Muestrear18
  L_Muestrear19
  L_Muestrear20
  L_Muestrear21
  L_Muestrear22
  L_Muestrear23
  L_Muestrear24
  L_Muestrear25
  L_Muestrear26
  L_Muestrear27
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_spi_133
  L_spi_134
  L_spi_135
  L_spi_136
  L_spi_137
  L_spi_138
  L_spi_139
  L_spi_140
  L_spi_141
  L_spi_142
  L_spi_143
  L_spi_144
  L_spi_145
  L_spi_146
  L_spi_147
  L_spi_148
  L_spi_149
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_156
  L_spi_158
  L_spi_160
  L_spi_162
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_spi_171
  L_spi_172
  L_spi_173
  L_spi_174
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_int_1102
  L_int_1103
  L_int_1104
  L_int_2105
  L_Timer1Int106
  L_Timer1Int107
  L_Timer1Int108
  L_Timer1Int109
  L_Timer1Int110
  L_Timer1Int111
  L_Timer1Int112
  L_Timer1Int113
  L_Timer1Int114
  L_Timer1Int115
  L_Timer1Int116
  L_Timer1Int117
  L_Timer1Int118
  L_Timer1Int119
  L_Timer2Int120
  L_Timer3Int121
  L_urx_1122
  L_urx_1123
  L_urx_1124
  L_urx_1125
  L_urx_1126
  L_urx_1127
  L_urx_1128
  L_urx_1129
  L_urx_1130
  L_urx_1131
  L_urx_1132
  L_urx_1133
  L_urx_1134
  L_urx_1135
  L_urx_1136
  L_urx_1137
  L_urx_1138
  L_urx_1139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L__Muestrear150
  L__Muestrear151
  L__Muestrear152
  L__spi_1153
  L__spi_1154
  L__spi_1155
  L__spi_1156
  L__spi_1157
  L__spi_1158
  L__spi_1159
  L__spi_1160
  L__spi_1161
  L__spi_1162
  L__spi_1163
  L__spi_1164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__Timer1Int214
  L__Timer1Int215
  L__Timer1Int216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L__urx_1222
  L__urx_1223
  L__urx_1224
  L__urx_1225
  L__urx_1226
  L__urx_1227
  L__urx_1228
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear234
  L__Muestrear235
  L__Muestrear236
  L__Muestrear237
  L__Muestrear238
  L__Muestrear239
  L__Muestrear240
  L__Muestrear241
  L_end_spi_1
  _spi_1
  L__spi_1243
  L__spi_1244
  L__spi_1245
  L__spi_1246
  L__spi_1247
  L__spi_1248
  L__spi_1249
  L__spi_1250
  L__spi_1251
  L__spi_1252
  L__spi_1253
  L__spi_1254
  L__spi_1255
  L__spi_1256
  L__spi_1257
  L__spi_1258
  L__spi_1259
  L__spi_1260
  L__spi_1261
  L__spi_1262
  L__spi_1263
  L__spi_1264
  L__spi_1265
  L__spi_1266
  L__spi_1267
  L__spi_1268
  L__spi_1269
  L__spi_1270
  L__spi_1271
  L__spi_1272
  L__spi_1273
  L__spi_1274
  L__spi_1275
  L__spi_1276
  L__spi_1277
  L__spi_1278
  L__spi_1279
  L__spi_1280
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L_end_int_1
  _int_1
  L__int_1287
  L__int_1288
  L__int_1289
  L_end_int_2
  _int_2
  L__int_2291
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int293
  L__Timer1Int294
  L__Timer1Int295
  L__Timer1Int296
  L__Timer1Int297
  L__Timer1Int298
  L_end_Timer2Int
  _Timer2Int
  L__Timer2Int300
  L_end_Timer3Int
  _Timer3Int
  L__Timer3Int302
  L_end_urx_1
  _urx_1
  L__urx_1304
  L__urx_1305
  L__urx_1306
  L__urx_1307
  L__urx_1308
  L__urx_1309
  L__urx_1310
  L__urx_1311
  L__urx_1312
  L__urx_1313
  L__urx_1314
  L__urx_1315
  L__urx_1316
  L__urx_1317
  L__urx_1318
  L__urx_1319
  L__urx_1320
  L__urx_1321
  L__urx_1322
  L_GPS_init0
  L_end_GPS_init
  _GPS_init
  L_end_RecuperarFechaGPS
  _RecuperarFechaGPS
  L_end_RecuperarHoraGPS
  _RecuperarHoraGPS
  L_IncrementarFecha0
  L_IncrementarFecha1
  L_IncrementarFecha2
  L_IncrementarFecha3
  L_IncrementarFecha4
  L_IncrementarFecha5
  L_IncrementarFecha6
  L_IncrementarFecha7
  L_IncrementarFecha8
  L_IncrementarFecha9
  L_IncrementarFecha10
  L_IncrementarFecha11
  L_IncrementarFecha12
  L_IncrementarFecha13
  L_IncrementarFecha14
  L_IncrementarFecha15
  L_IncrementarFecha16
  L_IncrementarFecha17
  L_IncrementarFecha18
  L_IncrementarFecha19
  L_IncrementarFecha20
  L_IncrementarFecha21
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L__IncrementarFecha27
  L__IncrementarFecha28
  L__IncrementarFecha29
  L__IncrementarFecha30
  L__IncrementarFecha31
  L__IncrementarFecha32
  L__IncrementarFecha33
  L__IncrementarFecha34
  L__IncrementarFecha35
  L__IncrementarFecha36
  L__IncrementarFecha37
  L__IncrementarFecha38
  L__IncrementarFecha39
  L__IncrementarFecha40
  L__IncrementarFecha41
  L__IncrementarFecha42
  L__IncrementarFecha43
  L__IncrementarFecha44
  L__IncrementarFecha45
  L__IncrementarFecha46
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha54
  L__IncrementarFecha55
  L__IncrementarFecha56
  L__IncrementarFecha57
  L__IncrementarFecha58
  L__IncrementarFecha59
  L__IncrementarFecha60
  L__IncrementarFecha61
  L__IncrementarFecha62
  L__IncrementarFecha63
  L__IncrementarFecha64
  L__IncrementarFecha65
  L__IncrementarFecha66
  L__IncrementarFecha67
  L__IncrementarFecha68
  L__IncrementarFecha69
  L__IncrementarFecha70
  L__IncrementarFecha71
  L__IncrementarFecha72
  L__IncrementarFecha73
  L__IncrementarFecha74
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_IntToStrWithZeros37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStr43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongWordToStrWithZeros48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongToStr54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_LongIntToStrWithZeros62
  L_LongIntToStrWithZeros63
  L_Dec2Bcd64
  L_Dec2Bcd65
  L_Rtrim66
  L_Rtrim67
  L_Rtrim68
  L_Rtrim69
  L_Ltrim70
  L_Ltrim71
  L_Ltrim72
  L_Ltrim73
  L_Ltrim74
  L_Ltrim75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L_FloatToStr94
  L_FloatToStr95
  L_FloatToStr96
  L_FloatToStr97
  L__ShortToStr98
  L__IntToStr99
  L__LongToStr100
  L__Rtrim101
  L__Rtrim102
  L__Rtrim103
  L__Ltrim104
  L__Ltrim105
  L__Ltrim106
  L__Ltrim107
  L__FloatToStr108
  L__FloatToStr109
  L__FloatToStr110
  L__FloatToStr111
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L__ByteToStr119
  L__ByteToStr120
  L_end_WordToStr
  _WordToStr
  L__WordToStr122
  L__WordToStr123
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros125
  L__WordToStrWithZeros126
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr128
  L__ShortToStr129
  L__ShortToStr130
  L__ShortToStr131
  L_end_IntToStr
  _IntToStr
  L__IntToStr133
  L__IntToStr134
  L__IntToStr135
  L__IntToStr136
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros138
  L__IntToStrWithZeros139
  L__IntToStrWithZeros140
  L__IntToStrWithZeros141
  L__IntToStrWithZeros142
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr144
  L__LongWordToStr145
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros147
  L__LongWordToStrWithZeros148
  L_end_LongToStr
  _LongToStr
  L__LongToStr150
  L__LongToStr151
  L__LongToStr152
  L__LongToStr153
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros155
  L__LongIntToStrWithZeros156
  L__LongIntToStrWithZeros157
  L__LongIntToStrWithZeros158
  L__LongIntToStrWithZeros159
  L_end_Dec2Bcd
  _Dec2Bcd
  L__Dec2Bcd161
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L_end_Rtrim
  _Rtrim
  L__Rtrim166
  L__Rtrim167
  L_end_Ltrim
  _Ltrim
  L__Ltrim169
  L__Ltrim170
  L__Ltrim171
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr173
  L__FloatToStr174
  L__FloatToStr175
  L__FloatToStr176
  L__FloatToStr177
  L__FloatToStr178
  L__FloatToStr179
  L__FloatToStr180
  L__FloatToStr181
  L__FloatToStr182
  L__FloatToStr183
  L__FloatToStr184
  L__FloatToStr185
  L__FloatToStr186
  L__FloatToStr187
  L__FloatToStr188
  L__FloatToStr189
  L__FloatToStr190
  L__FloatToStr191
  L_abs0
  L___Lib_CStdlib_strtod1
  L___Lib_CStdlib_strtod2
  L___Lib_CStdlib_strtod3
  L___Lib_CStdlib_strtod4
  L___Lib_CStdlib_strtod5
  L___Lib_CStdlib_strtod6
  L___Lib_CStdlib_strtod7
  L___Lib_CStdlib_strtod8
  L___Lib_CStdlib_strtod9
  L___Lib_CStdlib_strtod10
  L___Lib_CStdlib_strtod11
  L___Lib_CStdlib_strtod12
  L___Lib_CStdlib_strtod13
  L___Lib_CStdlib_strtod14
  L___Lib_CStdlib_strtod15
  L___Lib_CStdlib_strtod16
  L___Lib_CStdlib_strtod17
  L___Lib_CStdlib_strtod18
  L___Lib_CStdlib_strtod19
  L___Lib_CStdlib_strtod20
  L___Lib_CStdlib_strtod21
  L___Lib_CStdlib_strtod22
  L___Lib_CStdlib_strtod23
  L___Lib_CStdlib_strtod24
  L___Lib_CStdlib_strtod25
  L___Lib_CStdlib_strtod26
  L___Lib_CStdlib_strtod27
  L___Lib_CStdlib_strtod28
  L___Lib_CStdlib_strtod29
  L___Lib_CStdlib_strtod30
  L___Lib_CStdlib_strtod31
  L___Lib_CStdlib_strtod32
  L___Lib_CStdlib_strtod33
  L___Lib_CStdlib_strtod34
  L___Lib_CStdlib_strtod35
  L___Lib_CStdlib_strtod36
  L___Lib_CStdlib_strtod37
  L___Lib_CStdlib_strtod38
  L___Lib_CStdlib_strtod39
  L___Lib_CStdlib_strtod40
  L___Lib_CStdlib_strtod41
  L___Lib_CStdlib_strtod42
  L___Lib_CStdlib_strtod43
  L___Lib_CStdlib_strtod44
  L___Lib_CStdlib_strtod45
  L___Lib_CStdlib_strtod46
  L___Lib_CStdlib_strtod47
  L___Lib_CStdlib_strtod48
  L___Lib_CStdlib_strtod49
  L___Lib_CStdlib_strtod50
  L___Lib_CStdlib_strtod51
  L___Lib_CStdlib_strtod52
  ___atoi_skipws_atoi
  L_atoi53
  L_atoi54
  L_atoi55
  L_atoi56
  L_atoi57
  L_atoi58
  ___atoi_conv_atoi
  L_atoi59
  L_atoi60
  ___atol_skipws_atol
  L_atol61
  L_atol62
  L_atol63
  L_atol64
  L_atol65
  L_atol66
  ___atol_conv_atol
  L_atol67
  L_atol68
  L_labs69
  L_max70
  L_min71
  L_rand72
  L_xtoi73
  L_xtoi74
  L_xtoi75
  L_xtoi76
  L_xtoi77
  L_xtoi78
  L_xtoi79
  L_xtoi80
  L_xtoi81
  L_xtoi82
  L_xtoi83
  L___Lib_CStdlib_strtod84
  L___Lib_CStdlib_strtod85
  L___Lib_CStdlib_strtod86
  L___Lib_CStdlib_strtod87
  L___Lib_CStdlib_strtod88
  L___Lib_CStdlib_strtod89
  L___Lib_CStdlib_strtod90
  L___Lib_CStdlib_strtod91
  L___Lib_CStdlib_strtod92
  L___Lib_CStdlib_strtod93
  L___Lib_CStdlib_strtod94
  L___Lib_CStdlib_strtod95
  L___Lib_CStdlib_strtod96
  L__atoi97
  L__atoi98
  L__atoi99
  L__atol100
  L__atol101
  L__atol102
  L_end_abs
  _abs
  L__abs104
  L_end_strtod
  __Lib_CStdlib_strtod
  L___Lib_CStdlib_strtod106
  L___Lib_CStdlib_strtod107
  L___Lib_CStdlib_strtod108
  L___Lib_CStdlib_strtod109
  L___Lib_CStdlib_strtod110
  L___Lib_CStdlib_strtod111
  L___Lib_CStdlib_strtod112
  L___Lib_CStdlib_strtod113
  L___Lib_CStdlib_strtod114
  L___Lib_CStdlib_strtod115
  L___Lib_CStdlib_strtod116
  L___Lib_CStdlib_strtod117
  L___Lib_CStdlib_strtod118
  L___Lib_CStdlib_strtod119
  L___Lib_CStdlib_strtod120
  L___Lib_CStdlib_strtod121
  L___Lib_CStdlib_strtod122
  L___Lib_CStdlib_strtod123
  L___Lib_CStdlib_strtod124
  L___Lib_CStdlib_strtod125
  L___Lib_CStdlib_strtod126
  L___Lib_CStdlib_strtod127
  L___Lib_CStdlib_strtod128
  L___Lib_CStdlib_strtod129
  L___Lib_CStdlib_strtod130
  L___Lib_CStdlib_strtod131
  L___Lib_CStdlib_strtod132
  L___Lib_CStdlib_strtod133
  L_end_atof
  _atof
  L_end_atoi
  _atoi
  L__atoi136
  L__atoi137
  L__atoi138
  L__atoi139
  L__atoi140
  L__atoi141
  L_end_atol
  _atol
  L__atol143
  L__atol144
  L__atol145
  L__atol146
  L__atol147
  L__atol148
  L_end_div
  _div
  L_end_ldiv
  _ldiv
  L_end_uldiv
  _uldiv
  L_end_labs
  _labs
  L__labs153
  L_end_max
  _max
  L__max155
  L_end_min
  _min
  L__min157
  L_end_srand
  _srand
  L_end_rand
  _rand
  L__rand160
  L_end_xtoi
  _xtoi
  L__xtoi162
  L__xtoi163
  L__xtoi164
  L__xtoi165
  L__xtoi166
  L__xtoi167
  L__xtoi168
  L_islower0
  L_islower1
  L_isupper2
  L_isupper3
  L_isalpha4
  L_isalpha5
  L_iscntrl6
  L_iscntrl7
  L_isdigit8
  L_isdigit9
  L_isalnum10
  L_isalnum11
  L_isspace12
  L_isspace13
  L_isspace14
  L_isspace15
  L_ispunct16
  L_ispunct17
  L_ispunct18
  L_ispunct19
  L_ispunct20
  L_ispunct21
  L_ispunct22
  L_ispunct23
  L_isgraph24
  L_isgraph25
  L_isxdigit26
  L_isxdigit27
  L_isxdigit28
  L_isxdigit29
  L_tolower30
  L_tolower31
  L_tolower32
  L_toupper33
  L_toupper34
  L_toupper35
  L__isspace36
  L__isspace37
  L__isspace38
  L__tolower39
  L__tolower40
  L__tolower41
  L__toupper42
  L__toupper43
  L__toupper44
  L_end_islower
  _islower
  L__islower46
  L__islower47
  L_end_isupper
  _isupper
  L__isupper49
  L__isupper50
  L_end_isalpha
  _isalpha
  L__isalpha52
  L__isalpha53
  L_end_iscntrl
  _iscntrl
  L__iscntrl55
  L__iscntrl56
  L_end_isdigit
  _isdigit
  L__isdigit58
  L__isdigit59
  L_end_isalnum
  _isalnum
  L__isalnum61
  L__isalnum62
  L__isalnum63
  L_end_isspace
  _isspace
  L__isspace65
  L__isspace66
  L__isspace67
  L_end_ispunct
  _ispunct
  L__ispunct69
  L__ispunct70
  L__ispunct71
  L__ispunct72
  L__ispunct73
  L__ispunct74
  L__ispunct75
  L__ispunct76
  L_end_isgraph
  _isgraph
  L__isgraph78
  L__isgraph79
  L__isgraph80
  L__isgraph81
  L_end_isxdigit
  _isxdigit
  L__isxdigit83
  L__isxdigit84
  L__isxdigit85
  L__isxdigit86
  L_end_tolower
  _tolower
  L__tolower88
  L__tolower89
  L_end_toupper
  _toupper
  L__toupper91
  L__toupper92
  L_main0
  L_main1
  L_main2
  L_ConfiguracionPrincipal4
  L_ConfiguracionPrincipal6
  L_ConfiguracionPrincipal8
  L_ConfiguracionPrincipal10
  L_InterrupcionP112
  L_Muestrear14
  L_Muestrear15
  L_Muestrear16
  L_Muestrear17
  L_Muestrear18
  L_Muestrear19
  L_Muestrear20
  L_Muestrear21
  L_Muestrear22
  L_Muestrear23
  L_Muestrear24
  L_Muestrear25
  L_Muestrear26
  L_Muestrear27
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_spi_133
  L_spi_134
  L_spi_135
  L_spi_136
  L_spi_137
  L_spi_138
  L_spi_139
  L_spi_140
  L_spi_141
  L_spi_142
  L_spi_143
  L_spi_144
  L_spi_145
  L_spi_146
  L_spi_147
  L_spi_148
  L_spi_149
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_156
  L_spi_158
  L_spi_160
  L_spi_162
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_spi_171
  L_spi_172
  L_spi_173
  L_spi_174
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_int_1102
  L_int_1103
  L_int_1104
  L_int_2105
  L_Timer1Int106
  L_Timer1Int107
  L_Timer1Int108
  L_Timer1Int109
  L_Timer1Int110
  L_Timer1Int111
  L_Timer1Int112
  L_Timer1Int113
  L_Timer1Int114
  L_Timer1Int115
  L_Timer1Int116
  L_Timer1Int117
  L_Timer1Int118
  L_Timer1Int119
  L_Timer2Int120
  L_Timer3Int121
  L_urx_1122
  L_urx_1123
  L_urx_1124
  L_urx_1125
  L_urx_1126
  L_urx_1127
  L_urx_1128
  L_urx_1129
  L_urx_1130
  L_urx_1131
  L_urx_1132
  L_urx_1133
  L_urx_1134
  L_urx_1135
  L_urx_1136
  L_urx_1137
  L_urx_1138
  L_urx_1139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L__Muestrear150
  L__Muestrear151
  L__Muestrear152
  L__spi_1153
  L__spi_1154
  L__spi_1155
  L__spi_1156
  L__spi_1157
  L__spi_1158
  L__spi_1159
  L__spi_1160
  L__spi_1161
  L__spi_1162
  L__spi_1163
  L__spi_1164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__Timer1Int214
  L__Timer1Int215
  L__Timer1Int216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L__urx_1222
  L__urx_1223
  L__urx_1224
  L__urx_1225
  L__urx_1226
  L__urx_1227
  L__urx_1228
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear234
  L__Muestrear235
  L__Muestrear236
  L__Muestrear237
  L__Muestrear238
  L__Muestrear239
  L__Muestrear240
  L__Muestrear241
  L_end_spi_1
  _spi_1
  L__spi_1243
  L__spi_1244
  L__spi_1245
  L__spi_1246
  L__spi_1247
  L__spi_1248
  L__spi_1249
  L__spi_1250
  L__spi_1251
  L__spi_1252
  L__spi_1253
  L__spi_1254
  L__spi_1255
  L__spi_1256
  L__spi_1257
  L__spi_1258
  L__spi_1259
  L__spi_1260
  L__spi_1261
  L__spi_1262
  L__spi_1263
  L__spi_1264
  L__spi_1265
  L__spi_1266
  L__spi_1267
  L__spi_1268
  L__spi_1269
  L__spi_1270
  L__spi_1271
  L__spi_1272
  L__spi_1273
  L__spi_1274
  L__spi_1275
  L__spi_1276
  L__spi_1277
  L__spi_1278
  L__spi_1279
  L__spi_1280
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L_end_int_1
  _int_1
  L__int_1287
  L__int_1288
  L__int_1289
  L_end_int_2
  _int_2
  L__int_2291
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int293
  L__Timer1Int294
  L__Timer1Int295
  L__Timer1Int296
  L__Timer1Int297
  L__Timer1Int298
  L_end_Timer2Int
  _Timer2Int
  L__Timer2Int300
  L_end_Timer3Int
  _Timer3Int
  L__Timer3Int302
  L_end_urx_1
  _urx_1
  L__urx_1304
  L__urx_1305
  L__urx_1306
  L__urx_1307
  L__urx_1308
  L__urx_1309
  L__urx_1310
  L__urx_1311
  L__urx_1312
  L__urx_1313
  L__urx_1314
  L__urx_1315
  L__urx_1316
  L__urx_1317
  L__urx_1318
  L__urx_1319
  L__urx_1320
  L__urx_1321
  L__urx_1322
  L_end_RecuperarFechaRPI
  _RecuperarFechaRPI
  L_end_RecuperarHoraRPI
  _RecuperarHoraRPI
  L_main0
  L_main1
  L_main2
  L_ConfiguracionPrincipal4
  L_ConfiguracionPrincipal6
  L_ConfiguracionPrincipal8
  L_ConfiguracionPrincipal10
  L_InterrupcionP112
  L_Muestrear14
  L_Muestrear15
  L_Muestrear16
  L_Muestrear17
  L_Muestrear18
  L_Muestrear19
  L_Muestrear20
  L_Muestrear21
  L_Muestrear22
  L_Muestrear23
  L_Muestrear24
  L_Muestrear25
  L_Muestrear26
  L_Muestrear27
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_spi_133
  L_spi_134
  L_spi_135
  L_spi_136
  L_spi_137
  L_spi_138
  L_spi_139
  L_spi_140
  L_spi_141
  L_spi_142
  L_spi_143
  L_spi_144
  L_spi_145
  L_spi_146
  L_spi_147
  L_spi_148
  L_spi_149
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_156
  L_spi_158
  L_spi_160
  L_spi_162
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_spi_171
  L_spi_172
  L_spi_173
  L_spi_174
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_int_1102
  L_int_1103
  L_int_1104
  L_int_2105
  L_Timer1Int106
  L_Timer1Int107
  L_Timer1Int108
  L_Timer1Int109
  L_Timer1Int110
  L_Timer1Int111
  L_Timer1Int112
  L_Timer1Int113
  L_Timer1Int114
  L_Timer1Int115
  L_Timer1Int116
  L_Timer1Int117
  L_Timer1Int118
  L_Timer1Int119
  L_Timer2Int120
  L_Timer3Int121
  L_urx_1122
  L_urx_1123
  L_urx_1124
  L_urx_1125
  L_urx_1126
  L_urx_1127
  L_urx_1128
  L_urx_1129
  L_urx_1130
  L_urx_1131
  L_urx_1132
  L_urx_1133
  L_urx_1134
  L_urx_1135
  L_urx_1136
  L_urx_1137
  L_urx_1138
  L_urx_1139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L__Muestrear150
  L__Muestrear151
  L__Muestrear152
  L__spi_1153
  L__spi_1154
  L__spi_1155
  L__spi_1156
  L__spi_1157
  L__spi_1158
  L__spi_1159
  L__spi_1160
  L__spi_1161
  L__spi_1162
  L__spi_1163
  L__spi_1164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__Timer1Int214
  L__Timer1Int215
  L__Timer1Int216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L__urx_1222
  L__urx_1223
  L__urx_1224
  L__urx_1225
  L__urx_1226
  L__urx_1227
  L__urx_1228
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear234
  L__Muestrear235
  L__Muestrear236
  L__Muestrear237
  L__Muestrear238
  L__Muestrear239
  L__Muestrear240
  L__Muestrear241
  L_end_spi_1
  _spi_1
  L__spi_1243
  L__spi_1244
  L__spi_1245
  L__spi_1246
  L__spi_1247
  L__spi_1248
  L__spi_1249
  L__spi_1250
  L__spi_1251
  L__spi_1252
  L__spi_1253
  L__spi_1254
  L__spi_1255
  L__spi_1256
  L__spi_1257
  L__spi_1258
  L__spi_1259
  L__spi_1260
  L__spi_1261
  L__spi_1262
  L__spi_1263
  L__spi_1264
  L__spi_1265
  L__spi_1266
  L__spi_1267
  L__spi_1268
  L__spi_1269
  L__spi_1270
  L__spi_1271
  L__spi_1272
  L__spi_1273
  L__spi_1274
  L__spi_1275
  L__spi_1276
  L__spi_1277
  L__spi_1278
  L__spi_1279
  L__spi_1280
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L_end_int_1
  _int_1
  L__int_1287
  L__int_1288
  L__int_1289
  L_end_int_2
  _int_2
  L__int_2291
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int293
  L__Timer1Int294
  L__Timer1Int295
  L__Timer1Int296
  L__Timer1Int297
  L__Timer1Int298
  L_end_Timer2Int
  _Timer2Int
  L__Timer2Int300
  L_end_Timer3Int
  _Timer3Int
  L__Timer3Int302
  L_end_urx_1
  _urx_1
  L__urx_1304
  L__urx_1305
  L__urx_1306
  L__urx_1307
  L__urx_1308
  L__urx_1309
  L__urx_1310
  L__urx_1311
  L__urx_1312
  L__urx_1313
  L__urx_1314
  L__urx_1315
  L__urx_1316
  L__urx_1317
  L__urx_1318
  L__urx_1319
  L__urx_1320
  L__urx_1321
  L__urx_1322
  L_IncrementarFecha0
  L_IncrementarFecha1
  L_IncrementarFecha2
  L_IncrementarFecha3
  L_IncrementarFecha4
  L_IncrementarFecha5
  L_IncrementarFecha6
  L_IncrementarFecha7
  L_IncrementarFecha8
  L_IncrementarFecha9
  L_IncrementarFecha10
  L_IncrementarFecha11
  L_IncrementarFecha12
  L_IncrementarFecha13
  L_IncrementarFecha14
  L_IncrementarFecha15
  L_IncrementarFecha16
  L_IncrementarFecha17
  L_IncrementarFecha18
  L_IncrementarFecha19
  L_IncrementarFecha20
  L_IncrementarFecha21
  L_IncrementarFecha22
  L_IncrementarFecha23
  L_IncrementarFecha24
  L_IncrementarFecha25
  L_IncrementarFecha26
  L__IncrementarFecha27
  L__IncrementarFecha28
  L__IncrementarFecha29
  L__IncrementarFecha30
  L__IncrementarFecha31
  L__IncrementarFecha32
  L__IncrementarFecha33
  L__IncrementarFecha34
  L__IncrementarFecha35
  L__IncrementarFecha36
  L__IncrementarFecha37
  L__IncrementarFecha38
  L__IncrementarFecha39
  L__IncrementarFecha40
  L__IncrementarFecha41
  L__IncrementarFecha42
  L__IncrementarFecha43
  L__IncrementarFecha44
  L__IncrementarFecha45
  L__IncrementarFecha46
  L_end_DS3234_init
  _DS3234_init
  L_end_DS3234_write_byte
  _DS3234_write_byte
  L_end_DS3234_read_byte
  _DS3234_read_byte
  L_end_DS3234_setDate
  _DS3234_setDate
  L_end_RecuperarHoraRTC
  _RecuperarHoraRTC
  L_end_RecuperarFechaRTC
  _RecuperarFechaRTC
  L_end_IncrementarFecha
  _IncrementarFecha
  L__IncrementarFecha54
  L__IncrementarFecha55
  L__IncrementarFecha56
  L__IncrementarFecha57
  L__IncrementarFecha58
  L__IncrementarFecha59
  L__IncrementarFecha60
  L__IncrementarFecha61
  L__IncrementarFecha62
  L__IncrementarFecha63
  L__IncrementarFecha64
  L__IncrementarFecha65
  L__IncrementarFecha66
  L__IncrementarFecha67
  L__IncrementarFecha68
  L__IncrementarFecha69
  L__IncrementarFecha70
  L__IncrementarFecha71
  L__IncrementarFecha72
  L__IncrementarFecha73
  L__IncrementarFecha74
  L_end_AjustarTiempoSistema
  _AjustarTiempoSistema
  L_ByteToStr0
  L_ByteToStr1
  L_ByteToStr2
  L_ByteToStr3
  L_ByteToStr4
  L_ByteToStr5
  L_WordToStr6
  L_WordToStr7
  L_WordToStr8
  L_WordToStr9
  L_WordToStr10
  L_WordToStr11
  L_WordToStrWithZeros12
  L_WordToStrWithZeros13
  L_WordToStrWithZeros14
  L_WordToStrWithZeros15
  L_WordToStrWithZeros16
  L_ShortToStr17
  L_ShortToStr18
  L_ShortToStr19
  L_ShortToStr20
  L_ShortToStr21
  L_ShortToStr22
  L_IntToStr23
  L_IntToStr24
  L_IntToStr25
  L_IntToStr26
  L_IntToStr27
  L_IntToStr28
  L_IntToStrWithZeros29
  L_IntToStrWithZeros30
  L_IntToStrWithZeros31
  L_IntToStrWithZeros32
  L_IntToStrWithZeros33
  L_IntToStrWithZeros34
  L_IntToStrWithZeros35
  L_IntToStrWithZeros36
  L_IntToStrWithZeros37
  L_LongWordToStr38
  L_LongWordToStr39
  L_LongWordToStr40
  L_LongWordToStr41
  L_LongWordToStr42
  L_LongWordToStr43
  L_LongWordToStrWithZeros44
  L_LongWordToStrWithZeros45
  L_LongWordToStrWithZeros46
  L_LongWordToStrWithZeros47
  L_LongWordToStrWithZeros48
  L_LongToStr49
  L_LongToStr50
  L_LongToStr51
  L_LongToStr52
  L_LongToStr53
  L_LongToStr54
  L_LongIntToStrWithZeros55
  L_LongIntToStrWithZeros56
  L_LongIntToStrWithZeros57
  L_LongIntToStrWithZeros58
  L_LongIntToStrWithZeros59
  L_LongIntToStrWithZeros60
  L_LongIntToStrWithZeros61
  L_LongIntToStrWithZeros62
  L_LongIntToStrWithZeros63
  L_Dec2Bcd64
  L_Dec2Bcd65
  L_Rtrim66
  L_Rtrim67
  L_Rtrim68
  L_Rtrim69
  L_Ltrim70
  L_Ltrim71
  L_Ltrim72
  L_Ltrim73
  L_Ltrim74
  L_Ltrim75
  L_FloatToStr76
  L_FloatToStr77
  L_FloatToStr78
  L_FloatToStr79
  L_FloatToStr80
  L_FloatToStr81
  L_FloatToStr82
  L_FloatToStr83
  L_FloatToStr84
  L_FloatToStr85
  L_FloatToStr86
  L_FloatToStr87
  L_FloatToStr88
  L_FloatToStr89
  L_FloatToStr90
  L_FloatToStr91
  L_FloatToStr92
  L_FloatToStr93
  L_FloatToStr94
  L_FloatToStr95
  L_FloatToStr96
  L_FloatToStr97
  L__ShortToStr98
  L__IntToStr99
  L__LongToStr100
  L__Rtrim101
  L__Rtrim102
  L__Rtrim103
  L__Ltrim104
  L__Ltrim105
  L__Ltrim106
  L__Ltrim107
  L__FloatToStr108
  L__FloatToStr109
  L__FloatToStr110
  L__FloatToStr111
  L_end_ByteToHex
  _ByteToHex
  L_end_ShortToHex
  _ShortToHex
  L_end_WordToHex
  _WordToHex
  L_end_IntToHex
  _IntToHex
  L_end_LongWordToHex
  _LongWordToHex
  L_end_LongIntToHex
  _LongIntToHex
  L_end_ByteToStr
  _ByteToStr
  L__ByteToStr119
  L__ByteToStr120
  L_end_WordToStr
  _WordToStr
  L__WordToStr122
  L__WordToStr123
  L_end_WordToStrWithZeros
  _WordToStrWithZeros
  L__WordToStrWithZeros125
  L__WordToStrWithZeros126
  L_end_ShortToStr
  _ShortToStr
  L__ShortToStr128
  L__ShortToStr129
  L__ShortToStr130
  L__ShortToStr131
  L_end_IntToStr
  _IntToStr
  L__IntToStr133
  L__IntToStr134
  L__IntToStr135
  L__IntToStr136
  L_end_IntToStrWithZeros
  _IntToStrWithZeros
  L__IntToStrWithZeros138
  L__IntToStrWithZeros139
  L__IntToStrWithZeros140
  L__IntToStrWithZeros141
  L__IntToStrWithZeros142
  L_end_LongWordToStr
  _LongWordToStr
  L__LongWordToStr144
  L__LongWordToStr145
  L_end_LongWordToStrWithZeros
  _LongWordToStrWithZeros
  L__LongWordToStrWithZeros147
  L__LongWordToStrWithZeros148
  L_end_LongToStr
  _LongToStr
  L__LongToStr150
  L__LongToStr151
  L__LongToStr152
  L__LongToStr153
  L_end_LongIntToStrWithZeros
  _LongIntToStrWithZeros
  L__LongIntToStrWithZeros155
  L__LongIntToStrWithZeros156
  L__LongIntToStrWithZeros157
  L__LongIntToStrWithZeros158
  L__LongIntToStrWithZeros159
  L_end_Dec2Bcd
  _Dec2Bcd
  L__Dec2Bcd161
  L_end_Bcd2Dec
  _Bcd2Dec
  L_end_Bcd2Dec16
  _Bcd2Dec16
  L_end_Dec2Bcd16
  _Dec2Bcd16
  L_end_Rtrim
  _Rtrim
  L__Rtrim166
  L__Rtrim167
  L_end_Ltrim
  _Ltrim
  L__Ltrim169
  L__Ltrim170
  L__Ltrim171
  L_end_FloatToStr
  _FloatToStr
  L__FloatToStr173
  L__FloatToStr174
  L__FloatToStr175
  L__FloatToStr176
  L__FloatToStr177
  L__FloatToStr178
  L__FloatToStr179
  L__FloatToStr180
  L__FloatToStr181
  L__FloatToStr182
  L__FloatToStr183
  L__FloatToStr184
  L__FloatToStr185
  L__FloatToStr186
  L__FloatToStr187
  L__FloatToStr188
  L__FloatToStr189
  L__FloatToStr190
  L__FloatToStr191
  L_main0
  L_main1
  L_main2
  L_ConfiguracionPrincipal4
  L_ConfiguracionPrincipal6
  L_ConfiguracionPrincipal8
  L_ConfiguracionPrincipal10
  L_InterrupcionP112
  L_Muestrear14
  L_Muestrear15
  L_Muestrear16
  L_Muestrear17
  L_Muestrear18
  L_Muestrear19
  L_Muestrear20
  L_Muestrear21
  L_Muestrear22
  L_Muestrear23
  L_Muestrear24
  L_Muestrear25
  L_Muestrear26
  L_Muestrear27
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_spi_133
  L_spi_134
  L_spi_135
  L_spi_136
  L_spi_137
  L_spi_138
  L_spi_139
  L_spi_140
  L_spi_141
  L_spi_142
  L_spi_143
  L_spi_144
  L_spi_145
  L_spi_146
  L_spi_147
  L_spi_148
  L_spi_149
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_156
  L_spi_158
  L_spi_160
  L_spi_162
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_spi_171
  L_spi_172
  L_spi_173
  L_spi_174
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_int_1102
  L_int_1103
  L_int_1104
  L_int_2105
  L_Timer1Int106
  L_Timer1Int107
  L_Timer1Int108
  L_Timer1Int109
  L_Timer1Int110
  L_Timer1Int111
  L_Timer1Int112
  L_Timer1Int113
  L_Timer1Int114
  L_Timer1Int115
  L_Timer1Int116
  L_Timer1Int117
  L_Timer1Int118
  L_Timer1Int119
  L_Timer2Int120
  L_Timer3Int121
  L_urx_1122
  L_urx_1123
  L_urx_1124
  L_urx_1125
  L_urx_1126
  L_urx_1127
  L_urx_1128
  L_urx_1129
  L_urx_1130
  L_urx_1131
  L_urx_1132
  L_urx_1133
  L_urx_1134
  L_urx_1135
  L_urx_1136
  L_urx_1137
  L_urx_1138
  L_urx_1139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L__Muestrear150
  L__Muestrear151
  L__Muestrear152
  L__spi_1153
  L__spi_1154
  L__spi_1155
  L__spi_1156
  L__spi_1157
  L__spi_1158
  L__spi_1159
  L__spi_1160
  L__spi_1161
  L__spi_1162
  L__spi_1163
  L__spi_1164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__Timer1Int214
  L__Timer1Int215
  L__Timer1Int216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L__urx_1222
  L__urx_1223
  L__urx_1224
  L__urx_1225
  L__urx_1226
  L__urx_1227
  L__urx_1228
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear234
  L__Muestrear235
  L__Muestrear236
  L__Muestrear237
  L__Muestrear238
  L__Muestrear239
  L__Muestrear240
  L__Muestrear241
  L_end_spi_1
  _spi_1
  L__spi_1243
  L__spi_1244
  L__spi_1245
  L__spi_1246
  L__spi_1247
  L__spi_1248
  L__spi_1249
  L__spi_1250
  L__spi_1251
  L__spi_1252
  L__spi_1253
  L__spi_1254
  L__spi_1255
  L__spi_1256
  L__spi_1257
  L__spi_1258
  L__spi_1259
  L__spi_1260
  L__spi_1261
  L__spi_1262
  L__spi_1263
  L__spi_1264
  L__spi_1265
  L__spi_1266
  L__spi_1267
  L__spi_1268
  L__spi_1269
  L__spi_1270
  L__spi_1271
  L__spi_1272
  L__spi_1273
  L__spi_1274
  L__spi_1275
  L__spi_1276
  L__spi_1277
  L__spi_1278
  L__spi_1279
  L__spi_1280
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L_end_int_1
  _int_1
  L__int_1287
  L__int_1288
  L__int_1289
  L_end_int_2
  _int_2
  L__int_2291
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int293
  L__Timer1Int294
  L__Timer1Int295
  L__Timer1Int296
  L__Timer1Int297
  L__Timer1Int298
  L_end_Timer2Int
  _Timer2Int
  L__Timer2Int300
  L_end_Timer3Int
  _Timer3Int
  L__Timer3Int302
  L_end_urx_1
  _urx_1
  L__urx_1304
  L__urx_1305
  L__urx_1306
  L__urx_1307
  L__urx_1308
  L__urx_1309
  L__urx_1310
  L__urx_1311
  L__urx_1312
  L__urx_1313
  L__urx_1314
  L__urx_1315
  L__urx_1316
  L__urx_1317
  L__urx_1318
  L__urx_1319
  L__urx_1320
  L__urx_1321
  L__urx_1322
  L_main0
  L_main1
  L_main2
  L_ConfiguracionPrincipal4
  L_ConfiguracionPrincipal6
  L_ConfiguracionPrincipal8
  L_ConfiguracionPrincipal10
  L_InterrupcionP112
  L_Muestrear14
  L_Muestrear15
  L_Muestrear16
  L_Muestrear17
  L_Muestrear18
  L_Muestrear19
  L_Muestrear20
  L_Muestrear21
  L_Muestrear22
  L_Muestrear23
  L_Muestrear24
  L_Muestrear25
  L_Muestrear26
  L_Muestrear27
  L_Muestrear28
  L_Muestrear29
  L_Muestrear30
  L_Muestrear31
  L_Muestrear32
  L_spi_133
  L_spi_134
  L_spi_135
  L_spi_136
  L_spi_137
  L_spi_138
  L_spi_139
  L_spi_140
  L_spi_141
  L_spi_142
  L_spi_143
  L_spi_144
  L_spi_145
  L_spi_146
  L_spi_147
  L_spi_148
  L_spi_149
  L_spi_150
  L_spi_151
  L_spi_152
  L_spi_153
  L_spi_154
  L_spi_156
  L_spi_158
  L_spi_160
  L_spi_162
  L_spi_164
  L_spi_165
  L_spi_166
  L_spi_167
  L_spi_168
  L_spi_169
  L_spi_170
  L_spi_171
  L_spi_172
  L_spi_173
  L_spi_174
  L_spi_175
  L_spi_176
  L_spi_177
  L_spi_178
  L_spi_179
  L_spi_180
  L_spi_181
  L_spi_182
  L_spi_183
  L_spi_184
  L_spi_185
  L_spi_186
  L_spi_187
  L_spi_188
  L_spi_189
  L_spi_190
  L_spi_191
  L_spi_192
  L_spi_193
  L_spi_194
  L_spi_195
  L_spi_196
  L_spi_197
  L_spi_198
  L_spi_199
  L_spi_1100
  L_spi_1101
  L_int_1102
  L_int_1103
  L_int_1104
  L_int_2105
  L_Timer1Int106
  L_Timer1Int107
  L_Timer1Int108
  L_Timer1Int109
  L_Timer1Int110
  L_Timer1Int111
  L_Timer1Int112
  L_Timer1Int113
  L_Timer1Int114
  L_Timer1Int115
  L_Timer1Int116
  L_Timer1Int117
  L_Timer1Int118
  L_Timer1Int119
  L_Timer2Int120
  L_Timer3Int121
  L_urx_1122
  L_urx_1123
  L_urx_1124
  L_urx_1125
  L_urx_1126
  L_urx_1127
  L_urx_1128
  L_urx_1129
  L_urx_1130
  L_urx_1131
  L_urx_1132
  L_urx_1133
  L_urx_1134
  L_urx_1135
  L_urx_1136
  L_urx_1137
  L_urx_1138
  L_urx_1139
  L_urx_1140
  L_urx_1141
  L_urx_1142
  L_urx_1143
  L_urx_1144
  L_urx_1145
  L_urx_1146
  L_urx_1147
  L_urx_1148
  L_urx_1149
  L__Muestrear150
  L__Muestrear151
  L__Muestrear152
  L__spi_1153
  L__spi_1154
  L__spi_1155
  L__spi_1156
  L__spi_1157
  L__spi_1158
  L__spi_1159
  L__spi_1160
  L__spi_1161
  L__spi_1162
  L__spi_1163
  L__spi_1164
  L__spi_1165
  L__spi_1166
  L__spi_1167
  L__spi_1168
  L__spi_1169
  L__spi_1170
  L__spi_1171
  L__spi_1172
  L__spi_1173
  L__spi_1174
  L__spi_1175
  L__spi_1176
  L__spi_1177
  L__spi_1178
  L__spi_1179
  L__spi_1180
  L__spi_1181
  L__spi_1182
  L__spi_1183
  L__spi_1184
  L__spi_1185
  L__spi_1186
  L__spi_1187
  L__spi_1188
  L__spi_1189
  L__spi_1190
  L__spi_1191
  L__spi_1192
  L__spi_1193
  L__spi_1194
  L__spi_1195
  L__spi_1196
  L__spi_1197
  L__spi_1198
  L__spi_1199
  L__spi_1200
  L__spi_1201
  L__spi_1202
  L__spi_1203
  L__spi_1204
  L__spi_1205
  L__spi_1206
  L__spi_1207
  L__spi_1208
  L__spi_1209
  L__spi_1210
  L__spi_1211
  L__spi_1212
  L__spi_1213
  L__Timer1Int214
  L__Timer1Int215
  L__Timer1Int216
  L__urx_1217
  L__urx_1218
  L__urx_1219
  L__urx_1220
  L__urx_1221
  L__urx_1222
  L__urx_1223
  L__urx_1224
  L__urx_1225
  L__urx_1226
  L__urx_1227
  L__urx_1228
  L_end_main
  _main
  L__main_end_loop
  L_end_ConfiguracionPrincipal
  _ConfiguracionPrincipal
  L_end_InterrupcionP1
  _InterrupcionP1
  L_end_Muestrear
  _Muestrear
  L__Muestrear234
  L__Muestrear235
  L__Muestrear236
  L__Muestrear237
  L__Muestrear238
  L__Muestrear239
  L__Muestrear240
  L__Muestrear241
  L_end_spi_1
  _spi_1
  L__spi_1243
  L__spi_1244
  L__spi_1245
  L__spi_1246
  L__spi_1247
  L__spi_1248
  L__spi_1249
  L__spi_1250
  L__spi_1251
  L__spi_1252
  L__spi_1253
  L__spi_1254
  L__spi_1255
  L__spi_1256
  L__spi_1257
  L__spi_1258
  L__spi_1259
  L__spi_1260
  L__spi_1261
  L__spi_1262
  L__spi_1263
  L__spi_1264
  L__spi_1265
  L__spi_1266
  L__spi_1267
  L__spi_1268
  L__spi_1269
  L__spi_1270
  L__spi_1271
  L__spi_1272
  L__spi_1273
  L__spi_1274
  L__spi_1275
  L__spi_1276
  L__spi_1277
  L__spi_1278
  L__spi_1279
  L__spi_1280
  L__spi_1281
  L__spi_1282
  L__spi_1283
  L__spi_1284
  L__spi_1285
  L_end_int_1
  _int_1
  L__int_1287
  L__int_1288
  L__int_1289
  L_end_int_2
  _int_2
  L__int_2291
  L_end_Timer1Int
  _Timer1Int
  L__Timer1Int293
  L__Timer1Int294
  L__Timer1Int295
  L__Timer1Int296
  L__Timer1Int297
  L__Timer1Int298
  L_end_Timer2Int
  _Timer2Int
  L__Timer2Int300
  L_end_Timer3Int
  _Timer3Int
  L__Timer3Int302
  L_end_urx_1
  _urx_1
  L__urx_1304
  L__urx_1305
  L__urx_1306
  L__urx_1307
  L__urx_1308
  L__urx_1309
  L__urx_1310
  L__urx_1311
  L__urx_1312
  L__urx_1313
  L__urx_1314
  L__urx_1315
  L__urx_1316
  L__urx_1317
  L__urx_1318
  L__urx_1319
  L__urx_1320
  L__urx_1321
  L__urx_1322
